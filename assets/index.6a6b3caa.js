var g,I=Object.defineProperty,C=Object.defineProperties,A=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,d=(g,C,A)=>C in g?I(g,C,{enumerable:!0,configurable:!0,writable:!0,value:A}):g[C]=A,Z=(g,I)=>{for(var C in I||(I={}))i.call(I,C)&&d(g,C,I[C]);if(l)for(var C of l(I))c.call(I,C)&&d(g,C,I[C]);return g},e=(g,I)=>C(g,A(I));import{c as m,r as o,g as b,m as a,a as s,B as t,l as n,i as V,b as y,d as X,e as G,w as B,f as W,h,j as p,k as H,n as u,v as Y,o as K,p as R,q as r,R as J,s as w,t as S,u as F,x as k,y as v,z as N,A as f,C as z,O as x,D as U,E as M,F as L,G as T,H as D,I as Q,J as O,P,K as j,T as E,L as q,M as _,N as $,Q as gg,W as Ig,S as Cg,U as Ag,V as lg,X as ig,Y as cg,Z as dg,_ as Zg,$ as eg,a0 as mg,a1 as og,a2 as bg,a3 as ag,a4 as sg,a5 as tg,a6 as ng,a7 as Vg,a8 as yg,a9 as Xg,aa as Gg,ab as Bg}from"./vendor.5c6d3ccf.js";!function(){const g=document.createElement("link").relList;if(!(g&&g.supports&&g.supports("modulepreload"))){for(const g of document.querySelectorAll('link[rel="modulepreload"]'))I(g);new MutationObserver((g=>{for(const C of g)if("childList"===C.type)for(const g of C.addedNodes)"LINK"===g.tagName&&"modulepreload"===g.rel&&I(g)})).observe(document,{childList:!0,subtree:!0})}function I(g){if(g.ep)return;g.ep=!0;const I=function(g){const I={};return g.integrity&&(I.integrity=g.integrity),g.referrerpolicy&&(I.referrerPolicy=g.referrerpolicy),"use-credentials"===g.crossorigin?I.credentials="include":"anonymous"===g.crossorigin?I.credentials="omit":I.credentials="same-origin",I}(g);fetch(g.href,I)}}();var Wg={$ref:"#/definitions/GoslingSpec",$schema:"http://json-schema.org/draft-07/schema#",definitions:{Aggregate:{enum:["max","min","mean","bin","count"],type:"string"},Assembly:{enum:["hg38","hg19","hg18","hg17","hg16","mm10","mm9","unknown"],type:"string"},AxisPosition:{enum:["none","top","bottom","left","right"],type:"string"},BAMData:{additionalProperties:!1,description:"Binary Alignment Map (BAM) is the comprehensive raw data of genome sequencing; it consists of the lossless, compressed binary representation of the Sequence Alignment Map-files.",properties:{extractJunction:{description:"Determine whether to extract exon-to-exon junctions. __Default__: `false`",type:"boolean"},indexUrl:{description:"URL link to the index file of the BAM file",type:"string"},junctionMinCoverage:{description:"Determine the threshold of coverage when extracting exon-to-exon junctions. __Default__: `1`",type:"number"},loadMates:{description:"Load mates that are located in the same chromosome. __Default__: `false`",type:"boolean"},maxInsertSize:{description:"Determines the threshold of insert sizes for determining the structural variants. __Default__: `5000`",type:"number"},type:{const:"bam",type:"string"},url:{description:"URL link to the BAM data file",type:"string"}},required:["type","url","indexUrl"],type:"object"},BEDDBData:{additionalProperties:!1,description:"Regular BED or similar files can be pre-aggregated for the scalable data exploration. Find our more about this format at [HiGlass Docs](https://docs.higlass.io/data_preparation.html#bed-files).",properties:{exonIntervalFields:{description:"experimental",items:[{additionalProperties:!1,properties:{index:{type:"number"},name:{type:"string"}},required:["index","name"],type:"object"},{additionalProperties:!1,properties:{index:{type:"number"},name:{type:"string"}},required:["index","name"],type:"object"}],maxItems:2,minItems:2,type:"array"},genomicFields:{description:"Specify the name of genomic data fields.",items:{additionalProperties:!1,properties:{index:{type:"number"},name:{type:"string"}},required:["index","name"],type:"object"},type:"array"},type:{const:"beddb",type:"string"},url:{description:"Specify the URL address of the data file.",type:"string"},valueFields:{description:"Specify the column indexes, field names, and field types.",items:{additionalProperties:!1,properties:{index:{type:"number"},name:{type:"string"},type:{enum:["nominal","quantitative"],type:"string"}},required:["index","name","type"],type:"object"},type:"array"}},required:["type","url","genomicFields"],type:"object"},BIGWIGData:{additionalProperties:!1,properties:{binSize:{description:"Binning the genomic interval in tiles (unit size: 256).",type:"number"},column:{description:"Assign a field name of the middle position of genomic intervals.",type:"string"},end:{description:"Assign a field name of the end position of genomic intervals.",type:"string"},start:{description:"Assign a field name of the start position of genomic intervals.",type:"string"},type:{const:"bigwig",type:"string"},url:{description:"Specify the URL address of the data file.",type:"string"},value:{description:"Assign a field name of quantitative values.",type:"string"}},required:["type","url","column","value"],type:"object"},CSVData:{additionalProperties:!1,description:'Any small enough tabular data files, such as tsv, csv, BED, BEDPE, and GFF, can be loaded using "csv" data specification.',properties:{chromosomeField:{description:"Specify the name of chromosome data fields.",type:"string"},chromosomePrefix:{description:"experimental",type:"string"},genomicFields:{description:"Specify the name of genomic data fields.",items:{type:"string"},type:"array"},genomicFieldsToConvert:{description:"experimental",items:{additionalProperties:!1,properties:{chromosomeField:{type:"string"},genomicFields:{items:{type:"string"},type:"array"}},required:["chromosomeField","genomicFields"],type:"object"},type:"array"},headerNames:{description:"Specify the names of data fields if a CSV file is headerless.",items:{type:"string"},type:"array"},longToWideId:{description:"experimental",type:"string"},quantitativeFields:{description:"Specify the name of quantitative data fields.",items:{type:"string"},type:"array"},sampleLength:{description:"Specify the number of rows loaded from the URL.\n\n__Default:__ `1000`",type:"number"},separator:{description:"Specify file separator, __Default:__ ','",type:"string"},type:{const:"csv",type:"string"},url:{description:"Specify the URL address of the data file.",type:"string"}},required:["type","url"],type:"object"},Channel:{anyOf:[{$ref:"#/definitions/ChannelDeep"},{$ref:"#/definitions/ChannelValue"}]},ChannelDeep:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/Y"},{$ref:"#/definitions/Row"},{$ref:"#/definitions/Color"},{$ref:"#/definitions/Size"},{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/Text"}]},ChannelValue:{additionalProperties:!1,properties:{value:{description:"Assign a constant value for a visual channel.",type:["number","string"]}},required:["value"],type:"object"},Chromosome:{enum:["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","X","Y","M","chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY","chrM"],type:"string"},Color:{additionalProperties:!1,properties:{domain:{$ref:"#/definitions/ValueExtent",description:"Values of the data"},field:{description:"Name of the data field",type:"string"},legend:{description:"Whether to display legend. __Default__: `false`",type:"boolean"},range:{$ref:"#/definitions/Range",description:"Determine the colors that should be bound to data value. Default properties are determined considering the field type."},type:{description:"Specify the data type",enum:["quantitative","nominal"],type:"string"}},type:"object"},CoverageTransform:{additionalProperties:!1,description:"Aggregate rows and calculate coverage",properties:{endField:{type:"string"},groupField:{description:"The name of a nominal field to group rows by in prior to piling-up",type:"string"},newField:{type:"string"},startField:{type:"string"},type:{const:"coverage",type:"string"}},required:["type","startField","endField"],type:"object"},DataDeep:{anyOf:[{$ref:"#/definitions/JSONData"},{$ref:"#/definitions/CSVData"},{$ref:"#/definitions/BIGWIGData"},{$ref:"#/definitions/MultivecData"},{$ref:"#/definitions/BEDDBData"},{$ref:"#/definitions/VectorData"},{$ref:"#/definitions/MatrixData"},{$ref:"#/definitions/BAMData"}]},DataTrack:{additionalProperties:!1,description:"Partial specification of `BasicSingleTrack` to use default visual encoding predefined by data type.",properties:{_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},data:{$ref:"#/definitions/DataDeep"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overriden by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},width:{description:"Specify the track width in pixels.",type:"number"},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}]},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["data","height","width"],type:"object"},DataTransform:{anyOf:[{$ref:"#/definitions/FilterTransform"},{$ref:"#/definitions/StrConcatTransform"},{$ref:"#/definitions/StrReplaceTransform"},{$ref:"#/definitions/LogTransform"},{$ref:"#/definitions/DisplaceTransform"},{$ref:"#/definitions/ExonSplitTransform"},{$ref:"#/definitions/GenomicLengthTransform"},{$ref:"#/definitions/CoverageTransform"},{$ref:"#/definitions/JSONParseTransform"}]},Datum:{additionalProperties:{type:["number","string"]},description:"Values in the form of JSON.",type:"object"},DisplaceTransform:{additionalProperties:!1,properties:{boundingBox:{additionalProperties:!1,properties:{endField:{description:"The name of a quantitative field that represents the end position.",type:"string"},groupField:{description:"The name of a nominal field to group rows by in prior to piling-up.",type:"string"},isPaddingBP:{description:"Whether to consider `padding` as the bp length.",type:"boolean"},padding:{description:"The padding around visual lements. Either px or bp",type:"number"},startField:{description:"The name of a quantitative field that represents the start position.",type:"string"}},required:["startField","endField"],type:"object"},maxRows:{description:"Specify maximum rows to be generated (default has no limit).",type:"number"},method:{$ref:"#/definitions/DisplacementType",description:"A string that specifies the type of diseplancement."},newField:{type:"string"},type:{const:"displace",type:"string"}},required:["type","boundingBox","method","newField"],type:"object"},Displacement:{additionalProperties:!1,properties:{padding:{type:"number"},type:{$ref:"#/definitions/DisplacementType"}},required:["type"],type:"object"},DisplacementType:{enum:["pile","spread"],type:"string"},DomainChr:{additionalProperties:!1,properties:{chromosome:{$ref:"#/definitions/Chromosome"}},required:["chromosome"],type:"object"},DomainChrInterval:{additionalProperties:!1,properties:{chromosome:{$ref:"#/definitions/Chromosome",description:"If specified, only showing a certain interval in a chromosome."},interval:{items:[{type:"number"},{type:"number"}],maxItems:2,minItems:2,type:"array"}},required:["chromosome","interval"],type:"object"},DomainGene:{additionalProperties:!1,properties:{gene:{anyOf:[{type:"string"},{items:[{type:"string"},{type:"string"}],maxItems:2,minItems:2,type:"array"}]}},required:["gene"],type:"object"},DomainInterval:{additionalProperties:!1,properties:{interval:{items:[{type:"number"},{type:"number"}],maxItems:2,minItems:2,type:"array"}},required:["interval"],type:"object"},ExonSplitTransform:{additionalProperties:!1,properties:{fields:{items:{additionalProperties:!1,properties:{chrField:{type:"string"},field:{type:"string"},newField:{type:"string"},type:{$ref:"#/definitions/FieldType"}},required:["field","type","newField","chrField"],type:"object"},type:"array"},flag:{additionalProperties:!1,properties:{field:{type:"string"},value:{type:["number","string"]}},required:["field","value"],type:"object"},separator:{type:"string"},type:{const:"exonSplit",type:"string"}},required:["type","separator","flag","fields"],type:"object"},FieldType:{enum:["genomic","nominal","quantitative"],type:"string"},FilterTransform:{anyOf:[{$ref:"#/definitions/OneOfFilter"},{$ref:"#/definitions/RangeFilter"},{$ref:"#/definitions/IncludeFilter"}]},FlatTracks:{additionalProperties:!1,properties:{assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overriden by the style of children elements (e.g., view, track)."},tracks:{items:{$ref:"#/definitions/Track"},type:"array"},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}]},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["tracks"],type:"object"},GenomicDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"},{$ref:"#/definitions/DomainGene"}]},GenomicLengthTransform:{additionalProperties:!1,description:"Calculate genomic length using two genomic fields",properties:{endField:{type:"string"},newField:{type:"string"},startField:{type:"string"},type:{const:"genomicLength",type:"string"}},required:["type","startField","endField","newField"],type:"object"},GoslingSpec:{anyOf:[{$ref:"#/definitions/RootSpecWithSingleView"},{$ref:"#/definitions/RootSpecWithMultipleViews"}]},IncludeFilter:{additionalProperties:!1,properties:{field:{description:"A filter is applied based on the values of the specified data field",type:"string"},include:{description:"Check whether the value includes a substring.",type:"string"},not:{description:'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',type:"boolean"},type:{const:"filter",type:"string"}},required:["field","include","type"],type:"object"},JSONData:{additionalProperties:!1,description:"The JSON data format allows users to include data directly in the Gosling's JSON specification.",properties:{chromosomeField:{description:"Specify the name of chromosome data fields.",type:"string"},genomicFields:{description:"Specify the name of genomic data fields.",items:{type:"string"},type:"array"},genomicFieldsToConvert:{description:"experimental",items:{additionalProperties:!1,properties:{chromosomeField:{type:"string"},genomicFields:{items:{type:"string"},type:"array"}},required:["chromosomeField","genomicFields"],type:"object"},type:"array"},quantitativeFields:{description:"Specify the name of quantitative data fields.",items:{type:"string"},type:"array"},sampleLength:{description:"Specify the number of rows loaded from the URL.\n\n__Default:__ `1000`",type:"number"},type:{const:"json",description:"Define data type.",type:"string"},values:{description:"Values in the form of JSON.",items:{$ref:"#/definitions/Datum"},type:"array"}},required:["type","values"],type:"object"},JSONParseTransform:{additionalProperties:!1,description:"Parse JSON Object Array and append vertically",properties:{baseGenomicField:{description:"Base genomic position when parsing relative position.",type:"string"},field:{description:"The field that contains the JSON object array.",type:"string"},genomicField:{description:"Relative genomic position to parse.",type:"string"},genomicLengthField:{description:"Length of genomic interval.",type:"string"},type:{const:"subjson",type:"string"}},required:["type","field","baseGenomicField","genomicField","genomicLengthField"],type:"object"},Layout:{enum:["linear","circular"],type:"string"},LogBase:{anyOf:[{type:"number"},{const:"e",type:"string"}]},LogTransform:{additionalProperties:!1,properties:{base:{$ref:"#/definitions/LogBase",description:"If not specified, 10 is used."},field:{type:"string"},newField:{description:"If specified, store transformed values in a new field.",type:"string"},type:{const:"log",type:"string"}},required:["type","field"],type:"object"},LogicalOperation:{enum:["less-than","lt","LT","greater-than","gt","GT","less-than-or-equal-to","ltet","LTET","greater-than-or-equal-to","gtet","GTET"],type:"string"},Mark:{enum:["point","line","area","bar","rect","text","withinLink","betweenLink","rule","triangleLeft","triangleRight","triangleBottom","brush","header"],type:"string"},MatrixData:{additionalProperties:!1,properties:{type:{const:"matrix",type:"string"},url:{type:"string"}},required:["type","url"],type:"object"},MultipleViews:{additionalProperties:!1,properties:{arrangement:{description:"Specify how multiple views are arranged.",enum:["parallel","serial","horizontal","vertical"],type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overriden by the style of children elements (e.g., view, track)."},views:{description:"An array of view specifications",items:{anyOf:[{$ref:"#/definitions/SingleView"},{$ref:"#/definitions/MultipleViews"}]},type:"array"},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}]},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["views"],type:"object"},MultivecData:{additionalProperties:!1,description:'Two-dimensional quantitative values, one axis for genomic coordinate and the other for different samples, can be converted into HiGlass\' `"multivec"` data. For example, multiple BigWig files can be converted into a single multivec file. You can also convert sequence data (FASTA) into this format where rows will be different nucleotide bases (e.g., A, T, G, C) and quantitative values represent the frequency. Find out more about this format at [HiGlass Docs](https://docs.higlass.io/data_preparation.html#multivec-files).',properties:{binSize:{description:"Binning the genomic interval in tiles (unit size: 256).",type:"number"},categories:{description:"assign names of individual samples.",items:{type:"string"},type:"array"},column:{description:"Assign a field name of the middle position of genomic intervals.",type:"string"},end:{description:"Assign a field name of the end position of genomic intervals.",type:"string"},row:{description:"Assign a field name of samples.",type:"string"},start:{description:"Assign a field name of the start position of genomic intervals.",type:"string"},type:{const:"multivec",type:"string"},url:{description:"Specify the URL address of the data file.",type:"string"},value:{description:"Assign a field name of quantitative values.",type:"string"}},required:["type","url","column","row","value"],type:"object"},OneOfFilter:{additionalProperties:!1,properties:{field:{description:"A filter is applied based on the values of the specified data field",type:"string"},not:{description:'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',type:"boolean"},oneOf:{anyOf:[{items:{type:"string"},type:"array"},{items:{type:"number"},type:"array"}],description:"Check whether the value is an element in the provided list."},type:{const:"filter",type:"string"}},required:["field","oneOf","type"],type:"object"},Opacity:{additionalProperties:!1,properties:{domain:{$ref:"#/definitions/ValueExtent",description:"Values of the data"},field:{description:"Name of the data field",type:"string"},range:{$ref:"#/definitions/ValueExtent",description:"Ranges of visual channel values"},type:{description:"Specify the data type",enum:["quantitative","nominal"],type:"string"}},type:"object"},Orientation:{enum:["horizontal","vertical"],type:"string"},OverlaidTrack:{additionalProperties:!1,description:"Superposing multiple tracks.",properties:{_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlay:{items:{additionalProperties:!1,properties:{_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},flipY:{type:"boolean"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overriden by the style of children elements (e.g., view, track)."},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}]},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},type:"object"},type:"array"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overriden by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}]},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["height","overlay","width"],type:"object"},OverlaidTracks:{additionalProperties:!1,properties:{_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},alignment:{const:"overlay",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overriden by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},tracks:{items:{$ref:"#/definitions/PartialTrack"},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}]},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["alignment","tracks","width","height"],type:"object"},PREDEFINED_COLORS:{enum:["viridis","grey","spectral","warm","cividis","bupu","rdbu"],type:"string"},PartialTrack:{additionalProperties:!1,properties:{_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},encoding:{additionalProperties:{$ref:"#/definitions/Channel"},type:"object"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlay:{items:{additionalProperties:!1,properties:{_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},flipY:{type:"boolean"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overriden by the style of children elements (e.g., view, track)."},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}]},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},type:"object"},type:"array"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overriden by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},template:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}]},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},type:"object"},Range:{anyOf:[{$ref:"#/definitions/ValueExtent"},{$ref:"#/definitions/PREDEFINED_COLORS"}]},RangeFilter:{additionalProperties:!1,properties:{field:{description:"A filter is applied based on the values of the specified data field",type:"string"},inRange:{description:"Check whether the value is in a number range.",items:{type:"number"},type:"array"},not:{description:'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',type:"boolean"},type:{const:"filter",type:"string"}},required:["field","inRange","type"],type:"object"},RootSpecWithMultipleViews:{additionalProperties:!1,properties:{arrangement:{description:"Specify how multiple views are arranged.",enum:["parallel","serial","horizontal","vertical"],type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},description:{type:"string"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overriden by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},title:{type:"string"},views:{description:"An array of view specifications",items:{anyOf:[{$ref:"#/definitions/SingleView"},{$ref:"#/definitions/MultipleViews"}]},type:"array"},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}]},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["views"],type:"object"},RootSpecWithSingleView:{anyOf:[{additionalProperties:!1,properties:{_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},alignment:{const:"overlay",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},description:{type:"string"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overriden by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},tracks:{items:{$ref:"#/definitions/PartialTrack"},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}]},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["alignment","height","tracks","width"],type:"object"},{additionalProperties:!1,properties:{_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},alignment:{const:"stack",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},description:{type:"string"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overriden by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},tracks:{items:{anyOf:[{$ref:"#/definitions/PartialTrack"},{$ref:"#/definitions/OverlaidTracks"}]},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}]},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["tracks"],type:"object"},{additionalProperties:!1,properties:{assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},description:{type:"string"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overriden by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},title:{type:"string"},tracks:{items:{$ref:"#/definitions/Track"},type:"array"},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}]},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["tracks"],type:"object"}]},Row:{additionalProperties:!1,properties:{domain:{$ref:"#/definitions/ValueExtent",description:"Values of the data"},field:{description:"Name of the data field",type:"string"},grid:{description:"Whether to display grid. __Default__: `false`",type:"boolean"},legend:{description:"Whether to display legend. __Default__: `false`",type:"boolean"},padding:{description:"Determines the size of inner white spaces on the top and bottom of individiual rows. __Default__: `0`",type:"number"},range:{$ref:"#/definitions/ValueExtent",description:"Determine the start and end position of rendering area of this track along vertical axis. __Default__: `[0, height]`"},type:{const:"nominal",description:"Specify the data type",type:"string"}},type:"object"},SingleTrack:{additionalProperties:!1,properties:{_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overriden by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}]},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["data","height","mark","width"],type:"object"},SingleView:{anyOf:[{$ref:"#/definitions/OverlaidTracks"},{$ref:"#/definitions/StackedTracks"},{$ref:"#/definitions/FlatTracks"}]},Size:{additionalProperties:!1,properties:{domain:{$ref:"#/definitions/ValueExtent",description:"Values of the data"},field:{description:"Name of the data field",type:"string"},legend:{description:"not supported: Whether to display legend. __Default__: `false`",type:"boolean"},range:{$ref:"#/definitions/ValueExtent",description:"Ranges of visual channel values"},type:{description:"Specify the data type",enum:["quantitative","nominal"],type:"string"}},type:"object"},SizeVisibilityCondition:{additionalProperties:!1,properties:{conditionPadding:{description:"Specify the buffer size (in pixel) of width or height when calculating the visibility.\n\n__Default__: `0`",type:"number"},measure:{description:"Specify which aspect of the `target` will be compared to the `threshold`.",enum:["width","height"],type:"string"},operation:{$ref:"#/definitions/LogicalOperation",description:'A string that pecifies the logical operation to conduct between `threshold` and the `measure` of `target`. Support\n\n- greater than : "greater-than", "gt", "GT"\n\n- less than : "less-than", "lt", "LT"\n\n- greater than or equal to : "greater-than-or-equal-to", "gtet", "GTET"\n\n- less than or equal to : "less-than-or-equal-to", "ltet", "LTET"'},target:{description:"Target specifies the object that you want to compare with the threshold.",enum:["track","mark"],type:"string"},threshold:{anyOf:[{type:"number"},{const:"|xe-x|",type:"string"}],description:'Specify the threshold as one of:\n\n- A number representing a fixed threshold in the unit of pixels;\n\n- `"|xe-x|"`, using the distance between `xe` and `x` as threshold'},transitionPadding:{description:"Specify the buffer size (in pixel) of width or height for smooth transition.\n\n__Default__: `0`",type:"number"}},required:["measure","operation","target","threshold"],type:"object"},StackedTracks:{additionalProperties:!1,properties:{_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},alignment:{const:"stack",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overriden by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},tracks:{items:{anyOf:[{$ref:"#/definitions/PartialTrack"},{$ref:"#/definitions/OverlaidTracks"}]},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}]},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["tracks"],type:"object"},StrConcatTransform:{additionalProperties:!1,properties:{fields:{items:{type:"string"},type:"array"},newField:{type:"string"},separator:{type:"string"},type:{const:"concat",type:"string"}},required:["type","fields","newField","separator"],type:"object"},StrReplaceTransform:{additionalProperties:!1,properties:{field:{type:"string"},newField:{type:"string"},replace:{items:{additionalProperties:!1,properties:{from:{type:"string"},to:{type:"string"}},required:["from","to"],type:"object"},type:"array"},type:{const:"replace",type:"string"}},required:["type","field","newField","replace"],type:"object"},Stroke:{additionalProperties:!1,properties:{domain:{$ref:"#/definitions/ValueExtent",description:"Values of the data"},field:{description:"Name of the data field",type:"string"},range:{$ref:"#/definitions/Range",description:"Ranges of visual channel values"},type:{description:"Specify the data type",enum:["quantitative","nominal"],type:"string"}},type:"object"},StrokeWidth:{additionalProperties:!1,properties:{domain:{$ref:"#/definitions/ValueExtent",description:"Values of the data"},field:{description:"Name of the data field",type:"string"},range:{$ref:"#/definitions/ValueExtent",description:"Ranges of visual channel values"},type:{description:"Specify the data type",enum:["quantitative","nominal"],type:"string"}},type:"object"},Style:{additionalProperties:!1,properties:{align:{description:"Specify the alignment of marks. This property is currently only supported for `triangle` marks.",enum:["left","right"],type:"string"},background:{type:"string"},backgroundOpacity:{type:"number"},bazierLink:{description:"Specify whether to use bazier curves for the `link` marks.",type:"boolean"},curve:{description:"Specify the curve of `rule` marks.",enum:["top","bottom","left","right"],type:"string"},dashed:{description:"Specify the pattern of dashes and gaps for `rule` marks.",items:[{type:"number"},{type:"number"}],maxItems:2,minItems:2,type:"array"},dx:{description:"Offset the position of marks in x direction. This property is currently only supported for `text` marks",type:"number"},dy:{description:"Offset the position of marks in y direction. This property is currently only supported for `text` marks.",type:"number"},enableSmoothPath:{description:"Whether to enable smooth paths when drawing curves.\n\n__Default__: `false`",type:"boolean"},flatWithinLink:{description:"Specify whether to use a flat within-links, such as the one in Sashimi plots. __Default__: `false`",type:"boolean"},inlineLegend:{description:"Specify whether to show legend in a single horizontal line?",type:"boolean"},legendTitle:{description:"If defined, show legend title on the top or left",type:"string"},linePattern:{additionalProperties:!1,description:"Specify the pattern of dashes and gaps for `rule` marks.",properties:{size:{type:"number"},type:{enum:["triangleLeft","triangleRight"],type:"string"}},required:["type","size"],type:"object"},linkConnectionType:{description:'Specify the connetion type of `betweenLink` marks.\n\n__Default__: `"corner"`',enum:["straight","curve","corner"],type:"string"},outline:{type:"string"},outlineWidth:{type:"number"},textAnchor:{description:"Specify the alignment of `text` marks to a given point.",enum:["start","middle","end"],type:"string"},textFontSize:{description:"Specify the font size of `text` marks. Can also be specified using the `size` channel option of `text` marks.",type:"number"},textFontWeight:{description:"Specify the font weight of `text` marks.",enum:["bold","normal"],type:"string"},textStroke:{description:"Specify the stroke of `text` marks. Can also be specified using the `stroke` channel option of `text` marks.",type:"string"},textStrokeWidth:{description:"Specify the stroke width of `text` marks. Can also be specified using the `strokeWidth` channel option of `text` marks.",type:"number"}},type:"object"},TemplateTrack:{additionalProperties:!1,description:"Template specification that will be internally converted into `SingleTrack` for rendering.",properties:{_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},data:{$ref:"#/definitions/DataDeep"},encoding:{additionalProperties:{$ref:"#/definitions/Channel"},type:"object"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overriden by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},template:{type:"string"},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},width:{description:"Specify the track width in pixels.",type:"number"},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}]},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["data","height","template","width"],type:"object"},Text:{additionalProperties:!1,properties:{domain:{description:"Values of the data",items:{type:"string"},type:"array"},field:{description:"Name of the data field",type:"string"},range:{description:"Ranges of visual channel values",items:{type:"string"},type:"array"},type:{description:"Specify the data type",enum:["quantitative","nominal"],type:"string"}},type:"object"},Tooltip:{additionalProperties:!1,properties:{alt:{type:"string"},field:{type:"string"},format:{type:"string"},type:{$ref:"#/definitions/FieldType"}},required:["field","type"],type:"object"},Track:{anyOf:[{$ref:"#/definitions/SingleTrack"},{$ref:"#/definitions/OverlaidTrack"},{$ref:"#/definitions/DataTrack"},{$ref:"#/definitions/TemplateTrack"}]},ValueExtent:{anyOf:[{items:{type:"string"},type:"array"},{items:{type:"number"},type:"array"}]},VectorData:{additionalProperties:!1,description:'One-dimensional quantitative values along genomic position (e.g., bigwig) can be converted into HiGlass\' `"vector"` format data. Find out more about this format at [HiGlass Docs](https://docs.higlass.io/data_preparation.html#bigwig-files).',properties:{binSize:{description:"Binning the genomic interval in tiles (unit size: 256).",type:"number"},column:{description:"Assign a field name of the middle position of genomic intervals.",type:"string"},end:{description:"Assign a field name of the end position of genomic intervals.",type:"string"},start:{description:"Assign a field name of the start position of genomic intervals.",type:"string"},type:{const:"vector",type:"string"},url:{description:"Specify the URL address of the data file.",type:"string"},value:{description:"Assign a field name of quantitative values.",type:"string"}},required:["type","url","column","value"],type:"object"},VisibilityCondition:{anyOf:[{$ref:"#/definitions/SizeVisibilityCondition"},{$ref:"#/definitions/ZoomLevelVisibilityCondition"}]},X:{additionalProperties:!1,properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Specify how to aggregate data. __Default__: `undefined`"},axis:{$ref:"#/definitions/AxisPosition",description:"Specify where should the axis be put"},domain:{$ref:"#/definitions/GenomicDomain",description:"Values of the data"},field:{description:"Name of the data field.",type:"string"},grid:{description:"Whether to display grid. __Default__: `false`",type:"boolean"},legend:{description:"Whether to display legend. __Default__: `false`",type:"boolean"},linkingId:{description:"Users need to assign a unique linkingId for [linking views](/docs/user-interaction#linking-views) and [Brushing and Linking](/docs/user-interaction#brushing-and-linking)",type:"string"},range:{$ref:"#/definitions/ValueExtent",description:"Values of the visual channel."},type:{const:"genomic",description:"Specify the data type.",type:"string"}},type:"object"},Y:{additionalProperties:!1,properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Specify how to aggregate data. __Default__: `undefined`"},axis:{$ref:"#/definitions/AxisPosition",description:"Specify where should the axis be put"},baseline:{description:"Custom baseline of the y-axis. __Default__: `0`",type:["string","number"]},domain:{$ref:"#/definitions/ValueExtent",description:"Values of the data"},field:{description:"Name of the data field.",type:"string"},flip:{description:"Whether to flip the y-axis. This is done by inverting the `range` property. __Default__: `false`",type:"boolean"},grid:{description:"Whether to display grid. __Default__: `false`",type:"boolean"},legend:{description:"Whether to display legend. __Default__: `false`",type:"boolean"},linkingId:{description:"Users need to assign a unique linkingId for [linking views](/docs/user-interaction#linking-views) and [Brushing and Linking](/docs/user-interaction#brushing-and-linking)",type:"string"},range:{$ref:"#/definitions/ValueExtent",description:"Values of the visual channel."},type:{description:"Specify the data type.",enum:["quantitative","nominal","genomic"],type:"string"},zeroBaseline:{description:"Specify whether to use zero baseline. __Default__: `true`",type:"boolean"}},type:"object"},ZoomLevelVisibilityCondition:{additionalProperties:!1,properties:{conditionPadding:{description:"Specify the buffer size (in pixel) of width or height when calculating the visibility.\n\n__Default__: `0`",type:"number"},measure:{const:"zoomLevel",description:"Specify which aspect of the `target` will be compared to the `threshold`.",type:"string"},operation:{$ref:"#/definitions/LogicalOperation",description:'A string that pecifies the logical operation to conduct between `threshold` and the `measure` of `target`. Support\n\n- greater than : "greater-than", "gt", "GT"\n\n- less than : "less-than", "lt", "LT"\n\n- greater than or equal to : "greater-than-or-equal-to", "gtet", "GTET"\n\n- less than or equal to : "less-than-or-equal-to", "ltet", "LTET"'},target:{description:"Target specifies the object that you want to compare with the threshold.",enum:["track","mark"],type:"string"},threshold:{description:"Set a threshold in the unit of base pairs (bp)",type:"number"},transitionPadding:{description:"Specify the buffer size (in pixel) of width or height for smooth transition.\n\n__Default__: `0`",type:"number"}},required:["measure","operation","target","threshold"],type:"object"},ZoomLimits:{items:[{type:["number","null"]},{type:["number","null"]}],maxItems:2,minItems:2,type:"array"}}};const hg=g=>{let I=m(g);I||(I=m("gray"));return o([I.rgb().r/255,I.rgb().g/255,I.rgb().b/255])};function pg(g,I,C,A,l){const i=Math.max(Math.min(I,g),0),c=null!=l?l:0,d=(A-C)/360*Math.PI*2-2*c;return-(C/360*Math.PI*2+i/I*d)-Math.PI/2-c}function Hg(g,I,C,A,l,i,c){return{x:A+C*Math.cos(pg(g,I,i,c)),y:l+C*Math.sin(pg(g,I,i,c))}}function ug(g,I,C,A){return C<=g?Math.atan((I-A)/(g-C)):Math.atan((I-A)/(g-C))-Math.PI}const Yg={fontSize:"12px",fontFamily:"sans-serif",fontWeight:"normal",fill:"black",background:"white",lineJoin:"round",stroke:"#ffffff",strokeThickness:0};function Kg(g,I,C){!function(g,I,C){var A,l,i,c,d;const Z=I.spec();if(!Dg(Z.y)||!0!==Z.y.grid)return;const[e,m]=g.position,[o,b]=g.dimensions,a=e,s=e+o,t="circular"===I.spec().layout,n=null!=(A=Z.innerRadius)?A:220,V=null!=(l=Z.outerRadius)?l:300,y=null!=(i=Z.startAngle)?i:0,X=null!=(c=Z.endAngle)?c:360,G=V-n,B=o/2,W=b/2,h=null!=(d=I.getChannelDomainArray("row"))?d:["___SINGLE_ROW___"],p=b/h.length,H=I.getChannelScale("y"),u=I.getChannelDomainArray("y");if(!H||!u)return;if(t&&p/b*G<=20||!t&&p<=20)return;const Y=g.pBackground,K=C.axis.gridStrokeWidth;h.forEach((g=>{const A=I.encodedValue("row",g),l=t?p/b*G:p,i=Math.max(Math.ceil(l/40),1);let c=H.ticks(i).filter((g=>u[0]<=g&&g<=u[1]));1===c.length&&(c=H.ticks(i+1).filter((g=>u[0]<=g&&g<=u[1]))),t?c.forEach((g=>{const I=H(g),l=V-(A+p-I)/b*G,i=l+K/2,c=l-K/2,d=Hg(0,o,c,B,W,y,X),Z=pg(0,o,y,X),a=pg(o,o,y,X);Y.lineStyle(K,hg("black"),0,.5),Y.beginFill(hg(C.axis.gridColor),1),Y.moveTo(e+d.x,m+d.y),Y.arc(e+B,m+W,c,Z,a,!0),Y.arc(e+B,m+W,i,a,Z,!1),Y.closePath()})):(Y.lineStyle(K,hg(C.axis.gridColor),1,.5),c.forEach((g=>{var I;const l=m+A+p-H(g);if("solid"===C.axis.gridStrokeType)Y.moveTo(a,l),Y.lineTo(s,l);else if("dashed"===C.axis.gridStrokeType){const[g,A]=null!=(I=C.axis.gridStrokeDash)?I:[1,1];for(let I=a;I<s;I+=g+A)Y.moveTo(I,l),Y.lineTo(I+g,l)}})))}))}(g,I,C),function(g,I,C){var A,l,i,c;const d=I.spec();if(!Dg(d.row)||!0!==d.row.grid)return;const[Z,e]=g.position,[m,o]=g.dimensions,b="circular"===I.spec().layout,a=null!=(A=d.innerRadius)?A:220,s=null!=(l=d.outerRadius)?l:300,t=null!=(i=d.startAngle)?i:0,n=null!=(c=d.endAngle)?c:360,V=s-a,y=m/2,X=o/2,G=I.getChannelDomainArray("row");if(!G)return;const B=o/G.length;if(b&&V<=20||!b&&B<=20)return;const W=g.pBackground,h=C.axis.gridStrokeWidth;G.forEach((g=>{const A=I.encodedValue("row",g);if(b){const g=s-(A+B/2)/o*V,I=g+h/2,l=g-h/2,i=Hg(0,m,l,y,X,t,n),c=pg(0,m,t,n),d=pg(m,m,t,n);W.lineStyle(h,hg("black"),0,.5),W.beginFill(hg(C.axis.gridColor),1),W.moveTo(Z+i.x,e+i.y),W.arc(Z+y,e+X,l,c,d,!0),W.arc(Z+y,e+X,I,d,c,!1),W.closePath()}else{W.lineStyle(h,hg(C.axis.gridColor),1,.5);const g=e+A+B/2;W.moveTo(Z,g),W.lineTo(Z+m,g)}}))}(g,I,C)}const Rg={color:"black",size:10,fontFamily:"Arial",fontWeight:"normal",stroke:"#ffffff",strokeThickness:0};function rg(g=Rg){var I,C,A,l,i,c;return{fontSize:`${null!=(I=g.size)?I:Rg.size}px`,fontFamily:null!=(C=g.fontFamily)?C:Rg.fontFamily,fontWeight:null!=(A=g.fontWeight)?A:Rg.fontWeight,fill:null!=(l=g.color)?l:Rg.color,background:"white",lineJoin:"round",stroke:null!=(i=g.stroke)?i:Rg.stroke,strokeThickness:null!=(c=g.strokeThickness)?c:Rg.strokeThickness}}function Jg(g,I,C,A,l){const i=A.spec();if(Dg(i.color)&&i.color.legend)switch(i.color.type){case"nominal":!function(g,I,C,A,l){var i,c,d,m,o;const b=A.spec();if(!Dg(b.color)||"nominal"!==b.color.type||!b.color.legend)return;const a=null!=(i=A.getChannelDomainArray("color"))?i:["___SINGLE_COLOR___"];if(0===a.length)return;const s=I.pBorder,t=10,n=4;let V=n,y=0;const X=[],G=rg({color:l.legend.labelColor,size:l.legend.labelFontSize,fontWeight:l.legend.labelFontWeight,fontFamily:l.legend.labelFontFamily});if(null==(c=b.style)?void 0:c.inlineLegend)a.map((g=>g)).reverse().forEach((C=>{if(y>I.dimensions[0])return;const l=A.encodedValue("color",C),i=new g.libraries.PIXI.Text(C,G);i.anchor.x=1,i.anchor.y=0,i.position.x=I.position[0]+I.dimensions[0]-y-t,i.position.y=I.position[1]+n,s.addChild(i);const c=new g.libraries.PIXI.TextStyle(G),d=g.libraries.PIXI.TextMetrics.measureText(C,c);V<d.height+3*n&&(V=d.height+3*n),X.push({x:I.position[0]+I.dimensions[0]-d.width-y-2*t,y:I.position[1]+n+d.height/2,color:l}),y+=d.width+3*t}));else{if(null==(d=b.style)?void 0:d.legendTitle){const C=new g.libraries.PIXI.Text(null==(m=b.style)?void 0:m.legendTitle,e(Z({},G),{fontWeight:"bold"}));C.anchor.x=1,C.anchor.y=0,C.position.x=I.position[0]+I.dimensions[0]-t,C.position.y=I.position[1]+V;const A=new g.libraries.PIXI.TextStyle(e(Z({},G),{fontWeight:"bold"})),l=g.libraries.PIXI.TextMetrics.measureText(null==(o=b.style)?void 0:o.legendTitle,A);s.addChild(C),V+=l.height+2*n}a.forEach((C=>{if(V>I.dimensions[1])return;const l=A.encodedValue("color",C),i=new g.libraries.PIXI.Text(C,G);i.anchor.x=1,i.anchor.y=0,i.position.x=I.position[0]+I.dimensions[0]-t,i.position.y=I.position[1]+V,s.addChild(i);const c=new g.libraries.PIXI.TextStyle(G),d=g.libraries.PIXI.TextMetrics.measureText(C,c);y<d.width+3*t&&(y=d.width+3*t),X.push({x:I.position[0]+I.dimensions[0]-d.width-2*t,y:I.position[1]+V+d.height/2,color:l}),V+=d.height+2*n}))}s.beginFill(hg(l.legend.background),l.legend.backgroundOpacity),s.lineStyle(1,hg(l.legend.backgroundStroke),l.legend.backgroundOpacity,0),s.drawRect(I.position[0]+I.dimensions[0]-y-1,I.position[1]+1,y,V-n),X.forEach((g=>{s.lineStyle(1,hg("black"),0,0),s.beginFill(hg(g.color),1),s.drawCircle(g.x,g.y,4)}))}(g,I,0,A,l);break;case"quantitative":!function(g,I,C,A,l){const i=A.spec();if(!Dg(i.color)||"quantitative"!==i.color.type||!i.color.legend)return;const[c,d]=I.position,[Z,e]=I.dimensions,m=80,o=e-2>110?110:Math.max(e-2,38),b={top:10,left:55,width:20,height:o-20},a=c+Z-m-1,s=d+1,t=A.getChannelScale("color"),n=A.getChannelDomainArray("color");if(!t||!n)return;const V=I.pBorder;V.beginFill(hg(l.legend.background),l.legend.backgroundOpacity),V.lineStyle(1,hg(l.legend.backgroundStroke),l.legend.backgroundOpacity,0),V.drawRect(a,s,m,o);const[y,X]=n,G=X-y;[...Array(b.height).keys()].forEach((g=>{const I=(b.height-g)/b.height*G+y;V.beginFill(hg(t(I)),1),V.lineStyle(1,hg(l.legend.backgroundStroke),0,.5),V.drawRect(a+b.left,s+b.top+g,b.width,1)}));const B=Math.max(Math.ceil(b.height/30),2);let W=t.ticks(B).filter((g=>n[0]<=g&&g<=n[1]));1===W.length&&(W=t.ticks(B+1).filter((g=>n[0]<=g&&g<=n[1])));const h=1;V.lineStyle(h,hg(l.legend.tickColor),1,.5);const p=rg({color:l.legend.labelColor,size:l.legend.labelFontSize,fontWeight:l.legend.labelFontWeight,fontFamily:l.legend.labelFontFamily}),H=a+b.left;W.forEach((I=>{let C=s+b.top+b.height-(I-y)/G*b.height;C===s+b.top?C+=h/2:C===s+b.top+b.height&&(C-=h/2),V.moveTo(H-3,C),V.lineTo(H,C);const A=new g.libraries.PIXI.Text(I,p);A.anchor.x=1,A.anchor.y=.5,A.position.x=H-6,A.position.y=C,V.addChild(A)}))}(g,I,0,A,l)}}const wg=["x","xe","x1","x1e","y","ye","y1","y1e","color","size","row","stroke","strokeWidth","opacity","text"];function Sg(g,I,C,A){if(!g||!I||!C)return;if("brush"===A.spec().mark)return;if(["x","x1","x1e","xe"].forEach((g=>{A.setChannelScale(g,I._xScale)})),Mg(A.spec())){const g=I._yScale.copy();g.range([g.range()[1],g.range()[0]]),["y","y1","y1e","ye"].forEach((I=>{A.setChannelScale(I,g)}))}const[l,i]=I.dimensions;switch(A.spec().mark){case"point":!function(g,I,C){var A,l,i,c,d;const Z=C.spec();if(!Z.width||!Z.height)return void console.warn("Size of a track is not properly determined, so visual mark cannot be rendered");const e=C.data(),[m,o]=g.dimensions,b=C.getChannelScale("x").invert(m)-C.getChannelScale("x").invert(0),a="circular"===Z.layout,s=null!=(A=Z.innerRadius)?A:220,t=null!=(l=Z.outerRadius)?l:300,n=null!=(i=Z.startAngle)?i:0,V=null!=(c=Z.endAngle)?c:360,y=t-s,X=m/2,G=o/2,B=null!=(d=C.getChannelDomainArray("row"))?d:["___SINGLE_ROW___"],W=o/B.length;B.forEach((A=>{const l=C.encodedValue("row",A);e.filter((g=>!Pg(g,Z.row)||Pg(g,Z.row)===A)).forEach((A=>{const i=C.encodedPIXIProperty("x-center",A),c=C.encodedPIXIProperty("y-center",A),d=C.encodedPIXIProperty("color",A),Z=C.encodedPIXIProperty("p-size",A),e=C.encodedPIXIProperty("strokeWidth",A),s=C.encodedPIXIProperty("stroke",A),B=C.encodedPIXIProperty("opacity",A),h=C.markVisibility(A,{width:Z,zoomLevel:b}),p=Math.min(h,B);if(!(Z<=.1||0===p||i+Z<0||i-Z>m))if(I.lineStyle(e,hg(s),p,1),a){const g=Hg(i,m,t-(l+W-c)/o*y,X,G,n,V);I.beginFill(hg(d),p),I.drawCircle(g.x,g.y,Z)}else if(I.beginFill(hg(d),p),I.drawCircle(i,l+W-c,Z),null==g?void 0:g.tooltips){const I=l+W-c;g.tooltips.push({datum:A,isMouseOver:(g,C)=>Math.sqrt(Math.abs(g-i)*Math.abs(g-i)+Math.abs(C-I)*Math.abs(C-I))<Z+1,markInfo:{x:i,y:l+W-c,width:Z,height:Z,type:"point"}})}}))}))}(I,C.graphics,A);break;case"bar":!function(g,I,C){var A,l,i,c,d,Z,e;const m=C.spec();if(!m.width||!m.height)return void console.warn("Size of a track is not properly determined, so visual mark cannot be rendered");const o=C.data(),[a,s]=g.dimensions,t=g.tilesetInfo.tile_size,{tileX:n,tileWidth:V}=g.getTilePosAndDimensions(I.gos.zoomLevel,I.gos.tilePos,t),y=C.getChannelScale("x").invert(a)-C.getChannelScale("x").invert(0),X="circular"===m.layout,G=null!=(A=m.innerRadius)?A:220,B=null!=(l=m.outerRadius)?l:300,W=null!=(i=m.startAngle)?i:0,h=null!=(c=m.endAngle)?c:360,p=B-G,H=a/2,u=s/2,Y=C.getChannelScale("x"),K=Y(n+V/t)-Y(n),R=null!=(d=C.getChannelDomainArray("row"))?d:["___SINGLE_ROW___"],r=s/R.length,J=Dg(m.y)?null==(Z=m.y)?void 0:Z.baseline:void 0,w=null!=(e=C.encodedValue("y",J))?e:0,S=I.graphics;if(Og(m)){const I=C.getGenomicChannel();if(!I||!I.field)return void console.warn("Genomic field is not provided in the specification");const A=b(o,(g=>g[I.field]));[...A.keys()].forEach((I=>{var l;let i=0;null==(l=A.get(I))||l.forEach((I=>{const A=C.encodedPIXIProperty("color",I),l=C.encodedPIXIProperty("stroke",I),c=C.encodedPIXIProperty("strokeWidth",I),d=C.encodedPIXIProperty("opacity",I),Z=C.encodedPIXIProperty("y",I),e=C.encodedPIXIProperty("width",I,{tileUnitWidth:K}),o=C.encodedPIXIProperty("x-start",I,{markWidth:e}),b=o+e,t=C.markVisibility(I,{width:e,zoomLevel:y}),n=Math.min(t,d);if(!(0===n||e<=0||Z<=0)){if(S.lineStyle(c,hg(l),n,0),X){const g=B-(r-i)/s*p,I=B-(r-Z-i)/s*p,C=Hg(o,a,I,H,u,W,h),l=pg(o,a,W,h),c=pg(o+e,a,W,h);S.beginFill(hg(A),n),S.moveTo(C.x,C.y),S.arc(H,u,I,l,c,!0),S.arc(H,u,g,c,l,!1),S.closePath()}else{const C=r-Z-i,l=Z;S.beginFill(hg(A),n),S.drawRect(o,r-Z-i,e,Z),m.tooltip&&g.tooltips.push({datum:I,isMouseOver:(g,I)=>o-1<g&&g<b+1&&C-1<I&&I<C+l+1,markInfo:{x:o,y:C,width:e,height:l,type:"bar"}})}i+=Z}}))}))}else R.forEach((I=>{const A=C.encodedValue("row",I);o.filter((g=>{const C=Pg(g,m.row);return!C||C===I})).forEach((I=>{const l=C.encodedPIXIProperty("color",I),i=C.encodedPIXIProperty("stroke",I),c=C.encodedPIXIProperty("strokeWidth",I),d=C.encodedPIXIProperty("opacity");let Z=C.encodedPIXIProperty("y",I),e=C.encodedPIXIProperty("ye",I);void 0!==e&&([Z,e]=[Z,e].sort());const o=C.encodedPIXIProperty("width",I,{tileUnitWidth:K}),b=C.encodedPIXIProperty("x-start",I,{markWidth:o}),t=b+o;let n,V;void 0===e?(n=A+r-w-Z,V=A+r-w):(n=A+r-e,V=A+r-Z);const G=C.markVisibility(I,{width:o,zoomLevel:y}),Y=Math.min(G,d);if(0!==Y&&0!==o&&0!==Z)if(S.lineStyle(c,hg(i),Y,0),X){const g=B-n/s*p,I=B-V/s*p,C=Hg(b,a,I,H,u,W,h),A=pg(b,a,W,h),i=pg(b+o,a,W,h);S.beginFill(hg(l),Y),S.moveTo(C.x,C.y),S.arc(H,u,I,A,i,!0),S.arc(H,u,g,i,A,!1),S.closePath()}else if(S.beginFill(hg(l),Y),S.drawRect(b,n,o,V-n),m.tooltip){const C=V-n;g.tooltips.push({datum:I,isMouseOver:(g,I)=>b-1<g&&g<t+1&&n-1<I&&I<V+1,markInfo:{x:b,y:n,width:o,height:C,type:"bar"}})}}))}))}(I,C,A);break;case"line":!function(g,I,C,A,l){var i,c,d,Z,e,m;const o=I.spec();if(!o.width||!o.height)return void console.warn("Size of a track is not properly determined, so visual mark cannot be rendered");const b=I.data(),a="circular"===o.layout,s=null!=(i=o.innerRadius)?i:220,t=null!=(c=o.outerRadius)?c:300,n=null!=(d=o.startAngle)?d:0,V=null!=(Z=o.endAngle)?Z:360,y=t-s,X=A/2,G=l/2,B=null!=(e=I.getChannelDomainArray("row"))?e:["___SINGLE_ROW___"],W=l/B.length,h=null!=(m=I.getChannelDomainArray("color"))?m:["___SINGLE_COLOR___"];B.forEach((i=>{const c=I.encodedValue("row",i);h.forEach((d=>{b.filter((g=>!(Pg(g,o.row)&&Pg(g,o.row)!==i||Pg(g,o.color)&&Pg(g,o.color)!==d))).sort(((g,I)=>Pg(g,o.x)-Pg(I,o.x))).forEach(((i,d)=>{const Z=I.encodedPIXIProperty("x",i),e=I.encodedPIXIProperty("y",i),m=I.encodedPIXIProperty("size",i),b=I.encodedPIXIProperty("color",i),s=I.encodedPIXIProperty("opacity",i);if(g.lineStyle(m,hg(b),s,.5),a){const I=Hg(Z,A,t-(c+W-e)/l*y,X,G,n,V);0===d?g.moveTo(I.x,I.y):g.lineTo(I.x,I.y)}else 0===d?g.moveTo(Z,c+W-e):g.lineTo(Z,c+W-e),o.tooltip&&C.push({datum:i,isMouseOver:(g,I)=>Z-1<g&&g<Z+1&&c-1<I&&I<c+W+1,markInfo:{x:Z,y:e,width:1,height:e,type:"line"}})}))}))}))}(C.graphics,A,I.tooltips,l,i);break;case"area":!function(g,I,C,A){var l,i,c,d,Z,e;const m=A.spec(),o=A.data(),t=I.dimensions[0],n=I.dimensions[1],V=I.tilesetInfo.tile_size,{tileX:y}=I.getTilePosAndDimensions(C.gos.zoomLevel,C.gos.tilePos,V),X="circular"===m.layout,G=null!=(l=m.innerRadius)?l:220,B=null!=(i=m.outerRadius)?i:300,W=null!=(c=m.startAngle)?c:0,h=null!=(d=m.endAngle)?d:360,p=B-G,H=t/2,u=n/2,Y=A.getChannelScale("x"),K=null!=(Z=A.getChannelDomainArray("row"))?Z:["___SINGLE_ROW___"],R=n/K.length,r=null!=(e=A.getChannelDomainArray("color"))?e:["___SINGLE_COLOR___"],J=A.encodedPIXIProperty("opacity"),w=A.encodedPIXIProperty("strokeWidth"),S=A.encodedPIXIProperty("stroke"),F=C.graphics;if(Og(m)){const g=A.getGenomicChannel();if(!g||!g.field)return void console.warn("Genomic field is not provided in the specification");const C=b(o,(I=>I[g.field])),l=[...C.keys()];F.lineStyle(w,hg(S),J,1);const i={};r.forEach((g=>{const c=[],d=[];l.forEach(((l,Z,e)=>{var o,b;null==(b=null==(o=C.get(l))?void 0:o.filter((I=>Pg(I,m.color)===g)))||b.forEach((g=>{const C=Y(+l),o=a([A.encodedPIXIProperty("y",g),0]);if(X){if(0===Z){const g=Hg(C,t,B-R/n*p,H,u,W,h);c.push([g.x,g.y]),d.push([g.x,g.y])}void 0===i[l]&&(i[l]=0);const g=B-(R-o-i[l])/n*p,I=Hg(C,t,g,H,u,W,h);c.push([I.x,I.y]);const A=B-(R-i[l])/n*p,m=Hg(C,t,A,H,u,W,h);if(d.push([m.x,m.y]),Z===e.length-1){const g=Hg(C,t,B-R/n*p,H,u,W,h);c.push([g.x,g.y]),d.push([g.x,g.y])}}else if(0===Z&&(c.push([C,R]),d.push([C,R])),void 0===i[l]&&(i[l]=0),c.push([C,R-o-i[l]]),d.push([C,R-i[l]]),Z===e.length-1&&(c.push([C,R]),d.push([C,R])),m.tooltip){const A=R-o-i[l],c=R-i[l];I.tooltips.push({datum:g,isMouseOver:(g,I)=>C-1<g&&g<C+1&&A-1<I&&I<c+1,markInfo:{x:C,y:A,width:1,height:o,type:"area"}})}i[l]+=o}))}));const Z=A.encodedValue("color",g);F.beginFill(hg(Z),J),F.drawPolygon([...c.reduce(((g,I)=>g.concat(I))),...d.reverse().reduce(((g,I)=>g.concat(I)))]),F.endFill()}))}else K.forEach((g=>{const C=A.encodedValue("row",g);F.lineStyle(w,hg(S),J,0),r.forEach((l=>{const i=[],c=[],d=B-(C+R)/n*p;o.filter((I=>!(void 0!==Pg(I,m.row)&&Pg(I,m.row)!==g||void 0!==Pg(I,m.color)&&Pg(I,m.color)!==l))).sort(((g,I)=>A.encodedPIXIProperty("x",g)-A.encodedPIXIProperty("x",I))).forEach(((g,l,Z)=>{const e=s([a([A.encodedPIXIProperty("y",g),0]),R]),o=A.encodedPIXIProperty("x",g);if(X){const g=Hg(o,t,d,H,u,W,h);i.push([g.x,g.y]),0===l&&c.push(g.x,g.y);const I=Hg(o,t,B-(C+R-e)/n*p,H,u,W,h);if(c.push(I.x,I.y),l===Z.length-1){const g=Hg(o,t,B-(C+R)/n*p,H,u,W,h);c.push(g.x,g.y)}}else{if(0===l&&c.push(o,C+R),c.push(o,C+R-e),l===Z.length-1){const g=Y(y);c.push(o,C+R),c.push(g,C+R)}m.tooltip&&I.tooltips.push({datum:g,isMouseOver:(g,I)=>o-1<g&&g<o+1&&C-1<I&&I<C+R+1,markInfo:{x:o,y:e,width:1,height:e,type:"area"}})}})),X&&0!==i.length&&c.push(...i.reverse().reduce(((g,I)=>g.concat(I))));const Z=A.encodedValue("color",l);F.beginFill(hg(Z),J),F.drawPolygon(c),F.endFill()}))}))}(0,I,C,A);break;case"rect":!function(g,I,C,A){var l,i,c,d,Z,e;const m=A.spec(),o=A.data(),[b,a]=I.dimensions,s=I.tilesetInfo.tile_size,{tileX:t,tileWidth:n}=I.getTilePosAndDimensions(C.gos.zoomLevel,C.gos.tilePos,s),V="circular"===m.layout,y=null!=(l=m.innerRadius)?l:220,X=null!=(i=m.outerRadius)?i:300,G=null!=(c=m.startAngle)?c:0,B=null!=(d=m.endAngle)?d:360,W=X-y,h=b/2,p=a/2,H=I._xScale,u=H(t+n/s)-H(t),Y=null!=(Z=A.getChannelDomainArray("row"))?Z:["___SINGLE_ROW___"],K=a/Y.length,R=Dg(m.row)&&m.row.padding?m.row.padding:0,r=null!=(e=A.getChannelDomainArray("y"))?e:["___SINGLE_Y_POSITION___"],J=K/r.length-2*R,w=C.graphics;o.forEach((g=>{var C;const l=A.encodedPIXIProperty("row",g)+R,i=A.encodedPIXIProperty("x",g),c=A.encodedPIXIProperty("color",g),d=A.encodedPIXIProperty("stroke",g),Z=A.encodedPIXIProperty("strokeWidth",g),e=A.encodedPIXIProperty("opacity",g),o=A.encodedPIXIProperty("width",g,{markWidth:u}),s=A.encodedPIXIProperty("height",g,{markHeight:J}),t=A.encodedPIXIProperty("y",g),n=A.markVisibility(g,{width:o,zoomLevel:I._xScale.invert(b)-I._xScale.invert(0)}),y=Math.min(n,e);if(0===y||0===s||o<=1e-4)return;const H=i,Y=i+o,r=null!=(C=A.visualPropertyByChannel("size",g))?C:void 0;if(w.lineStyle(Z,hg(d),y,.5),V){if(Y<0||b<H)return;let g=X-(l+K-t-s/2)/a*W,I=X-(l+K-t+s/2)/a*W;if(r){const C=X-(l+t)/a*W;g=C-r/2,I=C+r/2}const C=Hg(H,b,I,h,p,G,B),A=pg(H,b,G,B),i=pg(Y,b,G,B);w.beginFill(hg("none"===c?"white":c),"none"===c?0:y),w.moveTo(C.x,C.y),w.arc(h,p,I,A,i,!0),w.arc(h,p,g,i,A,!1),w.closePath()}else w.beginFill(hg("none"===c?"white":c),"none"===c?0:y),w.drawRect(H,l+K-t-s/2,Y-H,s),m.tooltip&&I.tooltips.push({datum:g,isMouseOver:(g,I)=>H-1<g&&g<Y+1&&l+K-t-s/2-1<I&&I<l+K-t+s/2+1,markInfo:{x:H,y:l+K-t-s/2,width:Y-H,height:s,type:"rect"}})}))}(0,I,C,A);break;case"triangleLeft":case"triangleRight":case"triangleBottom":!function(g,I,C,A){var l,i,c,d,Z,e,m;const o=I.spec();if(!o.width||!o.height)return void console.warn("Size of a track is not properly determined, so visual mark cannot be rendered");const b=I.data(),a=I.getChannelScale("x").invert(C)-I.getChannelScale("x").invert(0),s="circular"===o.layout,t=null!=(l=o.innerRadius)?l:220,n=null!=(i=o.outerRadius)?i:300,V=null!=(c=o.startAngle)?c:0,y=null!=(d=o.endAngle)?d:360,X=n-t,G=C/2,B=A/2,W=null!=(Z=I.getChannelDomainArray("row"))?Z:["___SINGLE_ROW___"],h=A/W.length,p=null!=(e=I.getChannelDomainArray("y"))?e:["___SINGLE_Y___"],H=null!=(m=I.encodedValue("size"))?m:s?X/W.length/p.length:h/p.length;W.forEach((l=>{const i=I.encodedValue("row",l);b.filter((g=>!Pg(g,o.row)||Pg(g,o.row)===l)).forEach((l=>{var c,d,Z;const e=I.encodedPIXIProperty("x",l),m=I.encodedPIXIProperty("xe",l),b=null!=(c=I.encodedPIXIProperty("size",l))?c:void 0===m?H:m-e,t=I.encodedPIXIProperty("y",l),W=I.encodedPIXIProperty("strokeWidth",l),p=I.encodedPIXIProperty("stroke",l),u=I.encodedPIXIProperty("color",l),Y=I.encodedPIXIProperty("opacity",l);if(s){let c=e||m-b,Z=m||e+b,s=(c+Z)/2;const K=n-(i+h-t)/A*X,R=K-H/2,r=K+H/2;"right"!==(null==(d=o.style)?void 0:d.align)||m||(c-=b,Z-=b,s-=b);let J=[];if("triangleLeft"===o.mark){const g=Hg(Z,C,R,G,B,V,y),I=Hg(c,C,K,G,B,V,y),A=Hg(Z,C,r,G,B,V,y),l=Hg(Z,C,R,G,B,V,y);J=[g.x,g.y,I.x,I.y,A.x,A.y,l.x,l.y]}else if("triangleRight"===o.mark){const g=Hg(c,C,R,G,B,V,y),I=Hg(Z,C,K,G,B,V,y),A=Hg(c,C,r,G,B,V,y),l=Hg(c,C,R,G,B,V,y);J=[g.x,g.y,I.x,I.y,A.x,A.y,l.x,l.y]}else if("triangleBottom"===o.mark){c=s-b/2,Z=s+b/2;const g=Hg(c,C,r,G,B,V,y),I=Hg(Z,C,r,G,B,V,y),A=Hg(s,C,R,G,B,V,y),l=Hg(c,C,r,G,B,V,y);J=[g.x,g.y,I.x,I.y,A.x,A.y,l.x,l.y]}const w=I.markVisibility(l,{width:Z-c,zoomLevel:a}),S=Math.min(w,Y);g.lineStyle(W,hg(p),Z-c>2?S:0,0),g.beginFill(hg(u),S),g.drawPolygon(J),g.endFill()}else{let C=e||m-b,A=m||e+b,c=C+(A-C)/2;const d=i+h-t,s=i+h-t-H/2,n=i+h-t+H/2;"right"!==(null==(Z=o.style)?void 0:Z.align)||m||(C-=b,A-=b,c-=b);const V={triangleLeft:[A,s,C,d,A,n,A,s],triangleRight:[C,s,A,d,C,n,C,s],triangleBottom:[C,s,A,s,c,n,C,s]}[o.mark],y=I.markVisibility(l,{width:A-C,zoomLevel:a}),X=Math.min(y,Y);g.lineStyle(W,hg(p),A-C>2?X:0,.5),g.beginFill(hg(u),X),g.drawPolygon(V),g.endFill()}}))}))}(C.graphics,A,l,i);break;case"text":!function(g,I,C,A){var l,i,c,d,m,o,a,s,t;const n=A.spec(),V=A.data(),[y,X]=I.dimensions,G="circular"===n.layout,B=null!=(l=n.innerRadius)?l:220,W=null!=(i=n.outerRadius)?i:300,h=null!=(c=n.startAngle)?c:0,p=null!=(d=n.endAngle)?d:360,H=W-B,u=y/2,Y=X/2,K=null!=(m=A.getChannelDomainArray("row"))?m:["___SINGLE_ROW___"],R=X/K.length,r=null!=(a=null==(o=n.style)?void 0:o.dx)?a:0,J=null!=(t=null==(s=n.style)?void 0:s.dy)?t:0;if(Og(n)){if(G)return;const l=C.graphics,i=A.getGenomicChannel();if(!i||!i.field)return void console.warn("Genomic field is not provided in the specification");const c=b(V,(g=>g[i.field]));[...c.keys()].forEach((C=>{var i;let d=0;null==(i=c.get(C))||i.forEach((C=>{var i,c,m,o,b,a,s,t;const V=A.encodedPIXIProperty("text",C),X=A.encodedPIXIProperty("color",C),G=A.encodedPIXIProperty("x",C)+r,B=A.encodedPIXIProperty("xe",C)+r,W=A.encodedPIXIProperty("x-center",C)+r,h=A.encodedPIXIProperty("y",C)+J,p=A.encodedPIXIProperty("size",C),H=A.encodedPIXIProperty("stroke",C),u=A.encodedPIXIProperty("strokeWidth",C),Y=A.encodedPIXIProperty("opacity",C);if(W<0||W>y)return;if(I.textsBeingUsed>1e3)return;const K=e(Z({},Yg),{fontSize:null!=p?p:(null==(i=n.style)?void 0:i.textFontSize)?`${null==(c=n.style)?void 0:c.textFontSize}px`:Yg.fontSize,stroke:null!=(o=null!=H?H:null==(m=n.style)?void 0:m.textStroke)?o:Yg.stroke,strokeThickness:null!=(a=null!=u?u:null==(b=n.style)?void 0:b.textStrokeWidth)?a:Yg.strokeThickness,fontWeight:null!=(t=null==(s=n.style)?void 0:s.textFontWeight)?t:Yg.fontWeight}),w=new g.libraries.PIXI.TextStyle(K);let S;I.textGraphics.length>I.textsBeingUsed?(S=I.textGraphics[I.textsBeingUsed],S.style.fill=X,S.visible=!0,S.text=V,S.alpha=1):(S=new g.libraries.PIXI.Text(V,e(Z({},K),{fill:X})),I.textGraphics.push(S));const F=g.libraries.PIXI.TextMetrics.measureText(V,w);I.textsBeingUsed++;const k=A.markVisibility(C,e(Z({},F),{zoomLevel:I._xScale.invert(y)-I._xScale.invert(0)})),v=Math.min(k,Y);if(!V||0===v)return I.textsBeingUsed--,void(S.visible=!1);S.alpha=v,S.resolution=8,S.updateText(),S.texture.baseTexture.scaleMode=g.libraries.PIXI.SCALE_MODES.LINEAR;const N=new g.libraries.PIXI.Sprite(S.texture);N.x=G,N.y=R-h-d,N.width=B-G,N.height=h,l.addChild(N),d+=h}))}))}else K.forEach((l=>{const i=C.graphics,c=A.encodedValue("row",l);V.filter((g=>!Pg(g,n.row)||Pg(g,n.row)===l)).forEach((C=>{var l,d,m,o,b,a,s,t,V,B;const K=A.encodedPIXIProperty("text",C),w=A.encodedPIXIProperty("color",C),S=A.encodedPIXIProperty("x-center",C)+r,F=A.encodedPIXIProperty("y",C)+J,k=A.encodedPIXIProperty("size",C),v=A.encodedPIXIProperty("stroke",C),N=A.encodedPIXIProperty("strokeWidth",C),f=A.encodedPIXIProperty("opacity",C);if(S<0||S>y)return;if(I.textsBeingUsed>1e3)return;const z=e(Z({},Yg),{fontSize:null!=k?k:(null==(l=n.style)?void 0:l.textFontSize)?`${null==(d=n.style)?void 0:d.textFontSize}px`:Yg.fontSize,stroke:null!=(o=null!=v?v:null==(m=n.style)?void 0:m.textStroke)?o:Yg.stroke,strokeThickness:null!=(a=null!=N?N:null==(b=n.style)?void 0:b.textStrokeWidth)?a:Yg.strokeThickness,fontWeight:null!=(t=null==(s=n.style)?void 0:s.textFontWeight)?t:Yg.fontWeight}),x=new g.libraries.PIXI.TextStyle(z);let U;I.textGraphics.length>I.textsBeingUsed?(U=I.textGraphics[I.textsBeingUsed],U.style.fill=w,U.visible=!0,U.text=K,U.alpha=1):(U=new g.libraries.PIXI.Text(K,e(Z({},z),{fill:w})),I.textGraphics.push(U));const M=g.libraries.PIXI.TextMetrics.measureText(K,x);I.textsBeingUsed++;const L=A.markVisibility(C,e(Z({},M),{zoomLevel:I._xScale.invert(y)-I._xScale.invert(0)})),T=Math.min(L,f);if(!K||0===T)return I.textsBeingUsed--,void(U.visible=!1);if(U.alpha=T,U.anchor.x=(null==(V=n.style)?void 0:V.textAnchor)&&"middle"!==(null==(B=n.style)?void 0:B.textAnchor)?"start"===n.style.textAnchor?0:1:.5,U.anchor.y=.5,G){const I=W-(c+R-F)/X*H,C=Hg(S,y,I,u,Y,h,p);U.x=C.x,U.y=C.y,U.resolution=4;const A=new g.libraries.PIXI.TextStyle(x),l=g.libraries.PIXI.TextMetrics.measureText(U.text,A).width/(2*I*Math.PI)*y;let[d,Z]=[S-l/2,S+l/2];if(d<0){const g=-d;d=0,Z+=g}else if(Z>y){const g=Z-y;Z=y,d-=g}const e=[];for(let i=Z;i>=d;i-=l/10){const C=Hg(i,y,I,u,Y,h,p);e.push(new g.libraries.PIXI.Point(C.x,C.y))}U.updateText();const m=new g.libraries.PIXI.SimpleRope(U.texture,e);m.alpha=T,i.addChild(m)}else U.position.x=S,U.position.y=c+R-F,i.addChild(U)}))}))}(g,I,C,A);break;case"rule":!function(g,I,C,A){var l,i,c,d,Z,e,m,o;const b=A.spec(),a=A.data(),[s,t]=I.dimensions,n="circular"===b.layout,V=null!=(l=b.innerRadius)?l:220,y=null!=(i=b.outerRadius)?i:300,X=null!=(c=b.startAngle)?c:0,G=null!=(d=b.endAngle)?d:360,B=y-V,W=s/2,h=t/2,p=null!=(Z=A.getChannelDomainArray("row"))?Z:["___SINGLE_ROW___"],H=t/p.length,u=null==(e=b.style)?void 0:e.dashed,Y=null==(m=b.style)?void 0:m.linePattern,K=null==(o=b.style)?void 0:o.curve,R=C.graphics;p.forEach((g=>{const C=A.encodedValue("row",g);a.filter((I=>!Pg(I,b.row)||Pg(I,b.row)===g)).forEach((g=>{const l=A.encodedPIXIProperty("x",g),i=A.encodedPIXIProperty("xe",g),c=A.encodedPIXIProperty("y",g),d=A.encodedPIXIProperty("color",g),Z=A.encodedPIXIProperty("strokeWidth",g),e=A.encodedPIXIProperty("opacity",g),m=A.markVisibility(g,{width:i-l,zoomLevel:I._xScale.invert(s)-I._xScale.invert(0)}),o=Math.min(m,e);if(R.lineStyle(Z,hg(d),o,.5),n){if(0===Z)return;R.lineStyle(Z,hg(d),0,.5);const g=y-(C+c)/t*B,I=g+Z/2,A=g-Z/2,e=Hg(l,s,A,W,h,X,G),m=pg(l,s,X,G),b=pg(i,s,X,G);R.beginFill(hg(d),o),R.moveTo(e.x,e.y),R.arc(W,h,A,m,b,!0),R.arc(W,h,I,b,m,!1),R.closePath()}else if(u){const[g,I]=u;let A=l;do{R.moveTo(A,C+H-c),R.lineTo(A+g,C+H-c),A+=g+I}while(A<i)}else if(void 0===K)R.moveTo(l,C+H-c),R.lineTo(i,C+H-c);else if("top"===K){const g=2,I=l+(i-l)/2;R.moveTo(l,C+H-c+g/2),R.lineTo(I,C+H-c-g/2),R.moveTo(I,C+H-c-g/2),R.lineTo(i,C+H-c+g/2)}if(Y&&void 0===K&&!n){const{type:g,size:I}=Y;let A=Math.max(l,0);R.lineStyle(0);const Z=2*I;let e=0;for(;A<Math.min(i,s)&&e<100;){const l=A,i=A+I,m=C+H-c,b=m-I/2,a=m+I/2;R.beginFill(hg(d),o),R.drawPolygon("triangleLeft"===g?[i,b,l,m,i,a,i,b]:[l,b,i,m,l,a,l,b]),R.endFill(),A+=I+Z,e++}}}))}))}(0,I,C,A);break;case"betweenLink":case"withinLink":!function(g,I,C){var A,l,i,c,d;const Z=C.spec();if(!Z.width||!Z.height)return void console.warn("Size of a track is not properly determined, so visual mark cannot be rendered");const e=C.data(),[m,o]=I.dimensions,b="circular"===Z.layout,a=null!=(A=Z.innerRadius)?A:220,s=null!=(l=Z.outerRadius)?l:300,n=null!=(i=Z.startAngle)?i:0,V=null!=(c=Z.endAngle)?c:360,y=s-a,X=m/2,G=o/2,B=null!=(d=C.getChannelDomainArray("row"))?d:["___SINGLE_ROW___"],W=o/B.length;B.forEach((A=>{const l=C.encodedValue("row",A);e.filter((g=>!Pg(g,Z.row)||Pg(g,Z.row)===A)).forEach((A=>{var i,c,d,e,a;let B=C.encodedPIXIProperty("x",A),h=C.encodedPIXIProperty("xe",A);const p=C.encodedPIXIProperty("x1",A),H=C.encodedPIXIProperty("x1e",A),u=C.encodedPIXIProperty("y",A),Y=C.encodedPIXIProperty("stroke",A),K=C.encodedPIXIProperty("strokeWidth",A),R=C.encodedPIXIProperty("color",A),r=C.encodedPIXIProperty("opacity",A),J=void 0!==h&&void 0!==H&&Math.abs(B-h)>.1&&Math.abs(p-H)>.1;if(!J&&void 0===h&&!Mg(Z)){if(void 0===p&&void 0===H)return;h=void 0!==p?p:H}!J&&Math.abs(B-h)<=.1&&Math.abs(p-H)<=.1&&(B=(B+h)/2,h=(p+H)/2),g.lineStyle(K,hg(Y),r,.5);const w=Dg(Z.y)&&Z.y.flip||Z.flipY,S=l+(w?0:W);if(J){g.beginFill(hg("none"===R?"white":R),"none"===R?0:r);let[I,C,A,c]=[B,h,p,H];if("betweenLink"===Z.mark?([I,C]=[I,C].sort(((g,I)=>g-I)),[A,c]=[A,c].sort(((g,I)=>g-I))):[I,C,A,c]=[I,C,A,c].sort(((g,I)=>g-I)),I>m||c<0||Math.abs(c-I)<.5)return;if(b){if(I<0||c>m)return;const i=s-l/o*y,d=Hg(I,m,i,X,G,n,V),Z=Hg(C,m,i,X,G,n,V),e=Hg(A,m,i,X,G,n,V),b=Hg(c,m,i,X,G,n,V);g.moveTo(d.x,d.y),g.bezierCurveTo(X,G,X,G,b.x,b.y),g.arc(X,G,s,ug(b.x,b.y,X,G),ug(e.x,e.y,X,G),!1),g.bezierCurveTo(X,G,X,G,Z.x,Z.y),g.arc(X,G,s,ug(Z.x,Z.y,X,G),ug(d.x,d.y,X,G),!1),g.endFill()}else{if("betweenLink"===Z.mark)return g.moveTo(I,l),g.lineTo(C,l),g.lineTo(c,l+W),g.lineTo(A,l+W),g.lineTo(I,l),void g.closePath();g.moveTo(I,S),null==(i=Z.style)||i.bazierLink,g.arc((I+c)/2,S,(c-I)/2,-Math.PI,Math.PI,!1),g.arc((C+A)/2,S,(A-C)/2,Math.PI,-Math.PI,!0),g.closePath()}}else{if(Mg(Z)&&"betweenLink"===Z.mark)return void("curve"===(null==(c=Z.style)?void 0:c.linkConnectionType)?(g.moveTo(B,0),g.bezierCurveTo(B/5*4,(l+W-u)/2,B/2,(l+W-u)/5*4,0,l+W-u)):"straight"===(null==(d=Z.style)?void 0:d.linkConnectionType)?(g.moveTo(B,0),g.lineTo(0,l+W-u)):(g.moveTo(B,0),g.lineTo(B,l+W-u),g.lineTo(0,l+W-u)));if("betweenLink"===Z.mark&&b){let I,C;for(let A=0;A<=1;A+=.02){const l=g=>Math.log(g/(1-g)),i=g=>s-1/(1+Math.exp(l(g)))*y+3,c=(g,I,C)=>((C-I)*g+I)/m,d=X+i(A)*Math.cos(2*-c(A,B,h)*Math.PI-Math.PI/2),Z=G+i(A)*Math.sin(2*-c(A,B,h)*Math.PI-Math.PI/2);I&&C&&(g.lineStyle(K,hg(Y),r,.5),g.moveTo(I,C),g.lineTo(d,Z)),I=d,C=Z}return}if("betweenLink"===Z.mark)return g.moveTo(h,l+W),void g.lineTo(B,l);if(h-B<=.1)return;const C=(B+h)/2;if(g.beginFill(hg("white"),0),b){if(B<0||h>m)return;const I=s-l/o*y,C=Hg(B,m,I,X,G,n,V),A=Hg(h,m,I,X,G,n,V);g.moveTo(C.x,C.y),g.bezierCurveTo(C.x,C.y,m/2,o/2,A.x,A.y)}else if(g.moveTo(B,S),null==(e=Z.style)?void 0:e.bazierLink){const C=B,l=S,i=B+(h-B)/3,c=S+Math.min(W,(h-B)/2)*(w?1:-1),d=B+(h-B)/3*2,e=S+Math.min(W,(h-B)/2)*(w?1:-1),m=h,o=S;g.bezierCurveTo(i,c,d,e,m,o);const b=new t(C,l,i,c,d,e,m,o).getLUT(1e3);Z.tooltip&&I.tooltips.push({datum:A,isMouseOver:(g,I)=>-1!==b.findIndex((C=>Math.sqrt((C.x-g)**2+(C.y-I)**2)<5)),markInfo:{}})}else if(null==(a=Z.style)?void 0:a.flatWithinLink){const I=h-B,C=Math.min(10,I/2),A=l+W-u;w?(g.moveTo(B,S),g.lineTo(B,A-C),g.arc(B+C,A-C,C,-Math.PI,Math.PI/2,!0),g.lineTo(h-C,A),g.arc(h-C,A-C,C,Math.PI/2,0,!0),g.lineTo(h,S)):(g.moveTo(B,S),g.lineTo(B,A+C),g.arc(B+C,A+C,C,-Math.PI,-Math.PI/2),g.lineTo(h-C,A),g.arc(h-C,A+C,C,-Math.PI/2,0),g.lineTo(h,S))}else{if(h<0||B>m)return;g.arc(C,S,(h-B)/2,-Math.PI,Math.PI),g.closePath()}}}))}))}(C.graphics,I,A);break;default:console.warn("Unsupported mark type")}}function Fg(g,I,C,A,l){if(!g||!I||!C)return;if("brush"===A.spec().mark)return;I.pBackground.clear(),I.pBackground.removeChildren(),I.pBorder.clear(),I.pBorder.removeChildren();const i="circular"===A.spec().layout;["x","x1","x1e","xe"].forEach((g=>{A.setChannelScale(g,I._xScale)})),i?function(g,I,C,A,l){var i,c,d,Z,e,m,o,b,a,s,t,n;const V=A.spec(),[y,X]=I.position,[G,B]=I.dimensions,W=null!=(i=V.innerRadius)?i:220,h=null!=(c=V.outerRadius)?c:300,p=null!=(d=V.startAngle)?d:0,H=null!=(Z=V.endAngle)?Z:360,u=y+G/2,Y=X+B/2,K=Hg(0,G,W,u,Y,p,H),R=pg(0,G,p,H),r=pg(G,G,p,H),J=I.pBackground;"circular"===V.layout&&"withinLink"===V.mark||(J.lineStyle((null==(e=V.style)?void 0:e.outlineWidth)?(null==(m=V.style)?void 0:m.outlineWidth)/2.5:0,hg(null!=(b=null==(o=V.style)?void 0:o.outline)?b:"#DBDBDB"),1,1),J.beginFill(hg(null!=(s=null==(a=A.spec().style)?void 0:a.background)?s:l.track.background),null!=(n=null==(t=A.spec().style)?void 0:t.backgroundOpacity)?n:l.track.background&&"transparent"!==l.track.background?1:0),J.moveTo(K.x,K.y),J.arc(u,Y,W,R,r,!0),J.arc(u,Y,h,r,R,!1),J.closePath()),Dg(V.x)&&"top"===V.x.axis&&(J.lineStyle(.5,hg("black"),0,.5),J.beginFill(hg("white"),0),J.moveTo(K.x,K.y),J.arc(u,Y,h-.5,R,r,!0),J.arc(u,Y,h,r,R,!1),J.closePath()),J.lineStyle(.5,hg("black"),0,.5),J.beginFill(hg("white"),0),J.moveTo(u,Y),J.arc(u,Y,h+3,R,r,!1),J.closePath(),J.lineStyle(1,hg("#DBDBDB"),0,0),J.beginFill(hg("white"),0),J.drawCircle(u,Y,W-1)}(0,I,0,A,l):(function(g,I,C,A,l){var i,c,d,Z,e,m;const[o,b]=I.position,[a,s]=I.dimensions,t=I.pBackground;if((null==(i=A.spec().style)?void 0:i.background)||l.track.background&&"transparent"!==l.track.background){t.clear();const g=null!=(d=null==(c=A.spec().style)?void 0:c.background)?d:l.track.background,I=V(null==(Z=A.spec().style)?void 0:Z.backgroundOpacity)?1:null==(e=A.spec().style)?void 0:e.backgroundOpacity;t.lineStyle(1,hg("white"),0,0),t.beginFill(hg(g),I),t.drawRect(o,b,a,s)}if(l.track.alternatingBackground&&"transparent"!==l.track.alternatingBackground){const g=A.spec();if(!Dg(g.row)||"nominal"!==g.row.type)return;const C=null!=(m=A.getChannelDomainArray("row"))?m:["___SINGLE_ROW___"];if(0===C.length)return;C.forEach(((g,i)=>{var c,d,Z,e;if(i%2==0)return;const m=A.encodedValue("row",g),o=null!=(d=null==(c=A.spec().style)?void 0:c.background)?d:l.track.alternatingBackground,b=V(null==(Z=A.spec().style)?void 0:Z.backgroundOpacity)?1:null==(e=A.spec().style)?void 0:e.backgroundOpacity;t.lineStyle(1,hg("white"),0,0),t.beginFill(hg(o),b),t.drawRect(I.position[0],I.position[1]+m,a,s/C.length)}))}}(0,I,0,A,l),function(g,I,C,A){var l,i,c,d;const Z=I.pBorder,[e,m]=I.position,[o,b]=I.dimensions;Z.lineStyle(null!=(i=null==(l=C.spec().style)?void 0:l.outlineWidth)?i:1,hg(null!=(d=null==(c=C.spec().style)?void 0:c.outline)?d:A.track.outline),1,.5),Z.beginFill(hg("white"),0),Z.drawRect(e,m,o,b);const a=C.spec().x;Z.lineStyle(1,hg(A.axis.baselineColor),1,.5),Dg(a)&&"top"===a.axis?(Z.moveTo(e,m),Z.lineTo(e+o,m)):Dg(a)&&"bottom"===a.axis&&(Z.moveTo(e,m+b),Z.lineTo(e+o,m+b))}(0,I,A,l)),Kg(I,A,l)}function kg(g,I,C,A,l){if(!g||!I||!C)return;if("brush"===A.spec().mark)return;const i="circular"===A.spec().layout;["x","x1","x1e","xe"].forEach((g=>{A.setChannelScale(g,I._xScale)})),i?(function(g,I,C,A,l){var i,c,d,Z,e;const m=A.spec(),o="circular"===m.layout,b=A.getChannelDomainArray("y"),a=A.getChannelRangeArray("y");if(!o)return;if(!A.isShowYAxis()||!b||!a)return;const[s,t]=[m.width,m.height],V=null!=(i=m.innerRadius)?i:220,y=null!=(c=m.outerRadius)?c:300,X=y-V,G=null!=(d=m.startAngle)?d:0,B=null!=(Z=m.endAngle)?Z:360,W=s/2,h=t/2,p=null!=(e=A.getChannelDomainArray("row"))?e:["___SINGLE_ROW___"],H=t/p.length;if(H/t*X<=20)return;const u=A.spec().y,Y=!Dg(u)||!("axis"in u)||"right"!==u.axis,K=n().domain(b).range(a),R=C.graphics;p.forEach((I=>{const C=A.encodedValue("row",I),i=y-C/t*X,c=Hg(Y?0:s,s,y-(C+H)/t*X,W,h,G,B),d=Hg(Y?0:s,s,i,W,h,G,B);R.lineStyle(1,hg(l.axis.baselineColor),1,.5),R.moveTo(c.x,c.y),R.lineTo(d.x,d.y);const Z=g=>6*s/2/Math.PI/g,e=g=>8*s/2/Math.PI/g,m=H/t*X,o=Math.max(Math.ceil(m/40),1);let a=K.ticks(o).filter((g=>b[0]<=g&&g<=b[1]));1===a.length&&(a=K.ticks(o+1).filter((g=>b[0]<=g&&g<=b[1]))),R.lineStyle(1,hg(l.axis.tickColor),1,.5),a.forEach((g=>{const I=K(g),A=y-(C+H-I)/t*X,l=Y?0:s-Z(A),i=Y?Z(A):s,c=Hg(l,s,A,W,h,G,B),d=pg(l,s,G,B),e=pg(i,s,G,B);R.moveTo(c.x,c.y),R.arc(W,h,A,d,e,!0),R.arc(W,h,A,e,d,!1),R.closePath()}));{const g=Y?0:s-e(V),I=Y?e(V):s,C=pg(g,s,G,B),A=pg(I,s,G,B);R.moveTo(c.x,c.y),R.arc(W,h,V,C,A,!0),R.arc(W,h,V,A,C,!1),R.closePath()}{const g=Y?0:s-e(y),I=Y?e(y):s,C=pg(g,s,G,B),A=pg(I,s,G,B);R.moveTo(d.x,d.y),R.arc(W,h,y,C,A,!0),R.arc(W,h,y,A,C,!1),R.closePath()}a.forEach((I=>{const A=K(I),i=y-(C+H-A)/t*X,c=Hg(2*Z(i),s,i,W,h,G,B),d=rg({color:l.axis.labelColor,size:l.axis.labelFontSize,fontFamily:l.axis.labelFontFamily,fontWeight:l.axis.labelFontWeight}),e=new g.libraries.PIXI.Text(I,d);e.anchor.x=Y?1:0,e.anchor.y=.5,e.position.x=c.x,e.position.y=c.y,e.resolution=4;const m=new g.libraries.PIXI.TextStyle(d),o=g.libraries.PIXI.TextMetrics.measureText(e.text,m).width/(2*i*Math.PI)*s*360/(B-G),b=Y?2*Z(i):s-2*Z(i)-o,a=[];for(let C=Y?2*Z(i)+o:s-2*Z(i);C>=b;C-=o/10){const I=Hg(C,s,i,W,h,G,B);a.push(new g.libraries.PIXI.Point(I.x,I.y))}e.updateText();const n=new g.libraries.PIXI.SimpleRope(e.texture,a);R.addChild(n)}))}))}(g,0,C,A,l),function(g,I,C,A,l){var i,c,d;const Z=A.spec(),{title:e}=Z;if("circular"!==Z.layout)return;if(!e)return;const[m,o]=I.dimensions,b=null!=(i=Z.outerRadius)?i:300,a=null!=(c=Z.startAngle)?c:0,s=null!=(d=Z.endAngle)?d:360,t=m/2,n=o/2,V=C.graphics,y=b-1,X=Hg(1,m,y,t,n,a,s),G=rg({color:l.track.titleColor,size:12,fontFamily:l.axis.labelFontFamily,fontWeight:l.axis.labelFontWeight}),B=new g.libraries.PIXI.Text(e,G);B.anchor.x=1,B.anchor.y=.5,B.position.x=X.x,B.position.y=X.y,B.resolution=4;const W=new g.libraries.PIXI.TextStyle(G),h=g.libraries.PIXI.TextMetrics.measureText(B.text,W),p=h.width/(2*y*Math.PI)*m*360/(s-a),H=1+p,u=[];for(let r=H;r>=1;r-=p/10){const I=Hg(r,m,y-h.height/2,t,n,a,s);u.push(new g.libraries.PIXI.Point(I.x,I.y))}const Y=pg(1,m,a,s),K=pg(H+1,m,a,s);V.lineStyle(1,hg("red"),0,.5),V.beginFill(hg(l.track.titleBackground),.5),V.moveTo(X.x,X.y),V.arc(t,n,y-h.height,Y,K,!0),V.arc(t,n,y,K,Y,!1),V.closePath(),B.updateText();const R=new g.libraries.PIXI.SimpleRope(B.texture,u);V.addChild(R)}(g,I,C,A,l)):(function(g,I,C,A,l){var i;const c="circular"===A.spec().layout,d=A.getChannelDomainArray("y"),Z=A.getChannelRangeArray("y");if(c)return;if(!A.isShowYAxis()||!d||!Z)return;const[e,m]=I.dimensions,[o,b]=I.position,a=null!=(i=A.getChannelDomainArray("row"))?i:["___SINGLE_ROW___"],s=m/a.length;if(s<=20)return;const t=A.spec().y,V=!Dg(t)||!("axis"in t)||"right"!==t.axis,y=n().domain(d).range(Z),X=I.pBorder;a.forEach((I=>{const C=A.encodedValue("row",I),i=V?o:o+e,c=b+C;X.lineStyle(1,hg(l.axis.baselineColor),1,.5),X.moveTo(i,c),X.lineTo(i,c+s);const Z=Math.max(Math.ceil(s/40),1);let m=y.ticks(Z).filter((g=>d[0]<=g&&g<=d[1]));1===m.length&&(m=y.ticks(Z+1).filter((g=>d[0]<=g&&g<=d[1]))),X.lineStyle(1,hg(l.axis.tickColor),1,.5);let a=V?i+6:i-6;m.forEach((g=>{const I=y(g);X.moveTo(i,c+s-I),X.lineTo(a,c+s-I)})),a=V?i+8:i-8,X.moveTo(i,c),X.lineTo(a,c),X.moveTo(i,c+s),X.lineTo(a,c+s);const t=rg({color:l.axis.labelColor,size:l.axis.labelFontSize,fontFamily:l.axis.labelFontFamily,fontWeight:l.axis.labelFontWeight});m.forEach((I=>{const C=y(I);a=V?i+12:i-12;const A=new g.libraries.PIXI.Text(I,t);A.anchor.x=V?0:1,A.anchor.y=0===C?.9:.5,A.position.x=a,A.position.y=c+s-C,X.addChild(A)}))}))}(g,I,0,A,l),function(g,I,C,A,l){var i;const c=A.spec();if(!Dg(c.row)||"nominal"!==c.row.type||!c.row.legend)return;const d=null!=(i=A.getChannelDomainArray("row"))?i:["___SINGLE_ROW___"];if(0===d.length)return;const Z=I.pBorder,e=rg({color:l.legend.labelColor,size:l.legend.labelFontSize,fontWeight:l.legend.labelFontWeight,fontFamily:l.legend.labelFontFamily});d.forEach((C=>{const i=A.encodedValue("row",C),c=new g.libraries.PIXI.Text(C,e);c.anchor.x=0,c.anchor.y=0,c.position.x=I.position[0]+4,c.position.y=I.position[1]+i+2,Z.addChild(c);const d=new g.libraries.PIXI.TextStyle(e),m=g.libraries.PIXI.TextMetrics.measureText(C,d);Z.beginFill(hg(l.legend.background),l.legend.backgroundOpacity),Z.lineStyle(1,hg(l.legend.backgroundStroke),0,0),Z.drawRect(I.position[0]+1,I.position[1]+i+1,m.width+8,m.height+4)}))}(g,I,0,A,l)),Jg(g,I,0,A,l)}const vg={viridis:X,grey:G,warm:B,spectral:W,cividis:h,bupu:p,rdbu:H};function Ng(g){return!("alignment"in g)&&!g.tracks.find((g=>"overlay"===g.alignment||"tracks"in g))}function fg(g){return!Ug(g)&&"data"in g&&!("mark"in g)}function zg(g){return"object"==typeof g}function xg(g){return!("overlay"in g)}function Ug(g){return"overlay"in g}function Mg(g){return xg(g)&&Dg(g.x)&&"genomic"===g.x.type&&Dg(g.y)&&"genomic"===g.y.type}function Lg(g){return null!==g&&"object"==typeof g&&"value"in g}function Tg(g){return void 0!==g&&("vector"===g.type||"beddb"===g.type||"multivec"===g.type||"bigwig"===g.type||"matrix"===g.type||"bam"===g.type)}function Dg(g){return"object"==typeof g&&!("value"in g)}function Qg(g){return y(g)}function Og(g){return("bar"===g.mark||"area"===g.mark||"text"===g.mark)&&Dg(g.color)&&"nominal"===g.color.type&&(!g.row||Lg(g.row))&&Dg(g.y)&&"quantitative"===g.y.type&&!Dg(g.ye)}function Pg(g,I){if(Dg(I)&&I.field)return g[null==I?void 0:I.field]}function jg(g,I){const C=[];return wg.forEach((A=>{const l=g[A];Dg(l)&&l.type===I&&C.push(A)})),C}function Eg(g){if((xg(g)||Ug(g))&&Dg(g.x)&&g.x.axis&&"none"!==g.x.axis)return!0;if(Ug(g)){let I=!1;return g.overlay.forEach((g=>{I||Dg(g.x)&&g.x.axis&&"none"!==g.x.axis&&(I=!0)})),I}return!1}function qg(g){if(fg(g))return[];if(!Ug(g))return[g];if(0===g.overlay.length)return[e(Z({},g),{superpose:void 0})];const I=JSON.parse(JSON.stringify(g));delete I.overlay;const C=[];let A;g.overlay.forEach(((g,A)=>{const l=u(JSON.parse(JSON.stringify(I)),g);l.title&&0!==A&&delete l.title,C.push(l)})),C.forEach((g=>{Dg(g.x)&&g.x.axis&&!A&&(A=g.x.axis)}));return C.map((g=>e(Z({},g),{x:e(Z({},g.x),{axis:A})})))}function _g(g){if(0===g.length)return!1;const I=g.filter((g=>g));if(I.length!==g.length)return!1;const C=Object.keys(I[0]).sort();let A=!0;return C.forEach((g=>{1===Array.from(new Set(I.map((I=>JSON.stringify(I[g]))))).length||(A=!1)})),A}function $g(g,I){const C=g?JSON.parse(JSON.stringify(g)):{};return I?u(C,I):C}function gI(g,I){"tracks"in g?g.tracks.forEach(((g,C,A)=>{I(g,C,A),gI(g,I)})):"views"in g&&g.views.forEach((g=>gI(g,I)))}function II(g,I){"tracks"in g?g.tracks.forEach((g=>{I(g),II(g,I)})):"views"in g&&g.views.forEach((g=>{I(g),II(g,I)}))}function CI(g,I){"tracks"in g||(I(g),g.views.forEach((g=>{CI(g,I)})))}function AI(g){if(Ng(g)){const I=JSON.parse(JSON.stringify(g));return delete I.tracks,g.tracks.filter((g=>!g._invalidTrack)).map((g=>u(JSON.parse(JSON.stringify(I)),g)))}const I=[];var C;return Ng(C=g)||function(g){return"alignment"in g&&"overlay"===g.alignment}(C)?I.push(e(Z({},g),{overlay:[...g.tracks.filter((g=>!g._invalidTrack))],tracks:void 0,alignment:void 0})):g.tracks.filter((g=>!g._invalidTrack)).map((C=>{if("alignment"in C)I.push(e(Z({},C),{overlay:[...C.tracks],tracks:void 0,alignment:void 0}));else{const A=JSON.parse(JSON.stringify(g));delete A.tracks;const l=u(JSON.parse(JSON.stringify(A)),C);I.push(l)}})),JSON.parse(JSON.stringify(I))}function lI(g,I){if(I?(void 0===g.assembly&&(g.assembly=I.assembly),void 0===g.layout&&(g.layout=I.layout),void 0===g.orientation&&(g.orientation=I.orientation),void 0===g.static&&(g.static=void 0!==I.static&&I.static),void 0===g.zoomLimits&&(g.zoomLimits=I.zoomLimits),void 0===g.xDomain&&(g.xDomain=I.xDomain),void 0===g.linkingId&&(g.linkingId=I.linkingId),void 0===g.centerRadius&&(g.centerRadius=I.centerRadius),void 0!==g.spacing||"tracks"in g||(g.spacing=I.spacing),void 0===g.xOffset&&(g.xOffset=I.xOffset),void 0===g.yOffset&&(g.yOffset=I.yOffset),"views"in g&&"arrangement"in I&&void 0===g.arrangement&&(g.arrangement=I.arrangement),g.style=$g(I.style,g.style)):(void 0===g.assembly&&(g.assembly="hg38"),void 0===g.layout&&(g.layout="linear"),void 0===g.orientation&&(g.orientation="horizontal"),void 0===g.static&&(g.static=!1),void 0===g.zoomLimits&&(g.zoomLimits=[1,null]),void 0===g.centerRadius&&(g.centerRadius=.3),void 0===g.spacing&&(g.spacing=10),"views"in g&&void 0===g.arrangement&&(g.arrangement="vertical"),void 0===g.xOffset&&(g.xOffset=0),void 0===g.yOffset&&(g.yOffset=0)),"tracks"in g){let I=AI(g);I=function(g){return[].concat(...g.map((g=>{if(fg(g)||!Ug(g)||g.overlay.length<=1)return[g];if(0===g.overlay.filter((g=>g.data)).length)return[g];if(_g([g.data,...g.overlay.map((g=>g.data))]))return[g];const I=JSON.parse(JSON.stringify(g));delete I.overlay;const C=[],A=JSON.parse(JSON.stringify(I));return A.overlay=[],g.overlay.forEach((g=>{if(A.data||(A.data=g.data),!g.data||_g([A.data,g.data]))return void A.overlay.push(g);const l=u(JSON.parse(JSON.stringify(I)),g);C.push(l)})),(A.overlay.length>0?[A,...C]:C).map(((g,I,C)=>{const A=0!==I,l=xg(g)&&Dg(g.y)&&!g.y.axis&&A?e(Z({},g.y),{axis:1===I?"right":"none"}):xg(g)?g.y:void 0;return g.title&&I!==C.length-1&&1!==C.length&&delete g.title,e(Z({},g),{overlayOnPreviousTrack:A,y:l})}))})))}(I);const C=Y();I.forEach(((A,l,i)=>{var c,d,Z;if(A.width||(A.width=360),A.height||(A.height=180),"displacement"in A)if("pile"===(null==(c=A.displacement)?void 0:c.type)&&void 0===A.row&&Dg(A.x)&&A.x.field&&Dg(A.xe)&&A.xe.field){const g=Y(),I={type:"displace",newField:g,boundingBox:{startField:A.x.field,endField:A.xe.field,padding:A.displacement.padding},method:"pile"};A.dataTransform||(A.dataTransform=[]),A.dataTransform=[...A.dataTransform,I],A.row={field:g,type:"nominal"}}else null==(d=A.displacement)||d.type;if(A.layout&&(A.layout=void 0),A.zoomLimits&&(A.zoomLimits=void 0),A.assembly||(A.assembly=g.assembly),A.layout||(A.layout=g.layout),A.orientation||(A.orientation=g.orientation),void 0===A.static&&(A.static=void 0!==g.static&&g.static),A.zoomLimits||(A.zoomLimits=g.zoomLimits),A.style=$g(g.style,A.style),Ug(A)&&A.overlay.forEach((g=>{g.style=$g(A.style,g.style)})),"circular"!==A.layout&&!Mg(A)||"vertical"!==A.orientation||(A.orientation="horizontal"),Mg(A)&&(A.layout="linear"),(xg(A)||Ug(A))&&Dg(A.x)&&!A.x.domain?A.x.domain=g.xDomain:Ug(A)&&A.overlay.forEach((I=>{Dg(I.x)&&!I.x.domain&&(I.x.domain=g.xDomain)})),(xg(A)||Ug(A))&&Dg(A.x)&&!A.x.linkingId)A.x.linkingId=null!=(Z=g.linkingId)?Z:C;else if(Ug(A)){let I=!1;A.overlay.forEach((A=>{var l;I||Dg(A.x)&&!A.x.linkingId&&(A.x.linkingId=null!=(l=g.linkingId)?l:C,I=!0)}))}0===l&&(A.overlayOnPreviousTrack=!1),(0===l||0!==l&&1===I.slice(0,l).filter((g=>!g.overlayOnPreviousTrack)).length&&!0===A.overlayOnPreviousTrack)&&((xg(A)||Ug(A))&&Dg(A.x)&&!A.x.axis?"vertical"===A.orientation?A.x.axis="left":A.x.axis="top":Ug(A)&&A.overlay.forEach((g=>{Dg(g.x)&&!g.x.axis&&("vertical"===A.orientation?g.x.axis="left":g.x.axis="top")}))),(xg(A)||Ug(A))&&Dg(A.x)&&A.x.axis&&"none"!==A.x.axis?"vertical"===A.orientation?"top"===A.x.axis?A.x.axis="left":"bottom"===A.x.axis&&(A.x.axis="right"):"left"===A.x.axis?A.x.axis="top":"right"===A.x.axis&&(A.x.axis="bottom"):Ug(A)&&A.overlay.forEach((g=>{Dg(g.x)&&g.x.axis&&"none"!==g.x.axis&&("vertical"===A.orientation?"top"===g.x.axis?g.x.axis="left":"bottom"===g.x.axis&&(g.x.axis="right"):"left"===g.x.axis?g.x.axis="top":"right"===g.x.axis&&(g.x.axis="bottom"))})),0!==l&&(l===i.length-1&&i.slice(0,l+1).filter((g=>g.overlayOnPreviousTrack)).length<l||l!==i.length-1&&i.slice(l+1).filter((g=>g.overlayOnPreviousTrack)).length===i.length-l-1&&i.slice(0,l+1).filter((g=>g.overlayOnPreviousTrack)).length<l)&&(xg(A)&&"withinLink"===A.mark&&void 0===A.flipY?A.flipY=!0:Ug(A)&&("withinLink"===A.mark&&void 0===A.flipY&&(A.flipY=!0),A.overlay.forEach((g=>{"withinLink"===g.mark&&void 0===g.flipY&&(g.flipY=!0)})))),A.overlayOnPreviousTrack&&i[l-1]&&(A.width=i[l-1].width,A.height=i[l-1].height,A.layout=i[l-1].layout,A.assembly=i[l-1].assembly)})),g.tracks=I}else g.views.forEach((I=>{lI(I,g)}))}const iI=[{name:"gene",channels:[{name:"startPosition",type:"genomic",required:!0},{name:"endPosition",type:"genomic",required:!0},{name:"strandColor",type:"nominal",required:!0},{name:"strandRow",type:"nominal",required:!0},{name:"opacity",type:"value",required:!1},{name:"geneHeight",type:"value",required:!1},{name:"geneLabel",type:"nominal",required:!0},{name:"geneLabelColor",type:"nominal",required:!0},{name:"geneLabelFontSize",type:"value",required:!1},{name:"geneLabelStroke",type:"value",required:!1},{name:"geneLabelStrokeThickness",type:"value",required:!1},{name:"geneLabelOpacity",type:"value",required:!1},{name:"type",type:"nominal",required:!0}],mapping:[{dataTransform:[{type:"filter",base:"type",oneOf:["gene"]},{type:"filter",base:"strandColor",oneOf:["-"]}],mark:"triangleLeft",x:{base:"startPosition",type:"genomic"},size:{base:"geneHeight",value:12},row:{base:"strandRow",type:"nominal",domain:["+","-"]},color:{base:"strandColor",type:"nominal",domain:["+","-"],range:["blue","red"]},opacity:{base:"opacity",value:.4},style:{align:"right"}},{dataTransform:[{type:"filter",base:"type",oneOf:["gene"]},{type:"filter",base:"strandColor",oneOf:["+"]}],mark:"triangleRight",x:{base:"endPosition",type:"genomic"},size:{base:"geneHeight",value:12},row:{base:"strandRow",type:"nominal",domain:["+","-"]},color:{base:"strandColor",type:"nominal",domain:["+","-"],range:["blue","red"]},opacity:{base:"opacity",value:.4},style:{align:"left"}},{dataTransform:[{type:"filter",base:"type",oneOf:["exon"]}],mark:"rect",x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},size:{base:"geneHeight",value:12},row:{base:"strandRow",type:"nominal",domain:["+","-"]},color:{base:"strandColor",type:"nominal",domain:["+","-"],range:["blue","red"]},opacity:{base:"opacity",value:.4}},{dataTransform:[{type:"filter",base:"type",oneOf:["gene"]},{type:"filter",base:"strandColor",oneOf:["+"]}],mark:"rect",x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},row:{base:"strandRow",type:"nominal",domain:["+","-"]},color:{base:"strandColor",type:"nominal",domain:["+","-"],range:["blue","red"]},opacity:{base:"opacity",value:.4},size:{value:3}},{dataTransform:[{type:"filter",base:"type",oneOf:["gene"]},{type:"filter",base:"strandColor",oneOf:["-"]}],mark:"rect",x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},row:{base:"strandRow",type:"nominal",domain:["+","-"]},color:{base:"strandColor",type:"nominal",domain:["+","-"],range:["blue","red"]},opacity:{base:"opacity",value:.4},size:{value:3}},{dataTransform:[{type:"filter",base:"type",oneOf:["gene"]}],mark:"text",text:{base:"geneLabel",type:"nominal"},x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},row:{base:"strandRow",type:"nominal",domain:["+","-"]},color:{base:"geneLabelColor",type:"nominal",domain:["+","-"],range:["blue","red"]},opacity:{base:"opacity",value:1},size:{base:"geneLabelFontSize",value:18},stroke:{base:"geneLabelStroke",value:"white"},strokeWidth:{base:"geneLabelStrokeThickness",value:2},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}]}]},{name:"ideogram",channels:[{name:"startPosition",type:"genomic",required:!0},{name:"endPosition",type:"genomic",required:!0},{name:"chrHeight",type:"value",required:!1},{name:"name",type:"nominal",required:!0},{name:"stainBackgroundColor",type:"nominal",required:!0},{name:"stainLabelColor",type:"nominal",required:!0},{name:"stainStroke",type:"value",required:!1},{name:"stainStrokeWidth",type:"value",required:!1}],mapping:[{mark:"rect",dataTransform:[{type:"filter",base:"stainBackgroundColor",oneOf:["acen"],not:!0}],color:{base:"stainBackgroundColor",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar","acen"],range:["white","lightgray","gray","gray","black","#7B9CC8","#DC4542"]},size:{base:"chrHeight",value:18},x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},stroke:{base:"stainStroke",value:"gray"},strokeWidth:{base:"stainStrokeWidth",value:.3}},{mark:"triangleRight",dataTransform:[{type:"filter",base:"stainBackgroundColor",oneOf:["acen"]},{type:"filter",base:"name",include:"q"}],color:{base:"stainBackgroundColor",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar","acen"],range:["white","lightgray","gray","gray","black","#7B9CC8","#DC4542"]},size:{base:"chrHeight",value:18},x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},stroke:{base:"stainStroke",value:"gray"},strokeWidth:{base:"stainStrokeWidth",value:.3}},{mark:"triangleLeft",dataTransform:[{type:"filter",base:"stainBackgroundColor",oneOf:["acen"]},{type:"filter",base:"name",include:"p"}],color:{base:"stainBackgroundColor",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar","acen"],range:["white","lightgray","gray","gray","black","#7B9CC8","#DC4542"]},size:{base:"chrHeight",value:18},x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},stroke:{base:"stainStroke",value:"gray"},strokeWidth:{base:"stainStrokeWidth",value:.3}},{mark:"text",dataTransform:[{type:"filter",base:"stainLabelColor",oneOf:["acen"],not:!0}],color:{base:"stainLabelColor",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar"],range:["black","black","black","black","white","black"]},text:{base:"name",type:"nominal"},x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}]}]},{name:"sequence",channels:[{name:"startPosition",type:"genomic",required:!0},{name:"endPosition",type:"genomic",required:!0},{name:"barLength",type:"quantitative",required:!0},{name:"baseBackground",type:"nominal",required:!0},{name:"baseLabelColor",type:"nominal",required:!0},{name:"baseLabelFontSize",type:"value",required:!1}],mapping:[{mark:"bar",x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},y:{base:"barLength",type:"quantitative",axis:"none"},color:{base:"baseBackground",type:"nominal",domain:["A","T","G","C"]}},{dataTransform:[{type:"filter",base:"barLength",oneOf:[0],not:!0}],mark:"text",x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},color:{base:"baseLabelColor",type:"nominal",domain:["A","T","G","C"],range:["white"]},text:{base:"baseBackground",type:"nominal"},size:{base:"baseLabelFontSize",value:18},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:30,target:"mark"},{operation:"LT",measure:"zoomLevel",threshold:10,target:"track"}]}]}];const cI={chr1:248956422,chr2:242193529,chr3:198295559,chr4:190214555,chr5:181538259,chr6:170805979,chr7:159345973,chr8:145138636,chr9:138394717,chr10:133797422,chr11:135086622,chr12:133275309,chr13:114364328,chr14:107043718,chr15:101991189,chr16:90338345,chr17:83257441,chr18:80373285,chr19:58617616,chr20:64444167,chr21:46709983,chr22:50818468,chrX:156040895,chrY:57227415},dI={chr1:249250621,chr2:243199373,chr3:198022430,chr4:191154276,chr5:180915260,chr6:171115067,chr7:159138663,chr8:146364022,chr9:141213431,chr10:135534747,chr11:135006516,chr12:133851895,chr13:115169878,chr14:107349540,chr15:102531392,chr16:90354753,chr17:81195210,chr18:78077248,chr19:59128983,chr20:63025520,chr21:48129895,chr22:51304566,chrX:155270560,chrY:59373566,chrM:16571},ZI={chr1:247249719,chr2:242951149,chr3:199501827,chr4:191273063,chr5:180857866,chr6:170899992,chr7:158821424,chr8:146274826,chr9:140273252,chr10:135374737,chr11:134452384,chr12:132349534,chr13:114142980,chr14:106368585,chr15:100338915,chr16:88827254,chr17:78774742,chr18:76117153,chr19:63811651,chr20:62435964,chr21:46944323,chr22:49691432,chrX:154913754,chrY:57772954,chrM:16571},eI={chr1:245522847,chr2:243018229,chr3:199505740,chr4:191411218,chr5:180857866,chr6:170975699,chr7:158628139,chr8:146274826,chr9:138429268,chr10:135413628,chr11:134452384,chr12:132449811,chr13:114142980,chr14:106368585,chr15:100338915,chr16:88827254,chr17:78774742,chr18:76117153,chr19:63811651,chr20:62435964,chr21:46944323,chr22:49554710,chrX:154824264,chrY:57701691,chrM:16571},mI={chr1:246127941,chr2:243615958,chr3:199344050,chr4:191731959,chr5:181034922,chr6:170914576,chr7:158545518,chr8:146308819,chr9:136372045,chr10:135037215,chr11:134482954,chr12:132078379,chr13:113042980,chr14:105311216,chr15:100256656,chr16:90041932,chr17:81860266,chr18:76115139,chr19:63811651,chr20:63741868,chr21:46976097,chr22:49396972,chrX:153692391,chrY:50286555,chrM:16571},oI={chr1:195471971,chr2:182113224,chr3:160039680,chr4:156508116,chr5:151834684,chr6:149736546,chr7:145441459,chr8:129401213,chr9:124595110,chr10:130694993,chr11:122082543,chr12:120129022,chr13:120421639,chr14:124902244,chr15:104043685,chr16:98207768,chr17:94987271,chr18:90702639,chr19:61431566,chrX:171031299,chrY:91744698,chrM:16299},bI={chr1:197195432,chr2:181748087,chr3:159599783,chr4:155630120,chr5:152537259,chr6:149517037,chr7:152524553,chr8:131738871,chr9:124076172,chr10:129993255,chr11:121843856,chr12:121257530,chr13:120284312,chr14:125194864,chr15:103494974,chr16:98319150,chr17:95272651,chr18:90772031,chr19:61342430,chrX:166650296,chrY:15902555,chrM:16299};function aI(g,I){const C=Object.entries(sI(I).interval).find((I=>{const[,[C,A]]=I;return C<=g&&g<A}));if(!C)return`${g}`;const A=K(",")(g-C[1][0]);return`${C[0]}:${A}`}function sI(g){return g&&g in nI?nI[g]:nI.hg38}const tI=g=>`https://s3.amazonaws.com/gosling-lang.org/data/${g}.chrom.sizes`,nI=Object.freeze({hg38:{size:cI,interval:VI(cI),total:yI(cI),path:tI("hg38")},hg19:{size:dI,interval:VI(dI),total:yI(dI),path:tI("hg19")},hg18:{size:ZI,interval:VI(ZI),total:yI(ZI),path:tI("hg18")},hg17:{size:eI,interval:VI(eI),total:yI(eI),path:tI("hg17")},hg16:{size:mI,interval:VI(mI),total:yI(mI),path:tI("hg16")},mm10:{size:oI,interval:VI(oI),total:yI(oI),path:tI("mm10")},mm9:{size:bI,interval:VI(bI),total:yI(bI),path:tI("mm9")},unknown:{size:{chr:Number.MAX_VALUE},interval:{chr:[0,Number.MAX_VALUE]},total:Number.MAX_VALUE,path:tI("hg38")}});function VI(g){const I={};return Object.keys(g).reduce(((C,A)=>(I[A]=[C,C+g[A]],C+g[A])),0),I}function yI(g){return Object.values(g).reduce(((g,I)=>g+I),0)}function XI(g,...I){if(!new.target)throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');const{absToChr:C,colorToHex:A,pixiTextToSvg:l,showMousePosition:i,svgLine:c}=g.utils;class d extends g.tracks.PixiTrack{constructor(I){super(...I);const[C,l]=I,{dataConfig:c,animate:d,chromInfoPath:e,isShowGlobalMousePosition:m}=C;this.searchField=null,this.chromInfo=null,this.dataConfig=c,this.allTexts=[],this.pTicksCircular=new g.libraries.PIXI.Graphics,this.pTicks=new g.libraries.PIXI.Graphics,this.pMain.addChild(this.pTicks),this.pMain.addChild(this.pTicksCircular),this.gTicks={},this.tickTexts={},this.options=l,this.isShowGlobalMousePosition=m,this.textFontSize=12,this.textFontFamily="sans-serif",this.textFontWeight="normal",this.textFontColor="#808080",this.textStrokeColor="#ffffff",this.pixiTextConfig=rg({size:+this.options.fontSize||this.textFontSize,fontFamily:this.options.fontFamily||this.textFontFamily,fontWeight:this.options.fontWeight||this.textFontWeight,color:this.options.color||this.textFontColor,stroke:this.options.stroke||this.textStrokeColor,strokeThickness:2}),this.stroke=A(this.pixiTextConfig.stroke),this.tickWidth=200,this.tickHeight=6,this.tickTextSeparation=2,this.tickColor=this.options.tickColor?A(this.options.tickColor):7829367,this.animate=d,this.pubSubs=[],this.options.showMousePosition&&!this.hideMousePosition&&(this.hideMousePosition=i(this,this.is2d,this.isShowGlobalMousePosition()));let o=e;e||(o=`${c.server}/chrom-sizes/?id=${c.tilesetUid}`);const b=this.options.assembly,a={},s=Z({},sI(b).size),t=[];Object.keys(sI(b).size).forEach((g=>{a[g]={chr:g,pos:sI(b).size[g]}})),Object.keys(sI(b).interval).forEach((g=>{t.push({chr:g,pos:sI(b).interval[g][0]})})),this.chromInfo={chrPositions:a,chromLengths:s,cumPositions:t},this.rerender(this.options,!0),this.draw(),this.animate()}initBoundsTicks(){this.pTicks&&(this.pMain.removeChild(this.pTicks),this.pTicks=null),this.gBoundTicks||(this.gBoundTicks=new g.libraries.PIXI.Graphics,this.leftBoundTick=new g.libraries.PIXI.Text("",this.pixiTextConfig),this.rightBoundTick=new g.libraries.PIXI.Text("",this.pixiTextConfig),this.gBoundTicks.addChild(this.leftBoundTick),this.gBoundTicks.addChild(this.rightBoundTick),this.pMain.addChild(this.gBoundTicks)),this.texts=[]}initChromLabels(){this.chromInfo&&(this.gBoundTicks&&(this.pMain.removeChild(this.gBoundTicks),this.gBoundTicks=null),this.pTicks||(this.pTicks=new g.libraries.PIXI.Graphics,this.pMain.addChild(this.pTicks)),this.texts=[],this.pTicks.removeChildren(),this.chromInfo.cumPositions.forEach((I=>{const C=I.chr;this.gTicks[C]=new g.libraries.PIXI.Graphics,this.tickTexts[C]||(this.tickTexts[C]=[]);const A=new g.libraries.PIXI.Text(C,this.pixiTextConfig);A.hashValue=Math.random(),this.pTicks.addChild(A),this.pTicks.addChild(this.gTicks[C]),this.texts.push(A)})))}rerender(g,I){const C=JSON.stringify(g);(I||C!==this.prevOptions)&&(this.prevOptions=C,this.options=g,this.pixiTextConfig.fontSize=+this.options.fontSize?+this.options.fontSize+"px":this.pixiTextConfig.fontSize,this.pixiTextConfig.fill=this.options.color||this.pixiTextConfig.fill,this.pixiTextConfig.stroke=this.options.stroke||this.pixiTextConfig.stroke,this.stroke=A(this.pixiTextConfig.stroke),this.tickColor=this.options.tickColor?A(this.options.tickColor):7829367,"ends"===this.options.tickPositions&&"circular"!==this.options.layout?this.initBoundsTicks():this.initChromLabels(),super.rerender(g,I),this.options.showMousePosition&&!this.hideMousePosition&&(this.hideMousePosition=i(this,this.is2d,this.isShowGlobalMousePosition())),!this.options.showMousePosition&&this.hideMousePosition&&(this.hideMousePosition(),this.hideMousePosition=void 0))}formatTick(g){if(isNaN(g))return"null";const I=this._xScale.domain(),C=I[1]-I[0],A=R(g,C),l=K(","),i=r(`,.${A}`,C);let c=l;return"si"===this.options.tickFormat?c=i:"plain"===this.options.tickFormat?c=l:"ends"===this.options.tickPositions&&(c=i),c(g)}drawBoundsTicks(g,I){const C=this.gBoundTicks;C.clear(),C.lineStyle(1,0);const A=this.options.reverseOrientation?0:this.dimensions[1],l=this.options.reverseOrientation?this.tickHeight:this.dimensions[1]-this.tickHeight;C.moveTo(1,A),C.lineTo(1,l),C.moveTo(this.dimensions[0]-1,A),C.lineTo(this.dimensions[0]-1,l),this.leftBoundTick.x=0,this.leftBoundTick.y=this.options.reverseOrientation?l+this.tickTextSeparation:l-this.tickTextSeparation,this.leftBoundTick.text="unknown"===this.options.assembly?`${this.formatTick(g[1])}`:`${g[0]}: ${this.formatTick(g[1])}`,this.leftBoundTick.anchor.y=this.options.reverseOrientation?0:1,this.rightBoundTick.x=this.dimensions[0],this.rightBoundTick.text="unknown"===this.options.assembly?`${this.formatTick(I[1])}`:`${I[0]}: ${this.formatTick(I[1])}`,this.rightBoundTick.y=this.options.reverseOrientation?l+this.tickTextSeparation:l-this.tickTextSeparation,this.rightBoundTick.anchor.y=this.options.reverseOrientation?0:1,this.rightBoundTick.anchor.x=1,this.flipText&&(this.leftBoundTick.scale.x=-1,this.leftBoundTick.anchor.x=1,this.rightBoundTick.scale.x=-1,this.rightBoundTick.anchor.x=0),this.leftBoundTick.tickLine=[1,this.dimensions[1],1,this.dimensions[1]-this.tickHeight],this.rightBoundTick.tickLine=[this.dimensions[0]-1,this.dimensions[1],this.dimensions[0]-1,this.dimensions[1]-this.tickHeight],this.tickTexts={},this.tickTexts.all=[this.leftBoundTick,this.rightBoundTick]}drawTicks(I){const C=this.gTicks[I.chr];C.visible=!0,C.clear();const A=+this.chromInfo.chromLengths[I.chr],l=Math.max(this._xScale(I.pos),0),i=Math.min(this._xScale(I.pos+A),this.dimensions[0]),c=(i-l)/this.tickWidth,d=n().domain([Math.max(1,this._xScale.invert(0)-I.pos),Math.min(A,this._xScale.invert(this.dimensions[0])-I.pos)]).range([l,i]).ticks(c).filter((g=>Number.isInteger(g))),Z=this.tickTexts[I.chr],e=this.tickHeight;let m=e+this.tickTextSeparation;for(this.options.reverseOrientation&&(m=this.dimensions[1]-m);Z.length<d.length;){const C=new g.libraries.PIXI.Text("",this.pixiTextConfig);Z.push(C),this.gTicks[I.chr].addChild(C)}for(;Z.length>d.length;){const g=Z.pop();this.gTicks[I.chr].removeChild(g)}let o=0;for(;o<d.length;){Z[o].visible=!0,Z[o].anchor.x=.5,Z[o].anchor.y="circular"===this.options.layout||this.options.reverseOrientation?0:1,this.flipText&&(Z[o].scale.x=-1);const g="unknown"===this.options.assembly?"":`${I.chr}: `;Z[o].text=0===d[o]?`${g}1`:`${g}${this.formatTick(d[o])}`;const A=this._xScale(I.pos+d[o]);if("circular"===this.options.layout){const g=this.addCurvedText(Z[o],A+0);this.pTicksCircular.addChild(g)}else{Z[o].x=A+0,Z[o].y=this.dimensions[1]-m,Z[o].tickLine=[A-1,this.dimensions[1],A-1,this.dimensions[1]-e-1];const g=this.options.reverseOrientation?0:this.dimensions[1],I=this.options.reverseOrientation?e:this.dimensions[1]-e;C.lineStyle(1,this.tickColor),C.moveTo(A,g),C.lineTo(A,I)}o+=1}for("circular"===this.options.layout&&(o=0);o<Z.length;)Z[o].visible=!1,o+=1;return d.length}addCurvedText(I,C){const{innerRadius:A,outerRadius:l,startAngle:i,endAngle:c,width:d,height:Z}=this.options,e=(l+A)/2,m=Hg(C,d,e,d/2,Z/2,i,c);I.x=m.x,I.y=m.y,I.resolution=4;const o=new g.libraries.PIXI.TextStyle(this.pixiTextConfig),b=g.libraries.PIXI.TextMetrics.measureText(I.text,o),a=b.width/(2*e*Math.PI)*d*360/(c-i);let[s,t]=[C-a/2,C+a/2];if(s<0){const g=-s;s=0,t+=g}else if(t>d){const g=t-d;t=d,s-=g}const n=[],V=A+b.height/2+3;for(let y=t;y>=s;y-=a/10){const I=Hg(y,d,V,d/2,Z/2,i,c);n.push(new g.libraries.PIXI.Point(I.x,I.y))}I.updateText();return new g.libraries.PIXI.SimpleRope(I.texture,n)}draw(){if(this.allTexts=[],!this.texts)return;const g=C(this._xScale.domain()[0],this.chromInfo),I=C(this._xScale.domain()[1],this.chromInfo);if(!g||!I)return void console.warn("Empty chromInfo:",this.dataConfig,this.chromInfo);if("ends"===this.options.tickPositions&&"circular"!==this.options.layout){if(!this.gBoundTicks)return;return this.gBoundTicks.visible=!0,void this.drawBoundsTicks(g,I)}if(!this.pTicks)return;const A="circular"===this.options.layout;for(let C=0;C<this.texts.length;C++)this.texts[C].visible=!1,this.gTicks[this.chromInfo.cumPositions[C].chr].visible=!1;let l=this.tickHeight+this.tickTextSeparation;this.options.reverseOrientation&&(l=this.dimensions[1]-l),Object.keys(this.chromInfo.chrPositions).forEach((g=>{this.tickTexts[g]&&this.tickTexts[g].forEach((g=>{g.visible=!1}))})),this.pTicksCircular.removeChildren();for(let C=g[3];C<=I[3];C++){const g=this.chromInfo.cumPositions[C],I=g.pos+this.chromInfo.chromLengths[g.chr]/2,i=this._xScale(I),c=this.texts[C];let d;c.anchor.x=.5,c.anchor.y=A?.5:this.options.reverseOrientation?0:1,A?(d=this.addCurvedText(c,i),this.pTicksCircular.addChild(d)):(c.x=i,c.y=this.dimensions[1]-l),c.updateTransform(),this.flipText&&(c.scale.x=-1);const Z=this.drawTicks(g);A?Z>0&&this.pTicksCircular.removeChild(d):c.visible=Z<=0,this.allTexts.push({importance:c.hashValue,text:c,rope:d})}this.hideOverlaps(this.allTexts)}hideOverlaps(g){const I=new J;g.sort(((g,I)=>I.importance-g.importance)).forEach((({text:g,rope:C})=>{g.updateTransform();const A=g.getBounds(),l={minX:A.x-5,minY:A.y-5,maxX:A.x+A.width+10,maxY:A.y+A.height+10};I.collides(l)?(g.visible=!1,"circular"===this.options.layout&&C&&this.pTicksCircular.removeChild(C)):I.insert(l)}))}setPosition(g){super.setPosition(g),[this.pMain.position.x,this.pMain.position.y]=this.position}zoomed(g,I){0===[...g.domain(),...I.domain()].filter((g=>isNaN(g))).length&&(this.xScale(g),this.yScale(I),this.draw())}exportSVG(){let g=null,I=null;super.exportSVG?[I,g]=super.exportSVG():(I=document.createElement("g"),g=I),I.setAttribute("class","chromosome-labels");const C=document.createElement("g");return g.appendChild(C),C.setAttribute("transform",`translate(${this.position[0]},${this.position[1]})`),this.allTexts.filter((g=>g.text.visible)).forEach((g=>{const I=l(g.text);C.appendChild(I)})),Object.values(this.tickTexts).forEach((g=>{g.filter((g=>g.visible)).forEach((g=>{let I=l(g);C.appendChild(I),I=c(g.x,this.options.reverseOrientation?0:this.dimensions[1],g.x,this.options.reverseOrientation?this.tickHeight:this.dimensions[1]-this.tickHeight,1,this.tickColor);const A=document.createElement("line");A.setAttribute("x1",g.tickLine[0]),A.setAttribute("y1",g.tickLine[1]),A.setAttribute("x2",g.tickLine[2]),A.setAttribute("y2",g.tickLine[3]),A.setAttribute("style","stroke: grey"),C.appendChild(I),C.appendChild(A)}))})),[I,g]}}return new d(I)}function GI(g,...I){if(!new.target)throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');class C extends g.tracks.SVGTrack{constructor(g){var I,C;super(...g);const[A,l]=g,{registerViewportChanged:i,removeViewportChanged:c,setDomainsCallback:d}=A;this.uid=w(),this.options=l,this.hasFromView=!A.projectionXDomain,this.removeViewportChanged=c,this.setDomainsCallback=d,this.viewportXDomain=this.hasFromView?null:A.projectionXDomain,this.viewportYDomain=this.hasFromView?null:[0,0],this.prevExtent=[0,0],this.RR=.02;const Z=[0,1.7*Math.PI];this.circularBrushData=this.getBrushData(Z),this.brush=S().innerRadius(null!=(I=this.options.innerRadius)?I:100).outerRadius(null!=(C=this.options.outerRadius)?C:200),this.gBrush=this.gMain.append("g").attr("id",`brush-${this.uid}`).selectAll(".brush").data(this.circularBrushData).enter().append("path").attr("class","brush").attr("d",this.brush).attr("fill",this.options.projectionFillColor).attr("stroke",this.options.projectionStrokeColor).attr("fill-opacity",(g=>"brush"===g.type?this.options.projectionFillOpacity:0)).attr("stroke-opacity",(g=>"brush"===g.type?this.options.projectionStrokeOpacity:0)).attr("stroke-width",this.options.strokeWidth).style("pointer-events","all").style("cursor",(g=>g.cursor)).call(this.dragged()),i(this.uid,this.viewportChanged.bind(this)),this.draw()}getBrushData(g){return[{type:"brush",startAngle:g[0],endAngle:g[1],cursor:"grab"},{type:"start",startAngle:g[0],endAngle:g[0]+this.RR,cursor:"move"},{type:"end",startAngle:g[1]-this.RR,endAngle:g[1],cursor:"move"}]}cropExtent(g){let[I,C]=g,A=0;for(;(I>2*Math.PI||C>2*Math.PI||I<0||C<0)&&!(A++>10);)I>2*Math.PI||C>2*Math.PI?(I-=2*Math.PI,C-=2*Math.PI):(I<0||C<0)&&(I+=2*Math.PI,C+=2*Math.PI);return[I,C].sort(((g,I)=>g-I))}updateBrush(g){let[I,C]=g;I<=0&&C<=0||I>=2*Math.PI-0&&C>=2*Math.PI-0?this.gBrush.attr("visibility","hidden"):(I<0&&(I=0),I>2*Math.PI-0&&(I=2*Math.PI-0),C<0&&(C=0),C>2*Math.PI-0&&(C=2*Math.PI-0),this.circularBrushData=this.getBrushData(g),this.gBrush.data(this.circularBrushData).attr("d",this.brush).attr("visibility","visible"))}dragged(){return g.libraries.d3Drag.drag().on("start",(()=>{this.startEvent=g.libraries.d3Selection.event.sourceEvent,this.prevExtent=[this.circularBrushData[0].startAngle-this.RR,this.circularBrushData[0].endAngle+this.RR]})).on("drag",(I=>{const[C,A]=this.position,[l,i]=this.dimensions,c=g.libraries.d3Selection.event.sourceEvent,d=this.startEvent.layerX-C,Z=this.startEvent.layerY-A,e=c.layerX-C,m=c.layerY-A,o=Math.atan2(d-l/2,Z-i/2)-Math.atan2(e-l/2,m-i/2);let[b,a]=this.prevExtent;if("brush"===I.type){if(b+=o,a+=o,b<0||2*Math.PI-0<a){const g=0-b,I=a-(2*Math.PI-0);g>I?(a+=g,b+=g):(b-=I,a-=I)}}else"start"===I.type?b+=o:"end"===I.type&&(a+=o);if([b,a]=this.cropExtent([b,a]),!this._xScale||!this._yScale)return;const s=(this.options.endAngle-this.options.startAngle)/360,t=b-this.options.startAngle/360*Math.PI*2,n=a-this.options.startAngle/360*Math.PI*2,V=[this._xScale.invert(l-l*n/(2*Math.PI*s)),this._xScale.invert(l-l*t/(2*Math.PI*s))],y=this.viewportYDomain;this.hasFromView||(this.viewportXDomain=V),this.setDomainsCallback(V,y),this.updateBrush([b,a])}))}draw(){if(!this._xScale||!this.yScale)return;if(!this.viewportXDomain||!this.viewportYDomain)return;const g=this._xScale(this.viewportXDomain[0]),I=this._xScale(this.viewportXDomain[1]),[C]=this.dimensions;let A=pg(g,C,this.options.startAngle,this.options.endAngle)+Math.PI/2,l=pg(I,C,this.options.startAngle,this.options.endAngle)+Math.PI/2;[l,A]=this.cropExtent([l,A]),this.updateBrush([l,A])}viewportChanged(g,I){const C=g.domain(),A=I.domain();this.viewportXDomain=C,this.viewportYDomain=A,this.draw()}remove(){this.removeViewportChanged(this.uid),super.remove()}rerender(){}zoomed(g,I){this.xScale(g),this.yScale(I),this.draw()}setPosition(g){super.setPosition(g),this.draw()}setDimensions(g){super.setDimensions(g),this.gBrush.attr("transform",`translate(${g[0]/2},${g[1]/2})`),this.draw()}}return new C(I)}XI.config={type:"axis-track",datatype:["multivec","epilogos"],local:!1,orientation:"1d-horizontal",thumbnail:(new DOMParser).parseFromString('<svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewBox="0 0 5640 5420" preserveAspectRatio="xMidYMid meet"> <g id="layer101" fill="#000000" stroke="none"> <path d="M0 2710 l0 -2710 2820 0 2820 0 0 2710 0 2710 -2820 0 -2820 0 0 -2710z"/> </g> <g id="layer102" fill="#750075" stroke="none"> <path d="M200 4480 l0 -740 630 0 630 0 0 740 0 740 -630 0 -630 0 0 -740z"/> <path d="M1660 4420 l0 -800 570 0 570 0 0 800 0 800 -570 0 -570 0 0 -800z"/> <path d="M3000 3450 l0 -1770 570 0 570 0 0 1770 0 1770 -570 0 -570 0 0 -1770z"/> <path d="M4340 2710 l0 -2510 560 0 560 0 0 2510 0 2510 -560 0 -560 0 0 -2510z"/> <path d="M200 1870 l0 -1670 630 0 630 0 0 1670 0 1670 -630 0 -630 0 0 -1670z"/> <path d="M1660 1810 l0 -1610 570 0 570 0 0 1610 0 1610 -570 0 -570 0 0 -1610z"/> <path d="M3000 840 l0 -640 570 0 570 0 0 640 0 640 -570 0 -570 0 0 -640z"/> </g> <g id="layer103" fill="#ffff04" stroke="none"> <path d="M200 4480 l0 -740 630 0 630 0 0 740 0 740 -630 0 -630 0 0 -740z"/> <path d="M1660 4420 l0 -800 570 0 570 0 0 800 0 800 -570 0 -570 0 0 -800z"/> <path d="M3000 3450 l0 -1770 570 0 570 0 0 1770 0 1770 -570 0 -570 0 0 -1770z"/> </g> </svg>',"text/xml").documentElement,availableOptions:["innerRadius","outerRadius","startAngle","endAngle","width","height","layout","labelPosition","labelColor","labelTextOpacity","labelBackgroundOpacity","trackBorderWidth","trackBorderColor","trackType","tickPositions","scaledHeight","backgroundColor"],defaultOptions:{innerRadius:340,outerRadius:310,startAngle:0,endAngle:360,width:700,height:700,layout:"linear",labelPosition:"none",labelColor:"black",labelTextOpacity:.4,trackBorderWidth:0,trackBorderColor:"black",tickPositions:"even",backgroundColor:"transparent"}};function BI(g,I){const{field:C,not:A}=g;let l=Array.from(I);if("oneOf"in g){const{oneOf:I}=g;l=l.filter((g=>A?-1===I.indexOf(g[C]):-1!==I.indexOf(g[C])))}else if(function(g){return"inRange"in g}(g)){const{inRange:I}=g;l=l.filter((g=>A?!(I[0]<=g[C]&&g[C]<=I[1]):I[0]<=g[C]&&g[C]<=I[1]))}else if(function(g){return"include"in g}(g)){const{include:I}=g;l=l.filter((g=>A?`${g[C]}`.includes(I):!`${g[C]}`.includes(I)))}return l}function WI(g,I){if(0===function(g){const I=[];return wg.forEach((C=>{const A=g[C];Dg(A)&&"aggregate"in A&&I.push(C)})),I}(g).length)return I;const C=jg(g,"nominal");if(1!==C.length)return console.warn("Currently, we only support aggregating datasets with single nominal field."),I;const A=g[C[0]];if(!Dg(A))return I;const l=A.field;if(!l)return I;const i=[...jg(g,"quantitative"),...jg(g,"genomic")],c=[],d=Array.from(new Set(I.map((g=>g[l]))));let Z=!1;return d.forEach((C=>{const A={};A[l]=C,i.forEach((i=>{const c=g[i];if(!Dg(c))return void(Z=!0);const{field:d}=c;d&&"aggregate"in c?A[d]="max"===c.aggregate?Math.max(...I.filter((g=>g[l]===C)).map((g=>+g[d]))):Math.min(...I.filter((g=>g[l]===C)).map((g=>+g[d]))):Z=!0})),c.push(A)})),Z?I:c}function hI(g,...I){if(!new.target)throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');return new class{constructor(g){const[I]=g;if(this.dataConfig=I,this.tilesetInfoLoading=!1,this.assembly=this.dataConfig.assembly,this.filter=this.dataConfig.filter,!I.url)return void console.error("Please provide the `url` of the data");const C=sI(this.assembly).size,A=[],l={};let i=0;Object.keys(sI(this.assembly).size).forEach(((g,I)=>{const C={id:I,chr:g,pos:i};A.push(C),l[g]=C,i+=sI(this.assembly).size[g]})),this.chromSizes={chrToAbs:(g,I)=>this.chromSizes.chrPositions[g].pos+I,cumPositions:A,chrPositions:l,totalLength:i,chromLengths:C},I.data?this.values=I.data:this.dataPromise=this.fetchCSV()}fetchCSV(){var g;const{url:I,chromosomeField:C,genomicFields:A,quantitativeFields:l,headerNames:i,chromosomePrefix:c,longToWideId:d,genomicFieldsToConvert:Z}=this.dataConfig,e=null!=(g=this.dataConfig.separator)?g:",";return fetch(I).then((g=>g.ok?g.text():Promise.reject(g.status))).then((g=>{const I=i?`${i.join(e)}\n${g}`:g;return F(e).parse(I,(g=>{let I=!0;if(Z?Z.forEach((C=>{const A=C.chromosomeField;C.genomicFields.forEach((C=>{try{if("unknown"!==this.assembly){const I=c?g[A].replace(c,"chr"):g[A].includes("chr")?g[A]:`chr${g[A]}`;g[C]=sI(this.assembly).interval[I][0]+ +g[C]}}catch(l){I=!1}}))})):A.forEach((A=>{if(g[C])try{const I=c?g[C].replace(c,"chr"):g[C].includes("chr")?g[C]:`chr${g[C]}`;g[A]=sI(this.assembly).interval[I][0]+ +g[A]}catch(l){I=!1}})),I)return null==l||l.forEach((I=>{g[I]=+g[I]})),g}))})).then((g=>{var I;if(d&&(null==(I=g[0])?void 0:I[d])){const I=Object.keys(g[0]),C={};g.forEach((g=>{C[g[d]]?I.forEach((I=>{C[g[d]][`${I}_2`]=g[I]})):C[g[d]]=JSON.parse(JSON.stringify(g))})),this.values=Object.keys(C).map((g=>C[g]))}else this.values=g})).catch((g=>{console.error("[Gosling Data Fetcher] Error fetching data",g)}))}generateTilesetInfo(g){this.tilesetInfoLoading=!1;const I=this.chromSizes.totalLength,C={tile_size:1024,max_zoom:Math.ceil(Math.log(I/1024)/Math.log(2)),max_width:I,min_pos:[0,0],max_pos:[I,I]};return g&&g(C),C}tilesetInfo(g){if(this.dataPromise)return this.tilesetInfoLoading=!0,this.dataPromise.then((()=>this.generateTilesetInfo(g))).catch((g=>{this.tilesetInfoLoading=!1,console.error("[Gosling Data Fetcher] Error parsing data:",g)}))}fetchTilesDebounced(g,I){const C={},A=[],l=[];for(const i of I){const g=i.split("."),I=parseInt(g[0],10),C=parseInt(g[1],10),c=parseInt(g[2],10);Number.isNaN(C)||Number.isNaN(I)?console.warn("[Gosling Data Fetcher] Invalid tile zoom or position:",I,C,c):(A.push(i),l.push(this.tile(I,C,c)))}return Promise.all(l).then((I=>{I.forEach(((g,I)=>{const l=A[I];C[l]=g,C[l].tilePositionId=l})),g(C)})),C}tile(g,I,C){var A;return null==(A=this.tilesetInfo())?void 0:A.then((A=>{var l,i;const c=+A.max_width/2**+g,d=A.min_pos[0]+I*c,Z=A.min_pos[0]+(I+1)*c;let e=this.values.filter((g=>{if(this.dataConfig.genomicFields)return this.dataConfig.genomicFields.find((I=>d<g[I]&&g[I]<=Z));{const I=[];return this.dataConfig.genomicFieldsToConvert.forEach((g=>I.push(...g.genomicFields))),I.find((I=>d<g[I]&&g[I]<=Z))}}));null==(l=this.filter)||l.forEach((g=>{e=BI(g,e)}));const m=null!=(i=this.dataConfig.sampleLength)?i:1e3;return{tabularData:e.length>m?k(e,m):e,server:null,tilePos:[I,C],zoomLevel:g}}))}}(I)}function pI(g,...I){if(!new.target)throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');return new class{constructor(g){const[I]=g;if(this.dataConfig=I,this.tilesetInfoLoading=!1,this.assembly=this.dataConfig.assembly,!I.values)return void console.error("Please provide `values` of the raw data");const C=sI(this.assembly).size,A=[],l={};let i=0;Object.keys(sI(this.assembly).size).forEach(((g,I)=>{const C={id:I,chr:g,pos:i};A.push(C),l[g]=C,i+=sI(this.assembly).size[g]})),this.chromSizes={chrToAbs:(g,I)=>this.chromSizes.chrPositions[g].pos+I,cumPositions:A,chrPositions:l,totalLength:i,chromLengths:C},this.values=I.values.map((g=>{var I;let C=!0;if(this.dataConfig.genomicFields.forEach((I=>{if(g[this.dataConfig.chromosomeField])try{const C=g[this.dataConfig.chromosomeField].includes("chr")?g[this.dataConfig.chromosomeField]:`chr${g[this.dataConfig.chromosomeField]}`;g[I]=sI(this.assembly).interval[C][0]+ +g[I]}catch(A){C=!1}})),C)return null==(I=this.dataConfig.quantitativeFields)||I.forEach((I=>{g[I]=+g[I]})),g}))}tilesetInfo(g){this.tilesetInfoLoading=!1;const I=this.chromSizes.totalLength,C={tile_size:1024,max_zoom:Math.ceil(Math.log(I/1024)/Math.log(2)),max_width:I,min_pos:[0],max_pos:[I]};return g&&g(C),C}fetchTilesDebounced(g,I){const C={},A=[],l=[];for(const i of I){const g=i.split("."),I=parseInt(g[0],10),C=parseInt(g[1],10);Number.isNaN(C)||Number.isNaN(I)?console.warn("[Gosling Data Fetcher] Invalid tile zoom or position:",I,C):(A.push(i),l.push(this.tile(I,C)))}return Promise.all(l).then((I=>{I.forEach(((g,I)=>{const l=A[I];C[l]=g,C[l].tilePositionId=l})),g(C)})),C}tile(g,I){var C;const A=this.tilesetInfo(),l=+A.max_width/2**+g,i=A.min_pos[0]+I*l,c=A.min_pos[0]+(I+1)*l,d=this.values.filter((g=>this.dataConfig.genomicFields.find((I=>i<g[I]&&g[I]<=c)))),Z=null!=(C=this.dataConfig.sampleLength)?C:1e3;return{tabularData:d.length>Z?k(d,Z):d,server:null,tilePos:[I],zoomLevel:g}}}(I)}function HI(g,...I){if(!new.target)throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');return new class{constructor(g){g.chromSizesUrl="https://aveit.s3.amazonaws.com/higlass/data/sequence/hg38.chrom.sizes",this.dataConfig=g,this.bwFileHeader=null,this.bwFile=null,this.TILE_SIZE=1024,this.errorTxt="",this.dataPromises=[];const I=sI(this.assembly).size,C=[],A={};let l=0;Object.keys(sI(this.assembly).size).forEach(((g,I)=>{const i={id:I,chr:g,pos:l};C.push(i),A[g]=i,l+=sI(this.assembly).size[g]})),this.chromSizes={chrToAbs:(g,I)=>this.chromSizes.chrPositions[g].pos+I,cumPositions:C,chrPositions:A,totalLength:l,chromLengths:I},this.dataPromises.push(this.loadBBI(g))}loadBBI(g){return g.url?(this.bwFile=new v.BigWig({filehandle:new N.RemoteFile(g.url)}),this.bwFile.getHeader().then((g=>{this.bwFileHeader=g}))):(console.error('Please enter a "url" field to the data config'),null)}tilesetInfo(g){return this.tilesetInfoLoading=!0,Promise.all(this.dataPromises).then((()=>{this.tilesetInfoLoading=!1;let I={};const C=this.chromSizes.totalLength;return I={tile_size:this.TILE_SIZE,max_zoom:Math.ceil(Math.log(C/this.TILE_SIZE)/Math.log(2)),max_width:2**Math.ceil(Math.log(C)/Math.log(2)),min_pos:[0],max_pos:[C]},g&&g(I),I})).catch((I=>{this.tilesetInfoLoading=!1,console.error(I),g&&g({error:`Error parsing bigwig: ${I}`})}))}fetchTilesDebounced(g,I){const C={},A=[],l=[];for(const i of I){const g=i.split("."),I=parseInt(g[0],10),C=parseInt(g[1],10);Number.isNaN(C)||Number.isNaN(I)?console.warn("Invalid tile zoom or position:",I,C):(A.push(i),l.push(this.tile(I,C)))}return Promise.all(l).then((I=>{for(let g=0;g<I.length;g++){const l=A[g];C[l]=I[g],C[l].tilePositionId=l}g(C)})),C}tile(I,C){return this.tilesetInfo().then((A=>{const l=+A.max_width/2**+I,i=[],c={tilePos:[C],tileId:`bigwig.${I}.${C}`,zoomLevel:I},d=A.min_pos[0]+C*l;let Z=d;const e=A.min_pos[0]+(C+1)*l,m=this.determineScale(Z,e),o=(e-Z)/this.TILE_SIZE,b=[];for(let g=0;g<this.TILE_SIZE;g++)b.push(Z+g*o);const{chromLengths:a,cumPositions:s}=this.chromSizes;return s.forEach((I=>{const C=I.chr,A=I.pos,l=I.pos+a[C];let c,d;if(A<=Z&&Z<l){if(!(e>l))return c=Math.floor(Z-A),d=Math.ceil(e-A),void i.push(this.bwFile.getFeatures(C,c,d,{scale:1/m}).then((I=>(I.forEach((I=>{I.startAbs=g.utils.chrToAbs(C,I.start,this.chromSizes),I.endAbs=g.utils.chrToAbs(C,I.end,this.chromSizes)})),I))));c=Z-A,d=l-A,i.push(this.bwFile.getFeatures(C,c,d,{scale:1/m}).then((I=>(I.forEach((I=>{I.startAbs=g.utils.chrToAbs(C,I.start,this.chromSizes),I.endAbs=g.utils.chrToAbs(C,I.end,this.chromSizes)})),I)))),Z=l}})),Promise.all(i).then((I=>{const C=I.flat();for(var A=[],l=0;l<this.TILE_SIZE;l++)A.push(null);b.forEach(((g,I)=>{if(g<d||g>e)return;const l=C.filter((I=>g>=I.startAbs&&g<I.endAbs)).map((g=>g.score));A[I]=l.length>0?l[0]:null})),c.min_value=Math.min(...A),c.max_value=Math.max(...A);const i=new g.utils.DenseDataExtrema1D(A);return c.dense=A,c.denseDataExtrema=i,c.minNonZero=i.minNonZeroInTile,c.maxNonZero=i.maxNonZeroInTile,c}))}))}determineScale(g,I){const C=[1],A=I-g;let l;return this.bwFileHeader.zoomLevels.forEach((g=>{C.push(g.reductionLevel)})),C.forEach((g=>{if(l)return;A/g<=20*this.TILE_SIZE&&(l=g)})),l||C.slice(-1)[0]}}(...I)}function uI(g){return YI(Wg,g)}function YI(g,I,C=!1){const A=new f({extendRefs:!0}).compile(g),l=A(I);let i="",c="";return A.errors&&(c=JSON.stringify(A.errors,null,2),C||console.warn(c),i="⚠️ Some properties are incorrectly used."),{state:l?"success":"warn",message:i,details:c}}function KI(g){let I=!0;const C=[];return qg(g).forEach((g=>{RI(g)||"brush"===g.mark||(C.push("genomic type is not encoded to either a x- or y- axis"),I=!1);const A=g.color;"line"===g.mark&&Dg(A)&&"quantitative"===A.type&&(C.push("`line` mark cannot be used with `quantitative` value"),I=!1)})),{valid:I,errorMessages:C}}function RI(g){let I;return["x","y","xe","ye","x1","y1","x1e","y1e"].reverse().forEach((C=>{const A=g[C];Dg(A)&&"genomic"===A.type&&(I=A)})),I}function rI(g){let I;return["x","xe","y","ye","x1","y1","x1e","y1e"].reverse().forEach((C=>{const A=g[C];Dg(A)&&"genomic"===A.type&&(I=C)})),I}GI.config={type:"brush-track",datatype:["projection"],local:!1,projection:!0,orientation:"2d",thumbnail:(new DOMParser).parseFromString('<svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewBox="0 0 5640 5420" preserveAspectRatio="xMidYMid meet"> <g id="layer101" fill="#000000" stroke="none"> <path d="M0 2710 l0 -2710 2820 0 2820 0 0 2710 0 2710 -2820 0 -2820 0 0 -2710z"/> </g> <g id="layer102" fill="#750075" stroke="none"> <path d="M200 4480 l0 -740 630 0 630 0 0 740 0 740 -630 0 -630 0 0 -740z"/> <path d="M1660 4420 l0 -800 570 0 570 0 0 800 0 800 -570 0 -570 0 0 -800z"/> <path d="M3000 3450 l0 -1770 570 0 570 0 0 1770 0 1770 -570 0 -570 0 0 -1770z"/> <path d="M4340 2710 l0 -2510 560 0 560 0 0 2510 0 2510 -560 0 -560 0 0 -2510z"/> <path d="M200 1870 l0 -1670 630 0 630 0 0 1670 0 1670 -630 0 -630 0 0 -1670z"/> <path d="M1660 1810 l0 -1610 570 0 570 0 0 1610 0 1610 -570 0 -570 0 0 -1610z"/> <path d="M3000 840 l0 -640 570 0 570 0 0 640 0 640 -570 0 -570 0 0 -640z"/> </g> <g id="layer103" fill="#ffff04" stroke="none"> <path d="M200 4480 l0 -740 630 0 630 0 0 740 0 740 -630 0 -630 0 0 -740z"/> <path d="M1660 4420 l0 -800 570 0 570 0 0 800 0 800 -570 0 -570 0 0 -800z"/> <path d="M3000 3450 l0 -1770 570 0 570 0 0 1770 0 1770 -570 0 -570 0 0 -1770z"/> </g> </svg>',"text/xml").documentElement,availableOptions:["innerRadius","outerRadius","startAngle","endAngle","axisPositionHorizontal","projectionFillColor","projectionStrokeColor","projectionFillOpacity","projectionStrokeOpacity","strokeWidth"],defaultOptions:{innerRadius:100,outerRadius:200,startAngle:0,endAngle:360,axisPositionHorizontal:"left",projectionFillColor:"#777",projectionStrokeColor:"#777",projectionFillOpacity:.3,projectionStrokeOpacity:.7,strokeWidth:1}},hI.config={type:"csv"},pI.config={type:"json"},HI.config={type:"bigwig"};var JI={$ref:"#/definitions/HiGlassSpec",$schema:"http://json-schema.org/draft-07/schema#",definitions:{Assembly:{enum:["hg38","hg19","hg18","hg17","hg16","mm10","mm9","unknown"],type:"string"},CombinedTrack:{additionalProperties:!1,properties:{contents:{items:{$ref:"#/definitions/Track"},type:"array"},height:{type:"number"},options:{},position:{type:"string"},type:{const:"combined",type:"string"},uid:{type:"string"},width:{type:"number"}},required:["type","contents"],type:"object"},Data:{additionalProperties:!1,properties:{assembly:{$ref:"#/definitions/Assembly"},children:{items:{},type:"array"},filter:{items:{$ref:"#/definitions/FilterTransform"},type:"array"},quantitativeFields:{items:{type:"string"},type:"array"},tiles:{},tilesetInfo:{},type:{type:"string"},url:{type:"string"}},type:"object"},EnumTrack:{additionalProperties:!1,properties:{chromInfoPath:{type:"string"},data:{$ref:"#/definitions/Data"},fromViewUid:{type:["null","string"]},height:{type:"number"},options:{},server:{type:"string"},tilesetUid:{type:"string"},type:{$ref:"#/definitions/EnumTrackType"},uid:{type:"string"},width:{type:"number"},x:{type:"number"},y:{type:"number"}},required:["type"],type:"object"},EnumTrackType:{enum:["heatmap","2d-annotations","2d-chromosome-annotations","2d-chromosome-grid","2d-chromosome-labels","2d-rectangle-domains","2d-tiles","arrowhead-domains","bedlike","cross-rule","dummy","horizontal-1d-annotations","horizontal-1d-heatmap","horizontal-1d-tiles","horizontal-1d-value-interval","horizontal-2d-rectangle-domains","horizontal-bar","horizontal-chromosome-grid","horizontal-chromosome-labels","horizontal-divergent-bar","horizontal-gene-annotations","horizontal-heatmap","horizontal-line","horizontal-multivec","horizontal-point","horizontal-rule","horizontal-vector-heatmap","image-tiles","left-axis","left-stacked-interval","mapbox-tiles","osm-2d-tile-ids","osm-tiles","raster-tiles","simple-svg","square-markers","top-axis","top-stacked-interval","vertical-1d-annotations","vertical-1d-heatmap","vertical-1d-tiles","vertical-1d-value-interval","vertical-2d-rectangle-domains","vertical-bar","vertical-bedlike","vertical-chromosome-grid","vertical-chromosome-labels","vertical-gene-annotations","vertical-heatmap","vertical-line","vertical-multivec","vertical-point","vertical-rule","vertical-vector-heatmap","viewport-projection-center","viewport-projection-horizontal","viewport-projection-vertical","gosling-track","gosling-2d-track","axis-track","text"],type:"string"},FilterTransform:{anyOf:[{$ref:"#/definitions/OneOfFilter"},{$ref:"#/definitions/RangeFilter"},{$ref:"#/definitions/IncludeFilter"}]},GenericLocks:{additionalProperties:!1,properties:{locksByViewUid:{$ref:"#/definitions/LocksByViewUid"},locksDict:{}},required:["locksByViewUid","locksDict"],type:"object"},GenomePositionSearchBox:{additionalProperties:!1,properties:{autocompleteId:{type:"string"},autocompleteServer:{type:"string"},chromInfoId:{type:"string"},chromInfoServer:{type:"string"},visible:{type:"boolean"}},required:["chromInfoId","chromInfoServer"],type:"object"},HeatmapTrack:{additionalProperties:!1,properties:{data:{$ref:"#/definitions/Data"},height:{type:"number"},options:{},position:{type:"string"},server:{type:"string"},tilesetUid:{type:"string"},type:{const:"heatmap",type:"string"},uid:{type:"string"},width:{type:"number"}},required:["type"],type:"object"},HiGlassSpec:{additionalProperties:!1,properties:{chromInfoPath:{type:"string"},compactLayout:{type:"boolean"},editable:{type:"boolean"},exportViewUrl:{type:"string"},locationLocks:{$ref:"#/definitions/GenericLocks"},trackSourceServers:{items:{type:"string"},type:"array"},tracksEditable:{type:"boolean"},valueScaleLocks:{$ref:"#/definitions/ValueScaleLocks"},viewEditable:{type:"boolean"},views:{items:{$ref:"#/definitions/View"},type:"array"},zoomFixed:{type:"boolean"},zoomLocks:{$ref:"#/definitions/GenericLocks"}},required:["views","zoomLocks","locationLocks"],type:"object"},IncludeFilter:{additionalProperties:!1,properties:{field:{description:"A filter is applied based on the values of the specified data field",type:"string"},include:{description:"Check whether the value includes a substring.",type:"string"},not:{description:'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',type:"boolean"},type:{const:"filter",type:"string"}},required:["field","include","type"],type:"object"},IndependentViewportProjectionTrack:{additionalProperties:!1,properties:{fromViewUid:{type:"null"},options:{},projectionXDomain:{items:{type:"number"},type:"array"},projectionYDomain:{items:{type:"number"},type:"array"},transforms:{items:{},type:"array"},type:{enum:["viewport-projection-horizontal","viewport-projection-vertical","viewport-projection-center"],type:"string"},uid:{type:"string"},width:{type:"number"},x:{type:"number"},y:{type:"number"}},required:["type"],type:"object"},Layout:{additionalProperties:!1,properties:{h:{type:"number"},w:{type:"number"},x:{type:"number"},y:{type:"number"}},required:["h","w","x","y"],type:"object"},LocksByViewUid:{additionalProperties:{type:"string"},type:"object"},OneOfFilter:{additionalProperties:!1,properties:{field:{description:"A filter is applied based on the values of the specified data field",type:"string"},not:{description:'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',type:"boolean"},oneOf:{anyOf:[{items:{type:"string"},type:"array"},{items:{type:"number"},type:"array"}],description:"Check whether the value is an element in the provided list."},type:{const:"filter",type:"string"}},required:["field","oneOf","type"],type:"object"},Overlay:{additionalProperties:!1,properties:{chromInfoPath:{type:"string"},includes:{items:{},type:"array"},options:{$ref:"#/definitions/OverlayOptions"},type:{type:"string"},uid:{type:"string"}},type:"object"},OverlayOptions:{additionalProperties:!1,properties:{extent:{items:{},type:"array"},fill:{type:"string"},fillOpacity:{type:"number"},minWidth:{type:"number"},outline:{type:"string"},outlineOpacity:{type:"number"},outlinePos:{anyOf:[{items:{},type:"array"},{type:"string"}]},outlineWidth:{type:"number"},stroke:{type:"string"},strokeOpacity:{type:"number"},strokePos:{anyOf:[{items:{},type:"array"},{type:"string"}]},strokeWidth:{type:"number"}},type:"object"},RangeFilter:{additionalProperties:!1,properties:{field:{description:"A filter is applied based on the values of the specified data field",type:"string"},inRange:{description:"Check whether the value is in a number range.",items:{type:"number"},type:"array"},not:{description:'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',type:"boolean"},type:{const:"filter",type:"string"}},required:["field","inRange","type"],type:"object"},Track:{anyOf:[{$ref:"#/definitions/HeatmapTrack"},{$ref:"#/definitions/CombinedTrack"},{$ref:"#/definitions/IndependentViewportProjectionTrack"},{$ref:"#/definitions/EnumTrack"}]},Tracks:{additionalProperties:!1,properties:{bottom:{items:{$ref:"#/definitions/Track"},type:"array"},center:{items:{$ref:"#/definitions/Track"},type:"array"},gallery:{items:{$ref:"#/definitions/Track"},type:"array"},left:{items:{$ref:"#/definitions/Track"},type:"array"},right:{items:{$ref:"#/definitions/Track"},type:"array"},top:{items:{$ref:"#/definitions/Track"},type:"array"},whole:{items:{$ref:"#/definitions/Track"},type:"array"}},required:["top","left","center","right","bottom","gallery","whole"],type:"object"},ValueScaleLocks:{additionalProperties:!1,properties:{locksByViewUid:{$ref:"#/definitions/LocksByViewUid"},locksDict:{}},required:["locksByViewUid"],type:"object"},View:{additionalProperties:!1,properties:{autocompleteSource:{type:"string"},chromInfoPath:{type:"string"},genomePositionSearchBox:{$ref:"#/definitions/GenomePositionSearchBox"},genomePositionSearchBoxVisible:{type:"boolean"},initialXDomain:{items:{type:"number"},type:"array"},initialYDomain:{items:{type:"number"},type:"array"},layout:{$ref:"#/definitions/Layout"},overlays:{items:{$ref:"#/definitions/Overlay"},type:"array"},selectionView:{type:"boolean"},tracks:{$ref:"#/definitions/Tracks"},uid:{type:"string"},zoomFixed:{type:"boolean"},zoomLimits:{items:[{type:["number","null"]},{type:["number","null"]}],maxItems:2,minItems:2,type:"array"}},required:["tracks","layout"],type:"object"}}};function wI(g,I){if("chromosome"in g&&(g.chromosome.includes("chr")&&(g.chromosome=g.chromosome.replace("chr","")),Object.keys(sI().interval).find((I=>I===`chr${g.chromosome}`))||(g.chromosome="1")),function(g){return"chromosome"in g&&!("interval"in g)}(g))return[sI(I).interval[`chr${g.chromosome}`][0]+1,sI(I).interval[`chr${g.chromosome}`][1]];if(function(g){return!("chromosome"in g)&&"interval"in g}(g))return g.interval;if(function(g){return"chromosome"in g&&"interval"in g}(g)){const C=sI(I).interval[`chr${g.chromosome}`][0],[A,l]=g.interval;return[C+A,C+l]}}const SI={compactLayout:!1,trackSourceServers:["https://server.gosling-lang.org/api/v1/"],views:[{genomePositionSearchBoxVisible:!1,genomePositionSearchBox:{autocompleteServer:"https://higlass.io/api/v1",autocompleteId:"P0PLbQMwTYGy-5uPIQid7A",chromInfoServer:"https://higlass.io/api/v1",chromInfoId:"hg38"},layout:{x:0,y:0,w:6.4,h:600},tracks:{top:[],left:[{type:"combined",width:130,height:600,contents:[{type:"gosling-track",server:"https://server.gosling-lang.org/api/v1/",tilesetUid:"cistrome-multivec",width:130,height:600,options:{showMousePosition:!0,mousePositionColor:"#000000",fontSize:24,labelPosition:"none",labelShowResolution:!1,labelColor:"black",labelBackgroundColor:"white",labelTextOpacity:1,labelLeftMargin:1,labelTopMargin:1,labelRightMargin:0,labelBottomMargin:0,backgroundColor:"transparent",spec:{spacing:10,orientation:"vertical",assembly:"hg38",layout:"linear",static:!1,xDomain:{interval:[0,1e9]},centerRadius:.3,xOffset:0,yOffset:0,style:{outlineWidth:.5},data:{url:"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec",type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"],binSize:4},mark:"rect",x:{field:"start",type:"genomic",axis:"left",domain:{interval:[0,1e9]},linkingId:"7f94b74e-25ec-4e67-8c75-3dc0f1b0d6bd"},xe:{field:"end",type:"genomic"},row:{field:"sample",type:"nominal",legend:!0},color:{field:"peak",type:"quantitative",legend:!0},tooltip:[{field:"start",type:"genomic",alt:"Start Position"},{field:"end",type:"genomic",alt:"End Position"},{field:"peak",type:"quantitative",alt:"Value",format:".2"},{field:"sample",type:"nominal",alt:"Sample"}],width:160,height:600,overlayOnPreviousTrack:!1},theme:{base:"light",root:{background:"white",titleColor:"black",titleBackgroundColor:"transparent",titleFontSize:18,titleFontFamily:"Arial",titleAlign:"left",titleFontWeight:"bold",subtitleColor:"gray",subtitleBackgroundColor:"transparent",subtitleFontSize:16,subtitleFontFamily:"Arial",subtitleFontWeight:"normal",subtitleAlign:"left",mousePositionColor:"#000000"},track:{background:"transparent",alternatingBackground:"transparent",titleColor:"black",titleBackground:"white",titleFontSize:24,titleAlign:"left",outline:"black",outlineWidth:1},legend:{position:"top",background:"white",backgroundOpacity:.7,labelColor:"black",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",backgroundStroke:"#DBDBDB",tickColor:"black"},axis:{tickColor:"black",labelColor:"black",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",baselineColor:"black",gridColor:"#E3E3E3",gridStrokeWidth:1,gridStrokeType:"solid",gridStrokeDash:[4,4]},markCommon:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},point:{color:"#E79F00",size:3,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},rect:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},triangle:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},area:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},line:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},bar:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},rule:{color:"#E79F00",size:1,stroke:"black",strokeWidth:1,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},link:{color:"#E79F00",size:1,stroke:"black",strokeWidth:1,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},text:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6],textAnchor:"middle",textFontWeight:"normal"},brush:{color:"gray",size:1,stroke:"black",strokeWidth:1,opacity:.3,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]}}}}]},{uid:"15483511-f6fb-11eb-914b-976b6ecda162",type:"axis-track",chromInfoPath:"https://s3.amazonaws.com/gosling-lang.org/data/hg38.chrom.sizes",options:{layout:"linear",outerRadius:null,width:160,height:600,theme:{base:"light",root:{background:"white",titleColor:"black",titleBackgroundColor:"transparent",titleFontSize:18,titleFontFamily:"Arial",titleAlign:"left",titleFontWeight:"bold",subtitleColor:"gray",subtitleBackgroundColor:"transparent",subtitleFontSize:16,subtitleFontFamily:"Arial",subtitleFontWeight:"normal",subtitleAlign:"left",mousePositionColor:"#000000"},track:{background:"transparent",alternatingBackground:"transparent",titleColor:"black",titleBackground:"white",titleFontSize:24,titleAlign:"left",outline:"black",outlineWidth:1},legend:{position:"top",background:"white",backgroundOpacity:.7,labelColor:"black",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",backgroundStroke:"#DBDBDB",tickColor:"black"},axis:{tickColor:"black",labelColor:"black",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",baselineColor:"black",gridColor:"#E3E3E3",gridStrokeWidth:1,gridStrokeType:"solid",gridStrokeDash:[4,4]},markCommon:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},point:{color:"#E79F00",size:3,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},rect:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},triangle:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},area:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},line:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},bar:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},rule:{color:"#E79F00",size:1,stroke:"black",strokeWidth:1,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},link:{color:"#E79F00",size:1,stroke:"black",strokeWidth:1,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},text:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6],textAnchor:"middle",textFontWeight:"normal"},brush:{color:"gray",size:1,stroke:"black",strokeWidth:1,opacity:.3,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]}},assembly:"hg38",stroke:"transparent",color:"black",fontSize:12,fontFamily:"Arial",fontWeight:"normal",tickColor:"black",tickFormat:"plain",tickPositions:"even",reverseOrientation:!1},width:30}],center:[],right:[],bottom:[],gallery:[],whole:[]},initialXDomain:[0,1e9],initialYDomain:[0,1e9],zoomFixed:!1,zoomLimits:[1,null],uid:"15483510-f6fb-11eb-914b-976b6ecda162",chromInfoPath:"https://s3.amazonaws.com/gosling-lang.org/data/hg38.chrom.sizes"},{genomePositionSearchBoxVisible:!1,genomePositionSearchBox:{autocompleteServer:"https://higlass.io/api/v1",autocompleteId:"P0PLbQMwTYGy-5uPIQid7A",chromInfoServer:"https://higlass.io/api/v1",chromInfoId:"hg38"},layout:{x:6.8,y:0,w:5.2,h:600},tracks:{top:[],left:[{type:"combined",width:130,height:600,contents:[{type:"gosling-track",server:"https://server.gosling-lang.org/api/v1/",tilesetUid:"cistrome-multivec",width:130,height:600,options:{showMousePosition:!0,mousePositionColor:"#000000",fontSize:24,labelPosition:"none",labelShowResolution:!1,labelColor:"black",labelBackgroundColor:"white",labelTextOpacity:1,labelLeftMargin:1,labelTopMargin:1,labelRightMargin:0,labelBottomMargin:0,backgroundColor:"transparent",spec:{spacing:10,orientation:"vertical",assembly:"hg38",layout:"linear",static:!1,xDomain:{interval:[0,1e9]},centerRadius:.3,xOffset:0,yOffset:0,style:{outlineWidth:.5},data:{url:"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec",type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"],binSize:4},mark:"rect",x:{field:"start",type:"genomic",domain:{interval:[0,1e9]},linkingId:"7f94b74e-25ec-4e67-8c75-3dc0f1b0d6bd"},xe:{field:"end",type:"genomic"},row:{field:"sample",type:"nominal",legend:!0},color:{field:"peak",type:"quantitative",legend:!0},tooltip:[{field:"start",type:"genomic",alt:"Start Position"},{field:"end",type:"genomic",alt:"End Position"},{field:"peak",type:"quantitative",alt:"Value",format:".2"},{field:"sample",type:"nominal",alt:"Sample"}],width:130,height:600},theme:{base:"light",root:{background:"white",titleColor:"black",titleBackgroundColor:"transparent",titleFontSize:18,titleFontFamily:"Arial",titleAlign:"left",titleFontWeight:"bold",subtitleColor:"gray",subtitleBackgroundColor:"transparent",subtitleFontSize:16,subtitleFontFamily:"Arial",subtitleFontWeight:"normal",subtitleAlign:"left",mousePositionColor:"#000000"},track:{background:"transparent",alternatingBackground:"transparent",titleColor:"black",titleBackground:"white",titleFontSize:24,titleAlign:"left",outline:"black",outlineWidth:1},legend:{position:"top",background:"white",backgroundOpacity:.7,labelColor:"black",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",backgroundStroke:"#DBDBDB",tickColor:"black"},axis:{tickColor:"black",labelColor:"black",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",baselineColor:"black",gridColor:"#E3E3E3",gridStrokeWidth:1,gridStrokeType:"solid",gridStrokeDash:[4,4]},markCommon:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},point:{color:"#E79F00",size:3,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},rect:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},triangle:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},area:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},line:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},bar:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},rule:{color:"#E79F00",size:1,stroke:"black",strokeWidth:1,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},link:{color:"#E79F00",size:1,stroke:"black",strokeWidth:1,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},text:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6],textAnchor:"middle",textFontWeight:"normal"},brush:{color:"gray",size:1,stroke:"black",strokeWidth:1,opacity:.3,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]}}}}]}],center:[],right:[],bottom:[],gallery:[],whole:[]},initialXDomain:[0,1e9],initialYDomain:[0,1e9],zoomFixed:!1,zoomLimits:[1,null],uid:"154b1b40-f6fb-11eb-914b-976b6ecda162"}],zoomLocks:{locksByViewUid:{},locksDict:{}},locationLocks:{locksByViewUid:{},locksDict:{}},editable:!1,chromInfoPath:"https://s3.amazonaws.com/gosling-lang.org/data/hg38.chrom.sizes"};class FI{constructor(){this.assembly="hg38",this.hg={compactLayout:!1,trackSourceServers:[],views:[],zoomLocks:{locksByViewUid:{},locksDict:{}},locationLocks:{locksByViewUid:{},locksDict:{}}},this.setEditable(!1)}spec(){return this.hg}setViewOrientation(g){return this.orientation=g,this}addDefaultView(g,I){return this.hg.views.push(JSON.parse(JSON.stringify(e(Z({},(g=>({genomePositionSearchBoxVisible:!1,genomePositionSearchBox:{autocompleteServer:"https://higlass.io/api/v1",autocompleteId:"P0PLbQMwTYGy-5uPIQid7A",chromInfoServer:"https://higlass.io/api/v1",chromInfoId:null!=g?g:"hg38"},layout:{w:12,h:12,x:0,y:0},tracks:{top:[],left:[],center:[],right:[],bottom:[],gallery:[],whole:[]},initialXDomain:[0,sI(g).total],initialYDomain:[0,sI(g).total],zoomFixed:!1}))(I)),{uid:g})))),this}setAssembly(g){return this.assembly=g,this.setChromInfoPath(sI(this.assembly).path),this}getAssembly(){return this.assembly}setTextTrack(g,I,C,A="black",l=14,i="normal",c="left",d="transparent",Z="Arial"){var e;return this.getLastView()&&(null==(e=this.getLastView().tracks.top)||e.push({type:"text",width:g,height:I,options:{backgroundColor:d,textColor:A,fontSize:l,fontWeight:i,fontFamily:Z,offsetY:0,align:c,text:C}})),this}addBrush(g,I,C,A,l){var i,c,d,Z,e,m;if(A)return null==(m=this.getView(I))||m.tracks.whole.push({type:"circular"===g?"brush-track":"viewport-projection-horizontal",uid:Y(),fromViewUid:A,options:{projectionFillColor:null!=(i=null==l?void 0:l.color)?i:C.brush.color,projectionStrokeColor:null!=(c=null==l?void 0:l.stroke)?c:C.brush.stroke,projectionFillOpacity:null!=(d=null==l?void 0:l.opacity)?d:C.brush.opacity,projectionStrokeOpacity:null!=(Z=null==l?void 0:l.opacity)?Z:C.brush.opacity,strokeWidth:null!=(e=null==l?void 0:l.strokeWidth)?e:C.brush.strokeWidth,startAngle:null==l?void 0:l.startAngle,endAngle:null==l?void 0:l.endAngle,innerRadius:null==l?void 0:l.innerRadius,outerRadius:null==l?void 0:l.outerRadius}}),this}getLastView(){return this.hg.views[this.hg.views.length-1]}getMainTrackPosition(){return"vertical"===this.orientation?"left":"center"}getLastVisView(){const g=this.hg.views.filter((g=>{var I,C;return"combined"===(null==(C=null==(I=g.tracks[this.getMainTrackPosition()])?void 0:I[0])?void 0:C.type)}));return g[g.length-1]}getView(g){return this.hg.views.find((I=>I.uid===g))}validateSpec(g=!1){return"success"===YI(JI,this.spec(),g).state}setDomain(g,I){return g&&(this.getLastView().initialXDomain=wI(g,this.getAssembly())),I&&(this.getLastView().initialYDomain=wI(I,this.getAssembly())),this}adjustDomain(g="horizontal",I,C){if("vertical"!==g)return this;const A=this.getLastView().initialXDomain;if(!A)return this;const[l,i]=A,c=i-l,d=(l+i)/2;return this.getLastView().initialXDomain=[d-c/I/2/C*I,d+c/I/2/C*I],this}setZoomFixed(g){return this.getLastView().zoomFixed=g,this}setZoomLimits(g){return this.getLastView().zoomLimits=g,this}setLayout(g){return this.getLastView().layout=g,this}setEditable(g){return this.hg.editable=g,this}setChromInfoPath(g){return this.getLastView()&&(this.getLastView().chromInfoPath=g),this.hg.chromInfoPath=g,this}addTrackSourceServers(g){var I,C;return g&&-1===(null==(I=this.hg.trackSourceServers)?void 0:I.indexOf(g))&&(null==(C=this.hg.trackSourceServers)||C.push(g)),this}setMainTrack(g){var I;return this.getLastView()?(this.getLastView().tracks[this.getMainTrackPosition()]=[{type:"combined",uid:`${null!=(I=g.uid)?I:Y()}-${this.getMainTrackPosition()}-combined`,width:g.width-1,height:g.height,contents:[g]}],this):this}addTrackToCombined(g){var I;return this.getLastVisView()?(null==(I=this.getLastVisView().tracks[this.getMainTrackPosition()][0])||I.contents.push(g),this):this}setAxisTrack(g,I="regular",C){var A;if(!this.hg.views)return this;const l="left"===g||"right"===g?"width":"height",i={uid:null!=(A=C.id)?A:w(),type:"axis-track",chromInfoPath:this.hg.chromInfoPath,options:e(Z({},C),{assembly:this.getAssembly(),stroke:"transparent",color:C.theme.axis.labelColor,fontSize:C.theme.axis.labelFontSize,fontFamily:C.theme.axis.labelFontFamily,fontWeight:C.theme.axis.labelFontWeight,tickColor:C.theme.axis.tickColor,tickFormat:"narrower"===I?"si":"plain",tickPositions:"regular"===I?"even":"ends",reverseOrientation:"bottom"===g||"right"===g})};if("circular"===C.layout)this.addTrackToCombined(e(Z({},i),{options:e(Z({},i.options),{layout:"circular"})}));else{const I=e(Z({},i),{[l]:30});if("left"===g){if(0!==this.getLastView().tracks.left.filter((g=>"axis-track"===g.type)).length)return this;this.getLastView().tracks.left=(c=this.getLastView().tracks.left,d=0,m=I,c||(c=[]),[...c.slice(0,d),m,...c.slice(d)])}else if("right"===g){if(0!==this.getLastView().tracks.left.filter((g=>"axis-track"===g.type)).length)return this;this.getLastView().tracks.left.push(I)}else{if(0!==this.getLastView().tracks[g].filter((g=>"axis-track"===g.type)).length)return this;this.getLastView().tracks[g].push(I)}}var c,d,m;return this}setExampleHiglassViewConfig(){this.hg=SI}}function kI(g,I,C,A){const l=A&&0!==A?A:void 0;let i=0;switch(I){case"less-than":case"LT":case"lt":i=C>g?l?(C-g)/l:1:0;break;case"less-than-or-equal-to":case"LTET":case"ltet":i=C>=g?l?(C-g)/l:1:0;break;case"greater-than":case"GT":case"gt":i=C<g?l?(g-C)/l:1:0;break;case"greater-than-or-equal-to":case"GTET":case"gtet":i=C<=g?l?(g-C)/l:1:0}return Math.max(Math.min(1,i),0)}const vI={NOMINAL_COLOR:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],NOMINAL_COLOR_EXTENDED:["#d60000","#018700","#b500ff","#05acc6","#97ff00","#ffa52f","#ff8ec8","#79525e","#00fdcf","#afa5ff","#93ac83","#9a6900","#366962","#d3008c","#fdf490","#c86e66","#9ee2ff","#00c846","#a877ac","#b8ba01","#f4bfb1","#ff28fd","#f2cdff","#009e7c","#ff6200","#56642a","#953f1f","#90318e","#ff3464","#a0e491","#8c9ab1","#829026","#ae083f","#77c6ba","#bc9157","#e48eff","#72b8ff","#c6a5c1","#ff9070","#d3c37c","#bceddb","#6b8567","#916e56","#f9ff00","#bac1df","#ac567c","#ffcd03","#ff49b1","#c15603","#5d8c90","#c144bc","#00753f","#ba6efd","#00d493","#00ff75","#49a150","#cc9790","#00ebed","#db7e01","#f77589","#b89500","#c84248","#00cff9","#755726","#85d401","#ebffd4","#a77b87","#db72c8","#cae256","#8abf5d","#a1216b","#855b89","#89bacf","#ffbad6","#b6cfaa","#97414d","#67aa00","#fde1b1","#ff3628","#80793d","#d6e8ff","#a795c6","#7ea59a","#d182a3","#54823b","#e6a872","#9cffff","#da5480","#05b3aa","#ffaaf6","#d1afef","#da015d","#ac1a13","#60b385","#d442fd","#acaa59","#fb9ca7","#b3723b","#f26952","#aed1d4","#9affc3","#dbb333","#eb01c3","#9900c4","#cfff9e","#a55949","#3b6d01","#008579","#959167","#89dbb3","#6d7400","#aa5dca","#07ef00","#804f3d","#d88052","#ffc862","#b8009e","#99acdd","#904f00","#8c4470","#4f6e52","#ff8734","#c68ecd","#d4e29e","#b1826d","#9cfb75","#56dd77","#f90087","#a1cdff","#13cad1","#118e54","#d154a5","#00dfc3","#a3832f","#77975b","#baaa80","#70a3af","#d6fbff","#e8013a","#d84621","#ff82ed","#b63862","#b6cd72","#97626b","#897490","#00a316","#00f4a1","#bf90f2","#89e4d8","#a34d95","#6e5d00","#8cc68e","#95aa2a","#c672dd","#b33b01","#d69a36","#dfacb6","#009aa0","#599000","#97bca8","#ac8ca8","#dad4ff","#547c72","#00ba69","#ffc38e","#b800d4","#dfcf5b","#629a7b","#bfedbc","#c1bdfd","#80d3dd","#e2857e","#f9eb4d","#bf6d82","#caff4f","#ef72aa","#ed67ff","#9946ae","#6d6942","#e25660","#dd662d","#9cdb5d","#e29ccf","#b87500","#c6002d","#dfbcda","#59b5df","#ff59da","#38c1a1","#9e698c","#acaac8","#95622f","#b55662","#2b7e60","#b1e400","#eda590","#95fde2","#ff548e","#bd6ea1","#aa3b36","#d8cf00","#aa80cd","#a08052","#e100e8","#c35b3d","#b53a85","#8c7700","#dbbc95","#529e93","#afbc82","#91b5b6","#a75423","#ffd4ef","#79ae6b","#5db54b","#80fb9a","#48ffef","#979548","#9387a7","#31d400","#6ee956","#b6d4eb","#705470","#f2db8a","#aad4c1","#7ecdf2","#89ba00","#64b6ba","#ffb500","#c38285","#caaa5e","#647748","#59e2ff","#df4dcd","#e9ff79","#bc66b8","#c395a5","#64c674","#d19570","#70cf4f","#aa6e66","#9c60a5","#00b800","#e299b3","#bc006b","#b3e8ef","#cdbfe4","#77a342","#856277","#568e5b","#9eafc4","#e82fa0","#247c2a","#826723","#bfbc4d","#ddd3a5"],QUANTITATIVE_COLOR:"viridis",SIZE:3,SIZE_RANGE:[2,6]};var NI,fI;function zI(g="light"){if("string"==typeof g)return z(g)?x(g):"dark"===g||"light"===g?MI[g]:MI.light;{let I=JSON.parse(JSON.stringify(MI.light));return z(g.base)?I=x(g.base):"light"!==g.base&&"dark"!==g.base||(I=JSON.parse(JSON.stringify(MI[g.base]))),Object.keys(I).forEach((C=>{g[C]&&"base"!==C&&(I[C]=u(JSON.parse(JSON.stringify(I[C])),JSON.parse(JSON.stringify(g[C]))))})),I}}(fI=NI||(NI={})).light="light",fI.dark="dark";const xI={color:vI.NOMINAL_COLOR[0],size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:vI.NOMINAL_COLOR,quantitativeSizeRange:[2,6]},UI=e(Z({},xI),{stroke:"white"}),MI={light:{base:"light",root:{background:"white",titleColor:"black",titleBackgroundColor:"transparent",titleFontSize:18,titleFontFamily:"Arial",titleAlign:"left",titleFontWeight:"bold",subtitleColor:"gray",subtitleBackgroundColor:"transparent",subtitleFontSize:16,subtitleFontFamily:"Arial",subtitleFontWeight:"normal",subtitleAlign:"left",showMousePosition:!0,mousePositionColor:"#000000"},track:{background:"transparent",alternatingBackground:"transparent",titleColor:"black",titleBackground:"white",titleFontSize:24,titleAlign:"left",outline:"black",outlineWidth:1},legend:{position:"top",background:"white",backgroundOpacity:.7,labelColor:"black",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",backgroundStroke:"#DBDBDB",tickColor:"black"},axis:{tickColor:"black",labelColor:"black",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",baselineColor:"black",gridColor:"#E3E3E3",gridStrokeWidth:1,gridStrokeType:"solid",gridStrokeDash:[4,4]},markCommon:Z({},xI),point:e(Z({},xI),{size:3}),rect:Z({},xI),triangle:Z({},xI),area:Z({},xI),line:Z({},xI),bar:Z({},xI),rule:e(Z({},xI),{strokeWidth:1}),link:e(Z({},xI),{strokeWidth:1}),text:e(Z({},xI),{textAnchor:"middle",textFontWeight:"normal"}),brush:e(Z({},xI),{color:"gray",opacity:.3,stroke:"black",strokeWidth:1})},dark:{base:"dark",root:{background:"black",titleColor:"white",titleBackgroundColor:"transparent",titleFontSize:18,titleFontFamily:"Arial",titleAlign:"middle",titleFontWeight:"bold",subtitleColor:"lightgray",subtitleBackgroundColor:"transparent",subtitleFontSize:16,subtitleFontFamily:"Arial",subtitleAlign:"middle",subtitleFontWeight:"normal",showMousePosition:!0,mousePositionColor:"#FFFFFF"},track:{background:"transparent",alternatingBackground:"transparent",titleColor:"white",titleBackground:"black",titleFontSize:18,titleAlign:"left",outline:"white",outlineWidth:1},legend:{position:"right",background:"black",backgroundOpacity:.7,labelColor:"white",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",backgroundStroke:"#DBDBDB",tickColor:"white"},axis:{tickColor:"white",labelColor:"white",labelFontSize:10,labelFontWeight:"normal",labelFontFamily:"Arial",baselineColor:"white",gridColor:"gray",gridStrokeWidth:1,gridStrokeType:"solid",gridStrokeDash:[4,4]},markCommon:Z({},UI),point:e(Z({},UI),{size:3}),rect:Z({},UI),triangle:Z({},UI),area:Z({},UI),line:Z({},UI),bar:Z({},UI),rule:e(Z({},UI),{strokeWidth:1}),link:e(Z({},UI),{strokeWidth:1}),text:e(Z({},UI),{textAnchor:"middle",textFontWeight:"normal"}),brush:e(Z({},UI),{color:"lightgray",opacity:.3,stroke:"white",strokeWidth:1})}};class LI{constructor(g,I,C){this.id=w(),this.theme=null!=C?C:zI(),this.dataOriginal=JSON.parse(JSON.stringify(I)),this.dataAggregated=JSON.parse(JSON.stringify(I)),this.specOriginal=JSON.parse(JSON.stringify(g)),this.specComplete=JSON.parse(JSON.stringify(g)),this.channelScales={};const A=this.validateSpec();A.valid?(this.generateCompleteSpec(this.specComplete),this.flipRanges(this.specComplete),this.generateScales(),this.dataAggregated=WI(this.spec(),this.dataAggregated)):console.warn("Gosling specification is not valid!",A.errorMessages)}getId(){return this.id}getRenderingId(){var g;return null!=(g=this.spec()._renderingId)?g:this.getId()}originalSpec(){return this.specOriginal}spec(){return this.specComplete}data(){return this.dataAggregated}generateCompleteSpec(g){if(!g.width||!g.height)return void console.warn("Size of track is not determined yet.");if("vertical"===g.orientation){const I=g.width;g.width=g.height,g.height=I}const I=this.getGenomicChannelKey();let C=!1;"x"===I&&(C=Dg(g.x)&&void 0!==g.x.axis&&"none"!==g.x.axis),"y"===I&&(C=Dg(g.y)&&void 0!==g.y.axis&&"none"!==g.y.axis),"circular"!==g.layout?Dg(g.x)&&void 0!==g.x.axis&&"none"!==g.x.axis&&(g.height-=30):"x"===I&&C&&Dg(g.x)&&"top"===g.x.axis?g.outerRadius=g.outerRadius-30:"x"===I&&C&&Dg(g.x)&&"bottom"===g.x.axis&&(g.innerRadius=g.innerRadius+30),wg.forEach((I=>{const C=g[I];Dg(C)&&!("zeroBaseline"in C)&&"quantitative"===C.type&&(C.zeroBaseline=!0)})),this.addScaleMaterials(g)}flipRanges(g){Dg(g.y)&&g.y.flip&&Array.isArray(g.y.range)&&(g.y.range=g.y.range.reverse())}getGenomicChannelKey(){return rI(this.spec())}getGenomicChannel(){return RI(this.spec())}setChannelDomain(g,I,C){const A=this.originalSpec()[g];if(!C&&Dg(A)&&void 0!==A.domain)return;const l=this.specComplete[g];Dg(l)&&(l.domain=I)}setChannelRange(g,I){const C=this.specComplete[g];Dg(C)&&(C.range=I)}updateChannelValue(){if(void 0===this.originalSpec().y){const g=this.spec().y,I=this.getChannelDomainArray("row");g&&Lg(g)&&I&&(g.value=this.spec().height/I.length/2)}}encodedValue(g,I){if("text"===g&&void 0!==I)return`${+I?~~I:I}`;const C=this.spec()[g],A=Dg(C)?C.type:Lg(C)?"constant":void 0;if(A){if("constant"===A)return this.channelScales[g]();if(void 0!==I&&"function"==typeof this.channelScales[g])switch(g){case"x":case"y":case"x1":case"y1":case"xe":case"ye":case"x1e":if("quantitative"===A||"genomic"===A)return this.channelScales[g](I);if("nominal"===A)return this.channelScales[g](I);break;case"color":case"stroke":case"size":if("quantitative"===A)return this.channelScales[g](I);if("nominal"===A)return this.channelScales[g](I);break;case"row":if("nominal"===A)return this.channelScales[g](I);break;case"strokeWidth":case"opacity":if("quantitative"===A)return this.channelScales[g](I);break;default:return void console.warn(`${g} is not supported for encoding values, so returning a undefined value`)}}}trackVisibility(g){const I=this.spec();if(!I.visibility||0===I.visibility.length||0===I.visibility.filter((g=>"track"===g.target)).length)return!0;let C=!0;return I.visibility.filter((g=>"track"===g.target)).forEach((A=>{const{operation:l,measure:i,threshold:c}=A;let d;d="zoomLevel"===i?g[i]:I[i],void 0!==d&&(C=C&&1===kI(d,l,c))})),C}markVisibility(g,I){const C=this.spec();if(!C.visibility||0===C.visibility.length||0===C.visibility.filter((g=>"mark"===g.target)).length)return 1;let A=1;return C.visibility.filter((g=>"mark"===g.target)).forEach((l=>{const{operation:i,threshold:c,conditionPadding:d,transitionPadding:Z,measure:e}=l,m=null!=d?d:0;let o=1;if("text"===C.mark&&"|xe-x|"===c&&"width"===e){const C=this.encodedPIXIProperty("xe",g),A=this.encodedPIXIProperty("x",g);void 0!==C&&(null==I?void 0:I.width)&&(o=kI(I.width+m,i,Math.abs(C-A),Z))}else"width"===e&&"number"==typeof c&&(null==I?void 0:I.width)?o=kI(I.width+m,i,c,Z):"zoomLevel"===e&&"number"==typeof c&&(null==I?void 0:I.zoomLevel)&&(o=kI(I.zoomLevel,i,c,Z));A>o&&(A=o)})),A}visualPropertyByChannel(g,I){const C=void 0!==I?Pg(I,this.spec()[g]):void 0;return this.encodedValue(g,C)}encodedPIXIProperty(g,I,C){const A=this.spec().mark;if(["text","color","row","stroke","opacity","strokeWidth","x","y","xe","x1","x1e","ye","size"].includes(g))return this.visualPropertyByChannel(g,I);switch(A){case"bar":return function(g,I,C,A){const l=g.visualPropertyByChannel("x",C),i=g.visualPropertyByChannel("xe",C),c=g.visualPropertyByChannel("size",C);switch(I){case"width":return null!=c?c:i?i-l:null==A?void 0:A.tileUnitWidth;case"x-start":if(!(null==A?void 0:A.markWidth))return;return i?(l+i-(null==A?void 0:A.markWidth))/2:l-(null==A?void 0:A.markWidth)/2;default:return}}(this,g,I,C);case"point":case"text":return function(g,I,C){const A=g.visualPropertyByChannel("xe",C),l=g.visualPropertyByChannel("x",C),i=g.visualPropertyByChannel("size",C);switch(I){case"x-center":return A?(A+l)/2:l;case"y-center":const I=g.visualPropertyByChannel("ye",C),c=g.visualPropertyByChannel("y",C);return I?(I+c)/2:c;case"p-size":return A&&g.spec().stretch?(A-l)/2:i;default:return}}(this,g,I);case"rect":return function(g,I,C,A){var l;switch(I){case"width":const I=g.visualPropertyByChannel("xe",C)?g.visualPropertyByChannel("xe",C)-g.visualPropertyByChannel("x",C):null==A?void 0:A.markWidth;return 0===I?.1:I;case"height":return null!=(l=g.visualPropertyByChannel("size",C))?l:null==A?void 0:A.markHeight;default:return}}(this,g,I,C);default:return}}addScaleMaterials(g){const I=this.data(),C=this.getGenomicChannel();C&&C.field?g.width&&g.height?(wg.forEach((A=>{var l,i,c,d;const Z=g[A];if(function(g,I){const C=g[I];return Og(g)&&("x"===I||"y"===I)&&Dg(C)&&"quantitative"===C.type}(g,A)&&Dg(Z)){const i=b(I,(g=>g[C.field])),c=[...i.keys()];if(!Z.domain){const g="zeroBaseline"in Z&&Z.zeroBaseline?0:s(c.map((g=>U(i.get(g).map((g=>Z.field?g[Z.field]:void 0)))))),I=a(c.map((g=>U(i.get(g).map((g=>Z.field?g[Z.field]:void 0))))));Z.domain=[g,I]}if(!Z.range){const C=g.row,i=Dg(C)?C.field:void 0,c=null!=(l=this.getChannelDomainArray("row"))?l:i?Array.from(new Set(I.map((g=>g[i])))):[1],d=g.height/c.length;switch(A){case"x":Z.range=[0,g.width];break;case"y":Z.range=[0,d]}}}else{const C=g.row,l=Dg(C)?C.field:void 0,e=null!=(i=this.getChannelDomainArray("row"))?i:l?Array.from(new Set(I.map((g=>g[l])))):[1],m=g.height/e.length;if(Z)if(!Dg(Z)||"quantitative"!==Z.type&&"genomic"!==Z.type){if(Dg(Z)&&"nominal"===Z.type&&(void 0===Z.domain&&(Z.domain=Array.from(new Set(I.map((g=>g[Z.field]))))),!Z.range)){let I,C=2;switch(A){case"x":case"xe":I=[0,g.width];break;case"y":case"ye":I=[m,0];break;case"color":case"stroke":I=this.theme.markCommon.nominalColorRange;break;case"row":I=[0,g.height];break;case"size":I=Z.domain.map((()=>C++))}I&&(Z.range=I)}}else{if(void 0===Z.domain){const g="zeroBaseline"in Z&&Z.zeroBaseline?0:null!=(c=s(I.map((g=>+g[Z.field]))))?c:0,C=null!=(d=a(I.map((g=>+g[Z.field]))))?d:0;Z.domain=[g,C]}else"genomic"!==Z.type||Qg(Z.domain)||(Z.domain=wI(Z.domain));if(!Z.range){let I;switch(A){case"x":case"xe":case"x1":case"x1e":I=[0,g.width];break;case"y":case"ye":I=[0,m];break;case"color":case"stroke":I=vI.QUANTITATIVE_COLOR;break;case"size":I=this.theme.markCommon.quantitativeSizeRange;break;case"strokeWidth":I=[1,3];break;case"opacity":I=[0,1]}I&&(Z.range=I)}}else{let I;switch(A){case"x":I=g.width/2;break;case"y":I=m/2;break;case"size":I="line"===g.mark?this.theme.line.size:"bar"===g.mark||"rect"===g.mark||"triangleRight"===g.mark||"triangleLeft"===g.mark||"triangleBottom"===g.mark||g.stretch&&"point"===g.mark&&Dg(g.x)&&Dg(g.xe)?void 0:"text"===g.mark?12:this.theme.point.size;break;case"color":I=this.theme.markCommon.color;break;case"row":I=0;break;case"stroke":I="text"===g.mark?this.theme.text.stroke:this.theme.markCommon.stroke;break;case"strokeWidth":I="rule"===g.mark?this.theme.rule.strokeWidth:"withinLink"===g.mark||"betweenLink"===g.mark?this.theme.link.strokeWidth:"text"===g.mark?this.theme.text.strokeWidth:this.theme.markCommon.strokeWidth;break;case"opacity":I=this.theme.markCommon.opacity;break;case"text":I=""}void 0!==I&&(g[A]={value:I})}}})),[["x","xe"],["y","ye"]].forEach((I=>{const[C,A]=I,l=g[C],i=g[A];if(Dg(l)&&Dg(i)&&l.type===i.type&&l.domain&&i.domain&&Array.isArray(l.domain)&&Array.isArray(i.domain))if("genomic"===l.type||"quantitative"===l.type){const g=s([l.domain[0],i.domain[0]]),I=a([l.domain[1],i.domain[1]]);l.domain=i.domain=[g,I]}else if("nominal"===l.type){const g=Array.from(new Set([...l.domain,...i.domain]));l.range=i.range=g}}))):console.warn("Track size is not determined yet"):console.warn("Genomic field is not provided in the specification")}generateScales(){const g=this.spec();wg.forEach((I=>{const C=g[I];if(Lg(C))this.channelScales[I]=()=>C.value;else if(Dg(C)){if("text"===I)return;const g=C.domain,A=C.range;if(void 0===g||void 0===A)return;if("quantitative"===C.type||"genomic"===C.type)switch(I){case"x":case"x1":case"xe":case"x1e":case"y":case"ye":case"size":case"opacity":case"strokeWidth":this.channelScales[I]=n().domain(g).range(A);break;case"color":case"stroke":let C=X;Object.keys(vg).includes(A)&&(C=vg[A]),this.channelScales[I]=M(C).domain(g)}else if("nominal"===C.type)switch(I){case"x":case"xe":case"y":case"ye":case"row":this.channelScales[I]=T().domain(g).range(A);break;case"size":this.channelScales[I]=L().domain(g).range(A);break;case"color":case"stroke":this.channelScales[I]=L(A).domain(g)}}}))}getChannelScale(g){return this.channelScales[g]}setChannelScale(g,I){this.channelScales[g]=I}addDataRows(g){this.dataAggregated=[...this.dataAggregated,...g]}isShowYAxis(){const g=this.spec(),I=this.getChannelDomainArray("y"),C=this.getChannelRangeArray("y");return Dg(g.y)&&"none"!==g.y.axis&&"quantitative"===g.y.type&&!!I&&!!C}getChannelDomainArray(g){const I=this.spec()[g];return Dg(I)&&Qg(I.domain)?I.domain:void 0}getChannelRangeArray(g){const I=this.spec()[g];return Dg(I)&&(C=I.range,y(C))?I.range:void 0;var C}validateSpec(){return KI(this.originalSpec())}}class TI{constructor(g,I,C){this.worker=C,this.dataConfig=I,this.uid=g.libraries.slugid.nice(),this.assembly="hg38",this.fetchTimeout=null,this.toFetch=new Set,this.initPromise=this.worker.then((g=>{var C;return I.url&&!I.bamUrl&&(I.bamUrl=I.url),I.baiUrl||(I.baiUrl=null!=(C=I.indexUrl)?C:`${I.bamUrl}.bai`),g.init(this.uid,I).then((()=>this.worker))}))}tilesetInfo(g){this.worker.then((I=>{I.tilesetInfo(this.uid).then(g)}))}fetchTilesDebounced(g,I){const{toFetch:C}=this;if(I[0].split(".")[0]!==(C.size?[...C][0].split(".")[0]:null)){for(const g of this.toFetch)this.track.fetching.delete(g);this.toFetch.clear()}I.forEach((g=>this.toFetch.add(g))),this.fetchTimeout&&clearTimeout(this.fetchTimeout),this.fetchTimeout=setTimeout((()=>{this.sendFetch(g,[...this.toFetch]),this.toFetch.clear()}),200)}sendFetch(g,I){this.worker.then((C=>{C.fetchTilesDebounced(this.uid,I).then(g)}))}}const DI="",QI="undefined"!=typeof window&&window.Blob&&new Blob([atob(DI)],{type:"text/javascript;charset=utf-8"});function OI(){const g=QI&&(window.URL||window.webkitURL).createObjectURL(QI);try{return g?new Worker(g):new Worker("data:application/javascript;base64,"+DI,{type:"module"})}finally{g&&(window.URL||window.webkitURL).revokeObjectURL(g)}}function PI(g){var I;return"bam"===(null==(I=g.data)?void 0:I.type)}function jI(g,...I){if(!new.target)throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');const{tileProxy:C}=g.services,{showMousePosition:A}=g.utils;class l extends g.tracks.BarTrack{constructor(I){var C,l,i,c,d;const[m,o]=I;let b;if(PI(o.spec))try{b=D(new OI),m.dataFetcher=new TI(g,m.dataConfig,b)}catch(t){console.warn("Error loading worker",t)}super(m,o),this.worker=b,m.dataFetcher.track=this,this.context=m,"overlay"in this.options.spec?this.options.spec.overlay=this.options.spec.overlay.map((g=>e(Z({},g),{_renderingId:w()}))):this.options.spec._renderingId=w(),this.tileSize=null!=(l=null==(C=this.tilesetInfo)?void 0:C.tile_size)?l:1024,this.drawnAtScale=g.libraries.d3Scale.scaleLinear(),this.scalableGraphics={};const{valid:a,errorMessages:s}=KI(this.options.spec);a||console.warn("The specification of the following track is invalid",s,this.options.spec),this.extent={min:Number.MAX_SAFE_INTEGER,max:Number.MIN_SAFE_INTEGER},this.mouseOverGraphics=new g.libraries.PIXI.Graphics,this.pMain.addChild(this.mouseOverGraphics),this.pMask.interactive=!0,this.pMask.mousedown=g=>this.onMouseDown(g.data.getLocalPosition(this.pMain).x,g.data.getLocalPosition(this.pMain).y),this.pMask.mouseup=g=>this.onClick(g.data.getLocalPosition(this.pMain).x,g.data.getLocalPosition(this.pMain).y),this.pMask.mousemove=()=>this.onMouseOut(),this.flipText="vertical"===this.options.spec.orientation,this.hideMousePosition&&(this.hideMousePosition(),this.hideMousePosition=void 0),(null==(i=this.options)?void 0:i.showMousePosition)&&!this.hideMousePosition&&(this.hideMousePosition=A(this,Mg(qg(this.options.spec)[0]),this.isShowGlobalMousePosition())),this.loadingText=new g.libraries.PIXI.Text("",{fontSize:"18px",fontFamily:"Arial",fill:"gray",fontWeight:"bold"}),this.loadingText.anchor.x=.5,this.loadingText.anchor.y=.5,this.pLabel.addChild(this.loadingText),this.tooltips=[],this.svgData=[],this.textGraphics=[],this.textsBeingUsed=0,g.libraries.PIXI.GRAPHICS_CURVES.adaptive=null!=(d=null==(c=this.options.spec.style)?void 0:c.enableSmoothPath)&&d,g.libraries.PIXI.GRAPHICS_CURVES.adaptive&&(g.libraries.PIXI.GRAPHICS_CURVES.maxLength=1,g.libraries.PIXI.GRAPHICS_CURVES.maxSegments=20480)}draw(){var g;this.tooltips=[],this.svgData=[],this.textsBeingUsed=0,null==(g=this.mouseOverGraphics)||g.clear();const I=()=>{this.preprocessAllTiles(),super.draw(),this.prevVisibleAndFetchedTiles=this.visibleAndFetchedTiles(),this.drawLoading(!1)};PI(this.options.spec)&&!Q(this.visibleAndFetchedTiles(),this.prevVisibleAndFetchedTiles)?this.updateTileAsync(I):I()}initTile(g){this.drawTile(g)}updateTile(){}renderTile(){}drawTile(I){if(I.drawnAtScale=this._xScale.copy(),I.goslingModels){if(I.graphics.clear(),I.graphics.removeChildren(),I.goslingModels&&I.goslingModels[0]){const C=I.goslingModels[0],A=this.dimensions[1],l=this._xScale.invert(A)-this._xScale.invert(0);if(!C.trackVisibility({zoomLevel:l}))return;Fg(g,this,I,C,this.options.theme)}if(I.goslingModels.forEach((C=>{const A=this.dimensions[1],l=this._xScale.invert(A)-this._xScale.invert(0);C.trackVisibility({zoomLevel:l})&&Sg(g,this,I,C)})),I.goslingModels&&I.goslingModels[0]){const C=I.goslingModels[0],A=this.dimensions[1],l=this._xScale.invert(A)-this._xScale.invert(0);if(!C.trackVisibility({zoomLevel:l}))return;kg(g,this,I,C,this.options.theme)}this.forceDraw()}}rerender(g){this.options=g,this.tooltips=[],this.svgData=[],this.textsBeingUsed=0,this.preprocessAllTiles(!0),this.draw(),this.forceDraw()}setDimensions(g){this.oldDimensions=this.dimensions,super.setDimensions(g)}setPosition(g){super.setPosition(g),[this.pMain.position.x,this.pMain.position.y]=this.position}forceDraw(){this.animate()}zoomed(g,I){this.xScale(g),this.yScale(I),this.refreshTiles(),this.draw(),this.forceDraw()}updateTileAsync(I){this.xDomain=this._xScale.domain(),this.xRange=this._xScale.range(),this.drawLoading(),this.trackNotFoundText.text="",this.worker.then((C=>{C.getTabularData(this.dataFetcher.uid,Object.values(this.fetchedTiles).map((g=>g.remoteId))).then((C=>{const A=this.visibleAndFetchedTiles(),l=JSON.parse(Buffer.from(C).toString());if(null==A?void 0:A[0]){const I=A[0];I.tileData.tabularData=l;const[C]=g.utils.trackUtils.calculate1DVisibleTiles(this.tilesetInfo,this._xScale);I.tileData.zoomLevel=C[0],I.tileData.tilePos=[C[1]]}I()}))}))}scaleScalableGraphics(g,I,C){const A=(C.domain()[1]-C.domain()[0])/(I.domain()[1]-I.domain()[0]),l=I.domain().map(C)[0];g.forEach((g=>{g.scale.x=A,g.position.x=-l*A}))}visibleAndFetchedIds(){return Object.keys(this.fetchedTiles).filter((g=>this.visibleTileIds.has(g)))}visibleAndFetchedTiles(){return this.visibleAndFetchedIds().map((g=>this.fetchedTiles[g]))}calculateVisibleTiles(){if(PI(this.options.spec)){const I=g.utils.trackUtils.calculate1DVisibleTiles(this.tilesetInfo,this._xScale);for(const g of I){const{tileWidth:I}=this.getTilePosAndDimensions(g[0],[g[1]],this.tilesetInfo.tile_size),C=2e4;if(I>(this.tilesetInfo.max_tile_width||C))return void this.forceDraw();this.forceDraw()}this.setVisibleTiles(I)}else{if(!this.tilesetInfo)return;if(this.zoomLevel=this.calculateZoomLevel(),this.tilesetInfo.resolutions){const g=this.tilesetInfo.resolutions.map((g=>+g)).sort(((g,I)=>I-g));this.xTiles=C.calculateTilesFromResolution(g[this.zoomLevel],this._xScale,this.tilesetInfo.min_pos[0],this.tilesetInfo.max_pos[0]),Mg(qg(this.options.spec)[0])&&C.calculateTilesFromResolution(g[this.zoomLevel],this._yScale,this.tilesetInfo.min_pos[0],this.tilesetInfo.max_pos[0]);const I=this.tilesToId(this.xTiles,this.yTiles,this.zoomLevel);this.setVisibleTiles(I)}else{this.xTiles=C.calculateTiles(this.zoomLevel,this.relevantScale(),this.tilesetInfo.min_pos[0],this.tilesetInfo.max_pos[0],this.tilesetInfo.max_zoom,this.tilesetInfo.max_width),Mg(qg(this.options.spec)[0])&&(this.yTiles=C.calculateTiles(this.zoomLevel,this._yScale,this.tilesetInfo.min_pos[1],this.tilesetInfo.max_pos[1],this.tilesetInfo.max_zoom,this.tilesetInfo.max_width1||this.tilesetInfo.max_width));const g=this.tilesToId(this.xTiles,this.yTiles,this.zoomLevel);this.setVisibleTiles(g)}}}getTilePosAndDimensions(g,I,C){const A=C||this.tilesetInfo.bins_per_dimension||256;if(this.tilesetInfo.resolutions){const C=this.tilesetInfo.resolutions.map((g=>+g)).sort(((g,I)=>I-g))[g],l=C*A,i=l;return{tileX:C*A*I[0],tileY:C*A*I[1],tileWidth:l,tileHeight:i}}{const C=I[0],A=I[1],l=this.tilesetInfo.min_pos[0],i=this.options.reverseYAxis?-this.tilesetInfo.max_pos[1]:this.tilesetInfo.min_pos[1],c=this.tilesetInfo.max_width/2**g,d=this.tilesetInfo.max_width/2**g;return{tileX:l+C*c,tileY:i+A*d,tileWidth:c,tileHeight:d}}}tilesToId(g,I,C){if(g&&!I)return g.map((g=>[C,g]));{const A=[];return g.forEach((g=>I.forEach((I=>A.push([C,g,I]))))),A}}drawLoading(g=!0){}reorganizeTileInfo(){var g,I;const C=this.visibleAndFetchedTiles();this.tileSize=null!=(I=null==(g=this.tilesetInfo)?void 0:g.tile_size)?I:1024,C.forEach((g=>{g.gos={};Object.keys(g.tileData).filter((g=>!+g&&"0"!==g)).forEach((I=>{g.gos[I]=g.tileData[I]})),g.gos.raw=Array.from(g.tileData)}))}shouldCombineTiles(){var g,I,C,A,l,i;return(null==(g=this.options.spec.dataTransform)?void 0:g.find((g=>"displace"===g.type)))&&(null==(C=null==(I=this.visibleAndFetchedTiles())?void 0:I[0])?void 0:C.tileData)&&!(null==(l=null==(A=this.visibleAndFetchedTiles())?void 0:A[0])?void 0:l.tileData.dense)||"bam"===(null==(i=this.options.spec.data)?void 0:i.type)}combineAllTilesIfNeeded(){var g,I,C;if(!this.shouldCombineTiles())return;const A=this.visibleAndFetchedTiles();if(!A||0===A.length)return;this.tileSize=(null!=(I=null==(g=this.tilesetInfo)?void 0:g.tile_size)?I:1024)*A.length;let l=[];A.forEach(((g,I)=>{l=[...l,...g.tileData],g.mergedToAnotherTile=0!==I})),A[0].gos.raw=l,(null==(C=A[0].gos.raw[0])?void 0:C.uid)&&(A[0].gos.raw=O(A[0].gos.raw,"uid"))}preprocessAllTiles(g=!1){const I=[];this.reorganizeTileInfo(),this.combineAllTilesIfNeeded(),this.visibleAndFetchedTiles().forEach((C=>{g&&(C.goslingModels=[]);const A=this.preprocessTile(C);null==A||A.forEach((g=>{I.push(g)}))})),function(g,I){const C={},A=wg;g.forEach((g=>{A.forEach((I=>{const A=g.spec()[I];if(!Dg(A)||void 0===A.domain)return;const{domain:l,type:i}=A;if("quantitative"===i){const g=Array.from(l);C[I]?(C[I][0]>g[0]&&(C[I][0]=g[0]),C[I][1]<g[1]&&(C[I][1]=g[1])):C[I]=g}else if("nominal"===i){const g=Array.from(l);C[I]?C[I]=Array.from(new Set([...C[I],...g])):C[I]=g}}))})),g.forEach((g=>{A.forEach((A=>{const l=g.spec()[A];Dg(l)&&"genomic"===l.type||(g.setChannelDomain(A,C[A],I),g.generateScales())})),g.updateChannelValue()}))}(I);const C=[].concat(...I.map((g=>g.data())));0!==C.length&&P.publish("rawdata",{id:this.options.spec.id,data:C})}preprocessTile(g){if(g.mergedToAnotherTile)return void(g.goslingModels=[]);if(g.goslingModels&&0!==g.goslingModels.length)return g.goslingModels;g.goslingModels=[];return qg(JSON.parse(JSON.stringify(this.options.spec))).forEach((I=>{if("brush"===I.mark)return;if("matrix"===I.data.type)return;if(!g.gos.tabularData){const{tileX:C,tileWidth:A}=this.getTilePosAndDimensions(g.gos.zoomLevel,g.gos.tilePos,this.tileSize);g.gos.tabularData=function(g,I){var C,A,l,i,c,d,m;const o=[];if(Tg(g.data)){if("vector"===g.data.type||"bigwig"===g.data.type){if(!g.data.column||!g.data.value)return void console.warn("Proper data configuration is not provided. Please specify the name of data fields.");if(!I.dense)return;const i=null!=(C=g.data.binSize)?C:1,c=I.dense,d=I.tileSize,Z=I.tileWidth/I.tileSize,e=g.data.value,m=g.data.column,b=null!=(A=g.data.start)?A:"start",a=null!=(l=g.data.end)?l:"end",s=`${e}_min`,t=`${e}_max`;let n=0,V=Number.MAX_SAFE_INTEGER,y=Number.MIN_SAFE_INTEGER,X=Number.MIN_SAFE_INTEGER,G=Number.MAX_SAFE_INTEGER;Array.from(Array(d).keys()).forEach(((g,C)=>{if(1===i){const g=c[C]/Z;o.push({[e]:g,[m]:I.tileX+(C+.5)*Z,[b]:I.tileX+C*Z,[a]:I.tileX+(C+1)*Z,[s]:g,[t]:g})}else if(C%i==0)n=V=y=c[C],X=C,G=C+i;else if(C%i==i-1)o.push({[e]:n/i/Z,[m]:I.tileX+(X+i/2)*Z,[b]:I.tileX+X*Z,[a]:I.tileX+G*Z,[s]:V,[t]:y});else if(C===d-1){const g=d%i,C=X+g;o.push({[e]:n/g/Z,[m]:I.tileX+(X+g/2)*Z,[b]:I.tileX+X*Z,[a]:I.tileX+C*Z,[s]:V,[t]:y})}else n+=c[C],V>c[C]&&(V=c[C]),y<c[C]&&(y=c[C])}))}else if("multivec"===g.data.type){if(!g.data.row||!g.data.column||!g.data.value)return void console.warn("Proper data configuration is not provided. Please specify the name of data fields.");if(!I.dense||void 0===I.shape)return;const C=null!=(i=g.data.binSize)?i:1,A=I.shape[0],l=null!=(c=g.data.categories)?c:[...Array(A).keys()],Z=I.dense,e=I.shape[1],b=I.tileWidth/I.tileSize,a=g.data.row,s=g.data.value,t=g.data.column,n=null!=(d=g.data.start)?d:"start",V=null!=(m=g.data.end)?m:"end",y=`${s}_min`,X=`${s}_max`;l.forEach(((g,A)=>{let l=0,i=Number.MIN_SAFE_INTEGER,c=Number.MAX_SAFE_INTEGER,d=Number.MAX_SAFE_INTEGER,m=Number.MIN_SAFE_INTEGER;Array.from(Array(e).keys()).forEach(((G,B)=>{if(1===C){const C=Z[e*A+B]/b;o.push({[a]:g,[s]:C,[t]:I.tileX+(B+.5)*b,[n]:I.tileX+B*b,[V]:I.tileX+(B+1)*b,[y]:C,[X]:C})}else if(B%C==0)l=d=m=Z[e*A+B],i=B,c=B+C;else if(B%C==C-1)o.push({[a]:g,[s]:l/C/b,[t]:I.tileX+(i+C/2)*b,[n]:I.tileX+i*b,[V]:I.tileX+c*b,[y]:d,[X]:m});else if(B===e-1){const A=e%C,c=i+A;o.push({[a]:g,[s]:l/A/b,[t]:I.tileX+(i+A/2)*b,[n]:I.tileX+i*b,[V]:I.tileX+c*b,[y]:d,[X]:m})}else{const g=Z[e*A+B];l+=g,d>g&&(d=g),m<g&&(m=g)}}))}))}else if("beddb"===g.data.type){if(!I.raw)return;const{genomicFields:C,exonIntervalFields:A,valueFields:l}=g.data;I.raw.forEach((g=>{const{chrOffset:I,fields:i}=g,c={};if(C.forEach((g=>{c[g.name]=+i[g.index]+I})),null==l||l.forEach((g=>{c[g.name]="quantitative"===g.type?+i[g.index]:i[g.index]})),o.push(e(Z({},c),{type:"gene"})),A){const[g,C]=A,l=i[g.index].split(","),d=i[C.index].split(",");l.forEach(((A,i)=>{const m=d[i];if(o.push(e(Z({},c),{[g.name]:+A+I,[C.name]:+m+I,type:"exon"})),i+1<l.length){const A=l[i+1];o.push(e(Z({},c),{[g.name]:+m+I,[C.name]:+A+I,type:"intron"}))}}))}}))}else g.data.type;return o}console.warn("No data is specified")}(I,e(Z({},g.gos),{tileX:C,tileWidth:A,tileSize:this.tileSize}))}g.gos.tabularDataFiltered=Array.from(g.gos.tabularData),I.dataTransform&&I.dataTransform.forEach((C=>{switch(C.type){case"filter":g.gos.tabularDataFiltered=BI(C,g.gos.tabularDataFiltered);break;case"concat":g.gos.tabularDataFiltered=function(g,I){const{fields:C,separator:A,newField:l}=g;let i=Array.from(I);return i=i.map((g=>{const I=C.map((I=>g[I]));return g[l]=I.join(A),g})),i}(C,g.gos.tabularDataFiltered);break;case"replace":g.gos.tabularDataFiltered=function(g,I){const{field:C,replace:A,newField:l}=g;let i=Array.from(I);return i=i.map((g=>(g[l]=g[C],A.forEach((I=>{const{from:C,to:A}=I;g[l]=g[l].toString().replaceAll(C,A)})),g))),i}(C,g.gos.tabularDataFiltered);break;case"log":g.gos.tabularDataFiltered=function(g,I){const{field:C,base:A,newField:l}=g;let i=Array.from(I);return i=i.map((g=>(+g[C]&&(g[null!=l?l:C]="e"===A?Math.log(+g[C]):Math.log(+g[C])/Math.log(null!=A?A:10)),g))),i}(C,g.gos.tabularDataFiltered);break;case"exonSplit":g.gos.tabularDataFiltered=function(g,I,C="hg38"){const{separator:A,fields:l,flag:i}=g;let c=Array.from(I);return c=c.map((g=>{const I=[];return l.forEach((l=>{const{field:c,type:d,newField:Z,chrField:e}=l;g[c].toString().split(A).forEach(((A,l)=>{let c=A;"genomic"===d&&(c=sI(C).interval[g[e]][0]+ +A),I[l]?I[l][Z]=c:I[l]=u(JSON.parse(JSON.stringify(g)),{[Z]:c,[i.field]:i.value})}))})),[g,...I]})).reduce(((g,I)=>g.concat(I)),[]),c}(C,g.gos.tabularDataFiltered,I.assembly);break;case"genomicLength":g.gos.tabularDataFiltered=function(g,I){const{startField:C,endField:A,newField:l}=g,i=Array.from(I);return i.forEach((g=>{const I=g[C],i=g[A];I&&i&&(g[l]=Math.abs(+i-+I))})),i}(C,g.gos.tabularDataFiltered);break;case"coverage":g.gos.tabularDataFiltered=function(g,I,C){const{startField:A,endField:l,newField:i,groupField:c}=g,d={};return I.forEach((g=>{const I=C(g[A]),i=C(g[l]),Z=c?g[c]:"__NO_GROUP__";for(let C=Math.floor(I);C<i;C+=1)d[Z]||(d[Z]={}),d[Z][C]||(d[Z][C]=0),d[Z][C]++})),Object.entries(d).flatMap((g=>{const[I,d]=g;return Object.entries(d).map((g=>{const[d,Z]=g;return{[A]:C.invert(+d),[l]:C.invert(+d+1),[null!=i?i:"coverage"]:Z,[null!=c?c:"group"]:I}}))}))}(C,g.gos.tabularDataFiltered,this._xScale.copy());break;case"subjson":g.gos.tabularDataFiltered=function(g,I){const{field:C,genomicField:A,baseGenomicField:l,genomicLengthField:i}=g;let c=Array.from(I);return c=c.map((g=>{let I=JSON.parse(g[C]);return I=I.map((I=>{var C,c;return I[A]&&g[l]&&(I[`${A}_start`]=+I[A]+ +g[l],I[`${A}_end`]=+I[A]+ +g[l]+ +I[i]),u(JSON.parse(JSON.stringify(g)),e(Z({},I),{[`${A}_start`]:I[`${A}_start`],[`${A}_end`]:I[`${A}_end`],type:null!=(c=null!=(C=I.type)?C:I.variant)?c:null,isParsedRow:"yes"}))})),[g,...I]})).reduce(((g,I)=>g.concat(I)),[]),c}(C,g.gos.tabularDataFiltered);break;case"displace":g.gos.tabularDataFiltered=function(g,I,C){const{boundingBox:A,method:l,newField:i}=g,{startField:c,endField:d,groupField:Z}=A;let e=0;A.padding&&C&&!A.isPaddingBP?e=Math.abs(C.invert(A.padding)-C.invert(0)):A.padding&&A.isPaddingBP&&(e=A.padding);const m=Array.from(I);if(m&&m.length>0&&(!Object.keys(m[0]).find((g=>g===c))||!Object.keys(m[0]).find((g=>g===d))))return m;if("pile"===l){const{maxRows:I}=g,C={};m.sort(((g,I)=>g[c]-I[c])).forEach((g=>{const A=g[c]-e,l=g[d]+e,m=Z?g[Z]:"__NO_GROUP__";C[m]||(C[m]=[]);let o=C[m].findIndex((g=>l<g.start?(g.start=A,!0):g.end<A&&(g.end=l,!0)));-1===o&&(C[m].push({start:A,end:l}),o=C[m].length-1),g[i]=`${I&&I<=o?I-1:o}`}))}else if("spread"===l){const g=[];m.sort(((g,I)=>g[c]-I[c])).forEach((I=>{let C=I[c]-e,A=I[d]+e,l=g.filter((g=>g.start===C&&A===g.end||g.start<C&&C<g.end||g.start<A&&A<g.end||C<g.start&&g.end<A));if(l.length>0){let I=0;do{l=g.filter((g=>g.start===C&&A===g.end||g.start<C&&C<g.end||g.start<A&&A<g.end||C<g.start&&g.end<A)),l.length>0&&(I%2==0?(C+=e*I,A+=e*I):(C-=e*I,A-=e*I)),I++}while(l.length>0&&I<1e3)}I[`${i}Start`]=`${C+e}`,I[`${i}Etart`]=""+(A-e),g.push({start:C,end:A})}))}return m}(C,g.gos.tabularDataFiltered,this._xScale.copy())}}));try{if(P){const C=100,A=g.gos.tabularDataFiltered.length;P.publish("data-preview",{id:this.context.id,dataConfig:JSON.stringify({data:I.data}),data:C>A?g.gos.tabularDataFiltered:k(g.gos.tabularDataFiltered,C)})}}catch(A){}const C=new LI(I,g.gos.tabularDataFiltered,this.options.theme);g.goslingModels.push(C)})),g.goslingModels}getIndicesOfVisibleDataInTile(g){var I,C,A;const l=this._xScale.range();if(!this.tilesetInfo)return[null,null];const{tileX:i,tileWidth:c}=this.getTilePosAndDimensions(g.gos.zoomLevel,g.gos.tilePos,this.tilesetInfo.bins_per_dimension||(null==(I=this.tilesetInfo)?void 0:I.tile_size)),d=n().domain([0,(null==(C=this.tilesetInfo)?void 0:C.tile_size)||(null==(A=this.tilesetInfo)?void 0:A.bins_per_dimension)]).range([i,i+c]);return[Math.max(0,Math.round(d.invert(this._xScale.invert(l[0])))),Math.min(g.gos.dense.length,Math.round(d.invert(this._xScale.invert(l[1]))))]}minVisibleValue(){}maxVisibleValue(){}exportSVG(){}onMouseOut(){document.body.style.cursor="default"}onMouseDown(g,I){this.mouseDownX=g,this.mouseDownY=I}onClick(g,I){if(!this.tilesetInfo||!this.tooltips)return;if(Math.sqrt((this.mouseDownX-g)**2+(this.mouseDownY-I)**2)>1)return;const C=this.tooltips.find((C=>C.isMouseOver(g,I)));C&&P.publish("click",{data:Z({},C.datum),genomicPosition:aI(Math.floor(this._xScale.invert(g)))})}getMouseOverHtml(g,I){if(!this.tilesetInfo||!this.tooltips)return;this.mouseOverGraphics.clear(),this.pMain.removeChild(this.mouseOverGraphics),this.pMain.addChild(this.mouseOverGraphics);const C=this.tooltips.find((C=>C.isMouseOver(g,I)));if(document.body.style.cursor=C?"pointer":"default",C&&P.publish("mouseover",{data:Z({},C.datum),genomicPosition:aI(Math.floor(this._xScale.invert(g)))}),C&&(C.markInfo.type,this.options.spec.tooltip)){return`<table style='text-align: left; margin-top: 12px'>${this.options.spec.tooltip.map((g=>{var I;const A=C.datum[g.field];let l=A;return"quantitative"===g.type&&g.format?l=K(g.format)(+A):"genomic"===g.type&&(l=aI(+A)),`<tr><td style='padding: 4px 8px'>${null!=(I=g.alt)?I:g.field}</td><td style='padding: 4px 8px'><b>${l}</b></td></tr>`})).join("")}</table>`}}}return new l(I)}jI.config={type:"gosling-track",datatype:["multivec","epilogos"],rotatable:!0,local:!1,orientation:"1d-horizontal",thumbnail:(new DOMParser).parseFromString('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 400" width={30} height={30}>\n    <rect style={{ fill: \'none\' }} width="400" height="400" />\n    <circle cx="110.62" cy="129.64" r="41.69" />\n    <circle style={{ fill: \'#fff\' }} cx="124.14" cy="114.12" r="10.76" />\n    <circle cx="288.56" cy="129.64" r="41.69" />\n    <circle style={{ fill: \'#fff\' }} cx="302.07" cy="114.12" r="10.76" />\n    <path\n        style={{ fill: \'#e18241\' }}\n        d="M313.1,241.64l8.61-22.09a430.11,430.11,0,0,0-88-15.87L224,225.63A384.54,384.54,0,0,1,313.1,241.64Z"\n    />\n    <path\n        style={{ fill: \'#e18241\' }}\n        d="M208.63,260.53a299.77,299.77,0,0,1,90.56,16.79L308,254.79a371.68,371.68,0,0,0-90-15.47Z"\n    />\n    <path\n        style={{ fill: \'#e18241\' }}\n        d="M174.4,225.56l-9-22a431.34,431.34,0,0,0-88,15.43l8.9,22A385.08,385.08,0,0,1,174.4,225.56Z"\n    />\n    <path\n        style={{ fill: \'#e18241\' }}\n        d="M100.71,276.35a300.51,300.51,0,0,1,87.91-15.82L180,239.29a372.51,372.51,0,0,0-88.3,14.76Z"\n    />\n    <path\n        style={{ fill: \'#e18241\' }}\n        d="M106.52,290.71c27.53,13.92,59.05,21.34,92.05,21.34h0c33.68,0,65.83-7.72,93.75-22.2a291.31,291.31,0,0,0-186.33-.4Z"\n    />\n</svg>',"text/xml").documentElement,availableOptions:["labelPosition","labelColor","labelTextOpacity","labelBackgroundOpacity","trackBorderWidth","trackBorderColor","trackType","scaledHeight","backgroundColor","barBorder","sortLargestOnTop","theme","axisPositionHorizontal"],defaultOptions:{labelPosition:"none",labelColor:"black",labelTextOpacity:.4,trackBorderWidth:0,trackBorderColor:"black",backgroundColor:"white",barBorder:!1,sortLargestOnTop:!0,axisPositionHorizontal:"left",theme:"light"}};let EI=!1;function qI(g){let I=0,C=0;return g.forEach((g=>{const A=g.boundingBox.x+g.boundingBox.width,l=g.boundingBox.y+g.boundingBox.height;C<l&&(C=l),I<A&&(I=A)})),{width:I,height:C}}function _I(g,I){var C,A;let l=[];$I(g,l);const i=qI(l);if(g.title||g.subtitle){const c=(g.title?(null!=(C=I.root.titleFontSize)?C:18)+6:0)+(g.subtitle?(null!=(A=I.root.subtitleFontSize)?A:14)+6:0),d=4;i.height+=c+d,i.height=i.height+(8-i.height%8),l.forEach((g=>{g.boundingBox.y+=c+d})),l=[{track:IC({width:i.width,height:c},g.title,g.subtitle),boundingBox:{x:0,y:0,width:i.width,height:c},layout:{x:0,y:0,w:12,h:c/i.height*12}},...l]}else i.height=i.height+(8-i.height%8);return l.forEach((g=>{g.layout.x=g.boundingBox.x/i.width*12,g.layout.w=g.boundingBox.width/i.width*12,g.layout.y=g.boundingBox.y,g.layout.h=g.boundingBox.height})),l}function $I(g,I,C=0,A=0,l=!0){let i=0,c=0,d=!0,Z=!1;II(g,(g=>{Z=!0,"circular"!==g.layout&&(d=!1)}));let e=!0;CI(g,(g=>{"vertical"!==g.arrangement&&"horizontal"!==g.arrangement||(e=!1)}));const m=l&&d&&Z&&e&&("views"in g&&("parallel"===g.arrangement||"serial"===g.arrangement)||"tracks"in g),o=I.length;if("tracks"in g){const l=g.tracks;"vertical"===g.orientation?(c=Math.max(...l.map((g=>g.height))),l.forEach(((l,d,Z)=>{1===gC([l])&&(l.width+=30),l.height=c,I.push({track:l,boundingBox:{x:C+i,y:A,width:l.width,height:c},layout:{x:0,y:0,w:0,h:0}}),Z[d+1]&&Z[d+1].overlayOnPreviousTrack||(i+=l.width,d!==Z.length-1&&(i+=void 0!==g.spacing?g.spacing:0))}))):(i=Math.max(...l.map((g=>g.width))),l.forEach(((l,d,Z)=>{1===gC([l])&&(l.height+=30),l.width=i,I.push({track:l,boundingBox:{x:C,y:A+c,width:i,height:l.height},layout:{x:0,y:0,w:0,h:0}}),Z[d+1]&&Z[d+1].overlayOnPreviousTrack||(c+=l.height,d!==Z.length-1&&(c+=void 0!==g.spacing?g.spacing:0))})))}else if("parallel"===g.arrangement||"vertical"===g.arrangement){const d=void 0!==g.spacing?g.spacing:10;g.views.forEach(((g,Z,e)=>{var o,b,a,s,t;const n=$I(g,I,C+(null!=(o=g.xOffset)?o:0),A+(null!=(b=g.yOffset)?b:0)+c,!m&&l);i<(null!=(a=g.xOffset)?a:0)+n.width&&(i=(null!=(s=g.xOffset)?s:0)+n.width),Z!==e.length-1&&(c+=d),c+=(null!=(t=g.yOffset)?t:0)+n.height}))}else"serial"!==g.arrangement&&"horizontal"!==g.arrangement||g.views.forEach(((d,Z,e)=>{var o,b,a,s,t;const n=void 0!==g.spacing?g.spacing:10,V=$I(d,I,C+(null!=(o=d.xOffset)?o:0)+i,A+(null!=(b=d.yOffset)?b:0),!m&&l);c<(null!=(a=d.xOffset)?a:0)+V.height&&(c=(null!=(s=d.xOffset)?s:0)+V.height),Z!==e.length-1&&(i+=n),i+=(null!=(t=d.xOffset)?t:0)+V.width}));if(m){const l=I.slice(o),d="views"in g&&("parallel"===g.arrangement||"serial"===g.arrangement)&&g.views.length>1,Z=void 0!==g.spacing?g.spacing:10,e=0,m=void 0!==g.centerRadius?g.centerRadius:.3,b=i/2+e,a=b*(1-m);l.forEach(((g,I)=>{var l,m;g.track.layout="circular",g.track.outerRadius=b-e-(g.boundingBox.y-A)/c*a,g.track.innerRadius=b-e-(g.boundingBox.y+g.boundingBox.height-A)/c*a;const o=Z/i*360;g.track.startAngle=o+(g.boundingBox.x-C)/i*(i-Z)/i*360,g.track.endAngle=(g.boundingBox.x+g.boundingBox.width-C)/i*(i-Z)/i*360,g.boundingBox.x=C+(null!=(l=g.track.xOffset)?l:0),g.boundingBox.y=A+(null!=(m=g.track.yOffset)?m:0),g.boundingBox.height=g.track.height=g.boundingBox.width=g.track.width=2*b,0!==I&&(g.track.overlayOnPreviousTrack=!0),d&&Ug(g.track)&&(g.track.overlay=g.track.overlay.filter((g=>"brush"!==g.mark)))})),c=2*b}return{x:C,y:A,width:i,height:c}}function gC(g){return g.filter((g=>Eg(g))).length}const IC=(g,I,C)=>JSON.parse(JSON.stringify({mark:"header",width:g.width,height:g.height,title:I,subtitle:C}));const CC=["rgba(68,1,84,1)","rgba(68,2,85,1)","rgba(69,3,87,1)","rgba(69,5,88,1)","rgba(69,6,90,1)","rgba(70,8,91,1)","rgba(70,9,93,1)","rgba(70,11,94,1)","rgba(70,12,96,1)","rgba(71,14,97,1)","rgba(71,15,98,1)","rgba(71,17,100,1)","rgba(71,18,101,1)","rgba(71,20,102,1)","rgba(72,21,104,1)","rgba(72,22,105,1)","rgba(72,24,106,1)","rgba(72,25,108,1)","rgba(72,26,109,1)","rgba(72,28,110,1)","rgba(72,29,111,1)","rgba(72,30,112,1)","rgba(72,32,113,1)","rgba(72,33,115,1)","rgba(72,34,116,1)","rgba(72,36,117,1)","rgba(72,37,118,1)","rgba(72,38,119,1)","rgba(72,39,120,1)","rgba(71,41,121,1)","rgba(71,42,121,1)","rgba(71,43,122,1)","rgba(71,44,123,1)","rgba(71,46,124,1)","rgba(70,47,125,1)","rgba(70,48,126,1)","rgba(70,49,126,1)","rgba(70,51,127,1)","rgba(69,52,128,1)","rgba(69,53,129,1)","rgba(69,54,129,1)","rgba(68,56,130,1)","rgba(68,57,131,1)","rgba(68,58,131,1)","rgba(67,59,132,1)","rgba(67,60,132,1)","rgba(67,62,133,1)","rgba(66,63,133,1)","rgba(66,64,134,1)","rgba(65,65,134,1)","rgba(65,66,135,1)","rgba(65,67,135,1)","rgba(64,69,136,1)","rgba(64,70,136,1)","rgba(63,71,136,1)","rgba(63,72,137,1)","rgba(62,73,137,1)","rgba(62,74,137,1)","rgba(61,75,138,1)","rgba(61,77,138,1)","rgba(60,78,138,1)","rgba(60,79,138,1)","rgba(59,80,139,1)","rgba(59,81,139,1)","rgba(58,82,139,1)","rgba(58,83,139,1)","rgba(57,84,140,1)","rgba(57,85,140,1)","rgba(56,86,140,1)","rgba(56,87,140,1)","rgba(55,88,140,1)","rgba(55,89,140,1)","rgba(54,91,141,1)","rgba(54,92,141,1)","rgba(53,93,141,1)","rgba(53,94,141,1)","rgba(52,95,141,1)","rgba(52,96,141,1)","rgba(51,97,141,1)","rgba(51,98,141,1)","rgba(51,99,141,1)","rgba(50,100,142,1)","rgba(50,101,142,1)","rgba(49,102,142,1)","rgba(49,103,142,1)","rgba(48,104,142,1)","rgba(48,105,142,1)","rgba(47,106,142,1)","rgba(47,107,142,1)","rgba(47,108,142,1)","rgba(46,109,142,1)","rgba(46,110,142,1)","rgba(45,111,142,1)","rgba(45,112,142,1)","rgba(45,112,142,1)","rgba(44,113,142,1)","rgba(44,114,142,1)","rgba(43,115,142,1)","rgba(43,116,142,1)","rgba(43,117,142,1)","rgba(42,118,142,1)","rgba(42,119,142,1)","rgba(41,120,142,1)","rgba(41,121,142,1)","rgba(41,122,142,1)","rgba(40,123,142,1)","rgba(40,124,142,1)","rgba(40,125,142,1)","rgba(39,126,142,1)","rgba(39,127,142,1)","rgba(38,128,142,1)","rgba(38,129,142,1)","rgba(38,130,142,1)","rgba(37,131,142,1)","rgba(37,131,142,1)","rgba(37,132,142,1)","rgba(36,133,142,1)","rgba(36,134,142,1)","rgba(35,135,142,1)","rgba(35,136,142,1)","rgba(35,137,142,1)","rgba(34,138,141,1)","rgba(34,139,141,1)","rgba(34,140,141,1)","rgba(33,141,141,1)","rgba(33,142,141,1)","rgba(33,143,141,1)","rgba(32,144,141,1)","rgba(32,145,140,1)","rgba(32,146,140,1)","rgba(32,147,140,1)","rgba(31,147,140,1)","rgba(31,148,140,1)","rgba(31,149,139,1)","rgba(31,150,139,1)","rgba(31,151,139,1)","rgba(30,152,139,1)","rgba(30,153,138,1)","rgba(30,154,138,1)","rgba(30,155,138,1)","rgba(30,156,137,1)","rgba(30,157,137,1)","rgba(30,158,137,1)","rgba(30,159,136,1)","rgba(30,160,136,1)","rgba(31,161,136,1)","rgba(31,162,135,1)","rgba(31,163,135,1)","rgba(31,163,134,1)","rgba(32,164,134,1)","rgba(32,165,134,1)","rgba(33,166,133,1)","rgba(33,167,133,1)","rgba(34,168,132,1)","rgba(35,169,131,1)","rgba(35,170,131,1)","rgba(36,171,130,1)","rgba(37,172,130,1)","rgba(38,173,129,1)","rgba(39,174,129,1)","rgba(40,175,128,1)","rgba(41,175,127,1)","rgba(42,176,127,1)","rgba(43,177,126,1)","rgba(44,178,125,1)","rgba(46,179,124,1)","rgba(47,180,124,1)","rgba(48,181,123,1)","rgba(50,182,122,1)","rgba(51,183,121,1)","rgba(53,183,121,1)","rgba(54,184,120,1)","rgba(56,185,119,1)","rgba(57,186,118,1)","rgba(59,187,117,1)","rgba(61,188,116,1)","rgba(62,189,115,1)","rgba(64,190,114,1)","rgba(66,190,113,1)","rgba(68,191,112,1)","rgba(70,192,111,1)","rgba(72,193,110,1)","rgba(73,194,109,1)","rgba(75,194,108,1)","rgba(77,195,107,1)","rgba(79,196,106,1)","rgba(81,197,105,1)","rgba(83,198,104,1)","rgba(85,198,102,1)","rgba(88,199,101,1)","rgba(90,200,100,1)","rgba(92,201,99,1)","rgba(94,201,98,1)","rgba(96,202,96,1)","rgba(98,203,95,1)","rgba(101,204,94,1)","rgba(103,204,92,1)","rgba(105,205,91,1)","rgba(108,206,90,1)","rgba(110,206,88,1)","rgba(112,207,87,1)","rgba(115,208,85,1)","rgba(117,208,84,1)","rgba(119,209,82,1)","rgba(122,210,81,1)","rgba(124,210,79,1)","rgba(127,211,78,1)","rgba(129,212,76,1)","rgba(132,212,75,1)","rgba(134,213,73,1)","rgba(137,213,72,1)","rgba(139,214,70,1)","rgba(142,215,68,1)","rgba(144,215,67,1)","rgba(147,216,65,1)","rgba(149,216,63,1)","rgba(152,217,62,1)","rgba(155,217,60,1)","rgba(157,218,58,1)","rgba(160,218,57,1)","rgba(163,219,55,1)","rgba(165,219,53,1)","rgba(168,220,51,1)","rgba(171,220,50,1)","rgba(173,221,48,1)","rgba(176,221,46,1)","rgba(179,221,45,1)","rgba(181,222,43,1)","rgba(184,222,41,1)","rgba(187,223,39,1)","rgba(189,223,38,1)","rgba(192,223,36,1)","rgba(195,224,35,1)","rgba(197,224,33,1)","rgba(200,225,32,1)","rgba(203,225,30,1)","rgba(205,225,29,1)","rgba(208,226,28,1)","rgba(211,226,27,1)","rgba(213,226,26,1)","rgba(216,227,25,1)","rgba(219,227,24,1)","rgba(221,227,24,1)","rgba(224,228,24,1)","rgba(226,228,24,1)","rgba(229,228,24,1)","rgba(232,229,25,1)","rgba(234,229,25,1)","rgba(237,229,26,1)","rgba(239,230,27,1)","rgba(242,230,28,1)","rgba(244,230,30,1)","rgba(247,230,31,1)","rgba(249,231,33,1)","rgba(251,231,35,1)","rgba(254,231,36,1)"];function AC(g,I,C,A,l){var i,c,d,m,o,b,a,s,t;const n=qg(I)[0];I.id||(I.id=Y());const V=n.assembly;if(zg(n.data)){let m,o;if(Tg(n.data)){const g=(y=n.data.url).includes("tileset_info/?d=")&&(y.includes("https:")||y.includes("http:"))?{server:y.split("tileset_info/?d=")[0],tilesetUid:y.split("tileset_info/?d=")[1]}:(console.warn(`Data url format is incorrect:${y}`),{server:void 0,tilesetUid:void 0});m=g.server,o=g.tilesetUid}const b=RI(n),a=rI(n),s=("x"===a||"xe"===a)&&Dg(b)?b.domain:void 0,t=Mg(n)&&Dg(n.y)?n.y.domain:void 0,X=C.width-("circular"!==n.layout&&"vertical"===n.orientation&&Eg(n)?30:0),G=C.height-("circular"!==n.layout&&"horizontal"===n.orientation&&Eg(n)?30:0),B={uid:`${I.id}-track`,type:Mg(n)?"gosling-2d-track":"gosling-track",server:m,tilesetUid:o,width:X,height:G,options:{showMousePosition:"circular"!==n.layout&&l.root.showMousePosition,mousePositionColor:l.root.mousePositionColor,name:"linear"===n.layout?n.title:" ",labelPosition:n.title?"left"===l.track.titleAlign?"topLeft":"topRight":"none",labelShowResolution:!1,labelColor:l.track.titleColor,labelBackgroundColor:l.track.titleBackground,labelBackgroundOpacity:.5,labelTextOpacity:1,labelLeftMargin:1,labelTopMargin:1,labelRightMargin:0,labelBottomMargin:0,backgroundColor:"transparent",spec:Z({},I),theme:l}};n.data&&zg(n.data)&&("csv"===n.data.type||"json"===n.data.type||"bigwig"===n.data.type||"bam"===n.data.type)&&(B.data=e(Z({},n.data),{assembly:V}));"matrix"===(null==(i=n.data)?void 0:i.type)&&(B.type="heatmap",B.options.colorRange="warm"===(null==n?void 0:n.color.range)?["white","rgba(245,166,35,1.0)","rgba(208,2,27,1.0)","black"]:CC,B.options.trackBorderWidth=1,B.options.trackBorderColor="black",B.options.colorbarPosition=(null==(c=n.color)?void 0:c.legend)?"topRight":"hidden"),n.overlayOnPreviousTrack?g.setViewOrientation(n.orientation).addTrackToCombined(B):g.setViewOrientation(n.orientation).setAssembly(V).addDefaultView(I.id,V).setDomain(s,Mg(n)?t:s).adjustDomain(n.orientation,X,G).setMainTrack(B).addTrackSourceServers(m).setZoomFixed(!0===n.static).setZoomLimits(null!=(d=n.zoomLimits)?d:[1,null]).setLayout(A);const W=(g,I="horizontal",C,A)=>{const l=400,i=200;return"horizontal"===I?"x"===g&&C<=i||"y"===g&&A<=i?"narrower":"x"===g&&C<=l||"y"===g&&A<=l?"narrow":"regular":"x"===g&&A<=i||"y"===g&&C<=i?"narrower":"x"===g&&A<=l||"y"===g&&C<=l?"narrow":"regular"};["x","y"].forEach((A=>{const i=n[A];if(Dg(i)&&"axis"in i&&i.axis&&"none"!==i.axis&&"genomic"===i.type){const c=W(A,I.orientation,C.width,C.height);g.setAxisTrack(i.axis,c,{id:`${I.id}-axis`,layout:n.layout,innerRadius:"top"===i.axis?n.outerRadius-30:n.innerRadius,outerRadius:"top"===i.axis?n.outerRadius:n.innerRadius+30,width:n.width,height:n.height,startAngle:n.startAngle,endAngle:n.endAngle,theme:l})}})),g.validateSpec(!0)}else"header"===n.mark&&(g.addDefaultView(`${I.id}-title`).setLayout(A),"string"==typeof n.title&&g.setTextTrack(C.width,(null!=(m=l.root.titleFontSize)?m:18)+6,n.title,l.root.titleColor,null!=(o=l.root.titleFontSize)?o:18,l.root.titleFontWeight,l.root.titleAlign,l.root.titleBackgroundColor,null!=(b=l.root.titleFontFamily)?b:Rg.fontFamily),"string"==typeof n.subtitle&&g.setTextTrack(C.width,(null!=(a=l.root.subtitleFontSize)?a:14)+6,n.subtitle,l.root.subtitleColor,null!=(s=l.root.subtitleFontSize)?s:14,l.root.subtitleFontWeight,l.root.subtitleAlign,l.root.subtitleBackgroundColor,null!=(t=l.root.subtitleFontFamily)?t:Rg.fontFamily));var y;return g}function lC(g,I,C,A){if(0===I.length)return;const l=new FI;I.forEach((g=>{const{track:I,boundingBox:C,layout:i}=g;AC(l,I,C,i,A)}));const i=function(g){const I=[];return g.spec().views.forEach((g=>{var C,A,l,i,c,d,Z,e,m,o,b,a,s,t,n;const V=g.uid;let y=null==(c=null==(i=null==(l=null==(A=null==(C=g.tracks.center)?void 0:C[0])?void 0:A.contents)?void 0:l[0])?void 0:i.options)?void 0:c.spec;y||(y=null==(o=null==(m=null==(e=null==(Z=null==(d=g.tracks.left)?void 0:d[0])?void 0:Z.contents)?void 0:e[0])?void 0:m.options)?void 0:o.spec,y||(y=null==(n=null==(t=null==(s=null==(a=null==(b=g.tracks.left)?void 0:b[1])?void 0:a.contents)?void 0:s[0])?void 0:t.options)?void 0:n.spec)),V&&y&&qg(y).forEach((g=>{wg.forEach((C=>{var A,l,i,c;const d=g[C];Dg(d)&&"linkingId"in d&&d.linkingId&&I.push({layout:"circular"===g.layout?"circular":"linear",viewId:V,linkId:d.linkingId,isBrush:"brush"===g.mark,style:{color:null==(A=g.color)?void 0:A.value,stroke:null==(l=g.stroke)?void 0:l.value,strokeWidth:null==(i=g.strokeWidth)?void 0:i.value,opacity:null==(c=g.opacity)?void 0:c.value,startAngle:g.startAngle,endAngle:g.endAngle,innerRadius:g.innerRadius,outerRadius:g.outerRadius}})}))}))})),I}(l);i.filter((g=>g.isBrush)).forEach((g=>{var I;l.addBrush(g.layout,g.viewId,A,null==(I=i.find((I=>!I.isBrush&&I.linkId===g.linkId)))?void 0:I.viewId,g.style)})),i.filter((g=>!g.isBrush)).forEach((g=>{l.spec().zoomLocks.locksByViewUid[g.viewId]=g.linkId,l.spec().locationLocks.locksByViewUid[g.viewId]=g.linkId}));Array.from(new Set(i.map((g=>g.linkId)))).forEach((g=>{l.spec().zoomLocks.locksDict[g]={uid:g},l.spec().locationLocks.locksDict[g]={uid:g},i.filter((g=>!g.isBrush)).filter((I=>I.linkId===g)).forEach((I=>{l.spec().zoomLocks.locksDict[g][I.viewId]=[124625310.5,124625310.5,249250.621],l.spec().locationLocks.locksDict[g][I.viewId]=[124625310.5,124625310.5,249250.621]}))})),C(l.spec(),qI(I))}function iC(g,I,C,A){const l=JSON.parse(JSON.stringify(g));!function(g){gI(g,((g,I,C)=>{var A,l,i;if(g.data&&Tg(g.data)&&!("alignment"in g)&&"data"in(A=g)&&"overrideTemplate"in A&&A.overrideTemplate)switch(g.data.type){case"vector":case"bigwig":C[I]=u({data:{type:"vector",url:"",column:l=g.data.column,value:i=g.data.value},mark:"bar",x:{field:l,type:"genomic",axis:"top"},y:{field:i,type:"quantitative"},width:400,height:100},g);break;case"multivec":C[I]=u(function(g,I,C,A){return A&&A.length<10?{data:{type:"multivec",url:"",row:g,column:I,value:C,categories:A},mark:"bar",x:{field:I,type:"genomic",axis:"top"},y:{field:C,type:"quantitative"},row:{field:g,type:"nominal",legend:!0},color:{field:g,type:"nominal"},width:400,height:100}:{data:{type:"multivec",url:"",row:g,column:I,value:C,categories:A},mark:"rect",x:{field:I,type:"genomic",axis:"top"},row:{field:g,type:"nominal",legend:!0},color:{field:C,type:"quantitative"},width:400,height:100}}(g.data.row,g.data.column,g.data.value,g.data.categories),g)}}))}(l),function(g,I){gI(g,((g,C,A)=>{var l,i;if(!("template"in g))return;const{template:c}=g,d=I.find((g=>g.name===c));if(!d)return g._invalidTrack=!0,void console.warn(`There is no track template named '${c}'`);let m=!0;if(d.channels.forEach((I=>{!I.required||g.encoding&&I.name in g.encoding||(m=!1,console.warn(`A template spec ('${c}') does not contain a required channel, ${I.name}`))})),!m)return void(g._invalidTrack=!0);const o=JSON.parse(JSON.stringify(g));"encoding"in o&&delete o.encoding;const b=e(Z({},o),{alignment:"overlay",tracks:[],width:null!=(l=g.width)?l:100,height:null!=(i=g.height)?i:100});d.mapping.forEach((I=>{const C={data:g.data,mark:I.mark},{dataTransform:A}=I;A&&A.map((I=>{const C=I.base;C&&g.encoding&&C in g.encoding&&"field"in g.encoding[C]&&(delete I.base,I.field=g.encoding[C].field)}));const l=g.encoding;l?Object.keys(I).filter((g=>"mark"!==g)).forEach((g=>{const A=JSON.parse(JSON.stringify(I[g]));if("base"in A){const I=A.base;if(I in l){const i=JSON.parse(JSON.stringify(l[I]));delete A.base;const c=u(A,JSON.parse(JSON.stringify(i)));C[g]=c}else delete A.base,C[g]=A}else C[g]=A})):Object.keys(I).filter((g=>"mark"!==g)).forEach((g=>{const A=JSON.parse(JSON.stringify(I[g]));"base"in A&&delete A.base,C[g]=A})),b.tracks.push(C)})),A[C]=b}))}(l,C),lI(l),function(g,I,C){lC(0,_I(g,C),I,C)}(l,I,A)}EI||(j({name:"GoslingTrack",track:jI,config:jI.config}),j({name:"Gosling2DTrack",track:jI,config:e(Z({},jI.config),{type:"gosling-2d-track",orientation:"2d"})}),j({name:"AxisTrack",track:XI,config:XI.config}),j({name:"TextTrack",track:E,config:E.config}),j({name:"BrushTrack",track:GI,config:GI.config}),j({dataFetcher:hI,config:hI.config},{pluginType:"dataFetcher"}),j({dataFetcher:pI,config:pI.config},{pluginType:"dataFetcher"}),j({dataFetcher:HI,config:HI.config},{pluginType:"dataFetcher"}),EI=!0);const cC=q.exports.forwardRef(((g,I)=>{var C;const[A,l]=q.exports.useState(null!=(C=g.id)?C:Y());q.exports.useEffect((()=>{var I;l(null!=(I=g.id)?I:Y())}),[g.id]);const i=g.viewConfig||{},c=q.exports.useMemo((()=>_.createElement($.exports.HiGlassComponent,{ref:I,options:{pixelPreciseMarginPadding:!0,containerPaddingX:0,containerPaddingY:0,viewMarginTop:0,viewMarginBottom:0,viewMarginLeft:0,viewMarginRight:0,viewPaddingTop:0,viewPaddingBottom:0,viewPaddingLeft:0,viewPaddingRight:0,sizeMode:"bounded",rangeSelectionOnAlt:!0},viewConfig:i})),[i]),{padding:d=60,margin:Z=0,border:e="none",background:m}=g.options||{};return _.createElement(_.Fragment,null,_.createElement("div",{id:A,className:`gosling-component ${g.className||""}`,style:{position:"relative",padding:d,margin:Z,border:e,background:m,width:g.size.width,height:g.size.height,textAlign:"left"}},_.createElement("div",{key:JSON.stringify(i),id:"higlass-wrapper",className:"higlass-wrapper",style:{position:"relative",display:"block",background:m,margin:0,padding:0,width:g.size.width,height:g.size.height}},c)))}));cC.displayName="HiGlassComponentWrapper";const dC={};function ZC(g,I,C){const A=()=>{if("api"in g)return g;if(g.current)return g.current;throw new Error("HiGlass ref not initalized")},l=g=>{var I,l;const i=A(),c=null!=(I=null==g?void 0:g.resolution)?I:4,d=null!=(l=null==g?void 0:g.transparentBackground)&&l,Z=i.pixiRenderer,e=gg.create({width:Z.width/2,height:Z.height/2,resolution:c});Z.render(i.pixiStage,e);const m=Z.plugins.extract.canvas(e),o=document.createElement("canvas");o.width=m.width,o.height=m.height;const b=o.getContext("2d");return d||(b.fillStyle=C.root.background,b.fillRect(0,0,o.width,o.height)),b.drawImage(m,0,0),{canvas:o,resolution:c,canvasWidth:m.width,canvasHeight:m.height}};return{subscribe:(g,I)=>{switch(g){case"mouseover":case"click":case"rawdata":return PubSub.subscribe(g,I);default:return void console.error(`Event type not recognized, got ${JSON.stringify(g)}.`)}},unsubscribe:g=>PubSub.unsubscribe(g),zoomTo:(g,I,C=0,l=1e3)=>{var i,c,d,Z;if(!I.includes("chr"))return void console.warn("Genomic interval you entered is not in a correct form.");const e=I.split(":")[0],m=null==(c=null==(i=sI().interval)?void 0:i[e])?void 0:c[0];if(!e||void 0===typeof m)return void console.warn("Chromosome name is not valid",e);const[o,b]=null!=(Z=null==(d=I.split(":")[1])?void 0:d.split("-"))?Z:[0,sI().size[e]],a=+o+m-C,s=+b+m+C;A().api.zoomTo(g,a,s,a,s,l)},zoomToExtent:(g,I=1e3)=>{const[C,l]=[0,sI().total];A().api.zoomTo(g,C,l,C,l,I)},zoomToGene:(g,I,C=0,l=1e3)=>{A().api.zoomToGene(g,I,C,l)},suggestGene:(g,I,C)=>{A().api.suggestGene(g,I,C)},getViewIds:()=>{if(!I)return[];const g=[];var C,A;return A=I=>{I.uid&&g.push(I.uid)},(C=I)&&C.views&&Array.isArray(C.views)&&C.views.forEach((g=>{g&&g.uid&&A(g)})),g},getCanvas:l,exportPng:g=>{const{canvas:I}=l({resolution:4,transparentBackground:g});I.toBlob((g=>{const I=document.createElement("a");document.body.append(I),I.download="gosling-visualization",I.href=URL.createObjectURL(g),I.click(),I.remove()}),"image/png")},exportPdf:async g=>{const{jsPDF:I}=await(C=()=>import("./jspdf.es.min.da8dac2f.js"),A=[],A&&0!==A.length?Promise.all(A.map((g=>{if((g=`/${g}`)in dC)return;dC[g]=!0;const I=g.endsWith(".css"),C=I?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${g}"]${C}`))return;const A=document.createElement("link");return A.rel=I?"stylesheet":"modulepreload",I||(A.as="script",A.crossOrigin=""),A.href=g,document.head.appendChild(A),I?new Promise(((g,I)=>{A.addEventListener("load",g),A.addEventListener("error",I)})):void 0}))).then((()=>C())):C());var C,A;const{canvas:i}=l({resolution:4,transparentBackground:g}),c=i.toDataURL("image/jpeg",1),d=new I({orientation:i.width<i.height?"p":"l",unit:"pt",format:[i.width,i.height]});d.addImage(c,"JPEG",0,0,i.width,i.height),d.save("gosling-visualization.pdf")}}}const eC=q.exports.forwardRef(((g,I)=>{const[C,A]=q.exports.useState(),[l,i]=q.exports.useState({width:200,height:200}),c=q.exports.useRef(),d=zI(g.theme||"light");q.exports.useEffect((()=>{if(!I)return;const g=ZC(c,C,d);"function"==typeof I?I({hgRef:c,api:g}):I.current={hgRef:c,api:g}}),[I,c,C,d]),q.exports.useEffect((()=>{if(g.spec){if("error"===uI(g.spec).state)return void console.warn("Gosling spec is not valid. Please refer to the console message.");iC(g.spec,((I,l)=>{var d,Z,e;null==(d=g.compiled)||d.call(g,g.spec,I),i(l);const m=void 0!==C;(null==(Z=g.experimental)?void 0:Z.reactive)&&m?null==(e=c.current)||e.api.setViewConfig(I):A(I)}),[...iI],d)}}),[g.spec,d]);return q.exports.useMemo((()=>_.createElement(cC,{ref:c,viewConfig:C,size:l,id:g.id,className:g.className,options:{padding:g.padding,border:g.border,margin:g.margin,background:d.root.background}})),[C,l,d])}));function mC(g){const{code:I,readOnly:C,openFindBox:A,fontZoomIn:l,fontZoomOut:i,isDarkTheme:c}=g,d=q.exports.useRef(null),[Z,e]=q.exports.useState(I);function m(){Cg.defineTheme("gosling",c?{base:"vs-dark",inherit:!0,rules:[{token:"string.key.json",foreground:"#eeeeee",fontStyle:"bold"},{token:"string.value.json",foreground:"#8BE9FD",fontStyle:"bold"},{token:"number",foreground:"#FF79C6",fontStyle:"bold"},{token:"keyword.json",foreground:"#FF79C6",fontStyle:"bold"}],colors:{}}:{base:"vs",inherit:!0,rules:[{token:"string.key.json",foreground:"#222222"},{token:"string.value.json",foreground:"#035CC5"},{token:"number",foreground:"#E32A4F"},{token:"keyword.json",foreground:"#E32A4F"}],colors:{}})}return q.exports.useEffect((()=>{m()}),[c]),q.exports.useEffect((()=>{e(I)}),[I]),q.exports.useEffect((()=>{d.current&&void 0!==A&&d.current.getAction("actions.find").run()}),[A]),q.exports.useEffect((()=>{d.current&&void 0!==l&&d.current.getAction("editor.action.fontZoomIn").run()}),[l]),q.exports.useEffect((()=>{d.current&&void 0!==i&&d.current.getAction("editor.action.fontZoomOut").run()}),[i]),_.createElement(_.Fragment,null,_.createElement(Ag,{handleWidth:!0,handleHeight:!0,onResize:(g,I)=>{var C;null==(C=null==d?void 0:d.current)||C.layout({width:g,height:I})}}),_.createElement(lg,{language:"json",value:Z,theme:"gosling",options:{autoClosingBrackets:"beforeWhitespace",autoClosingQuotes:"beforeWhitespace",cursorBlinking:"smooth",folding:!0,lineNumbersMinChars:4,minimap:{enabled:!0},scrollBeyondLastLine:!1,wordWrap:"on",lineNumbers:"on",renderLineHighlight:"line",renderIndentGuides:!0,fontSize:14,readOnly:C},onChange:function(I){e(I),g.onChange&&g.onChange(I)},editorDidMount:function(g){d.current=g,g.focus(),g.createContextKey("editorIsOpen",!0)},editorWillMount:function(){m(),ig.json.jsonDefaults.setDiagnosticsOptions({allowComments:!0,enableSchemaRequest:!0,validate:!0,schemas:[{uri:"https://raw.githubusercontent.com/gosling-lang/gosling.js/master/schema/gosling.schema.json",fileMatch:["*"],schema:Wg}]}),ig.json.jsonDefaults.setModeConfiguration({diagnostics:!0,documentFormattingEdits:!1,documentRangeFormattingEdits:!1,documentSymbols:!0,completionItems:!0,hovers:!0,tokens:!0,colors:!0,foldingRanges:!0,selectionRanges:!1})}}))}self.MonacoEnvironment={getWorker:()=>new Ig};class oC extends _.Component{constructor(g){super(g),this.state={hasError:!1}}componentDidCatch(){this.setState({hasError:!0})}render(){return this.state.hasError?_.createElement("div",{style:{margin:"10px 40px"}},_.createElement("h3",null,"Something Went Wrong..."),_.createElement("h4",null,"• Refresh the webpage to restart the editor."),_.createElement("h4",null,"• Please help us fix this issue by submitting a"," ",_.createElement("a",{href:"https://github.com/gosling-lang/gosling.js/issues/new",target:"_blank",rel:"noopener noreferrer"},"GitHub issue")," ","with the spec on the left side.")):this.props.children}}const bC="https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec",aC="https://server.gosling-lang.org/api/v1/tileset_info/?d=epilogos-hg38",sC="https://server.gosling-lang.org/api/v1/tileset_info/?d=sequence-multivec",tC="https://server.gosling-lang.org/api/v1/tileset_info/?d=gene-annotation",nC="https://server.gosling-lang.org/api/v1/tileset_info/?d=clinvar-beddb",VC="https://server.gosling-lang.org/api/v1/tileset_info/?d=clinvar-multivec",yC="https://server.gosling-lang.org/api/v1/tileset_info/?d=hffc6-microc-hg38",XC="https://server.gosling-lang.org/api/v1/tileset_info/?d=hffc6-hic-hg38",GC="https://server.gosling-lang.org/api/v1/tileset_info/?d=transcript-hg38-beddb",BC=["#D45E00","#029F73","#0072B2","#CB7AA7","#E79F00"],WC=(g,I,C,A,l)=>({tracks:Array(1).fill({data:{type:"multivec",url:bC,value:"y",row:"_",column:"x",categories:["_"],binSize:32},mark:"rect",x:{field:"start",type:"genomic",axis:"none"},xe:{field:"end",type:"genomic"},row:{field:"_",type:"nominal"},color:{value:"lightgray"},style:{outline:g,outlineWidth:7},width:I+10*A,height:C+10*l})}),hC={title:"Layout and Arrangement",subtitle:"Try yourself with different arrangements and layouts",static:!0,layout:"linear",arrangement:"parallel",centerRadius:.5,views:[Z({},WC(BC[0],400,30,1,0)),{arrangement:"serial",views:[Z({},WC(BC[1],200,30,0,0)),Z({},WC(BC[2],200,30,0,0))]}]},pC={static:!0,layout:"linear",arrangement:"serial",centerRadius:.5,views:[{arrangement:"serial",views:[{arrangement:"parallel",views:[Z({},WC(BC[0],300,60,1,0)),Z({},WC(BC[1],300,30,1,0))]},{arrangement:"parallel",views:[Z({},WC(BC[2],50,60,1,0)),Z({},WC(BC[3],50,30,1,0))]}]},Z({},WC(BC[4],50,90,0,1))]},HC={title:"Visual Encoding",subtitle:"Gosling provides diverse visual encoding methods",layout:"linear",arrangement:"vertical",centerRadius:.8,xDomain:{chromosome:"1",interval:[1,3000500]},views:[{tracks:[{id:"track-1",data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"],binSize:4},mark:"rect",x:{field:"start",type:"genomic",axis:"top"},xe:{field:"end",type:"genomic"},row:{field:"sample",type:"nominal",legend:!0},color:{field:"peak",type:"quantitative",legend:!0},tooltip:[{field:"start",type:"genomic",alt:"Start Position"},{field:"end",type:"genomic",alt:"End Position"},{field:"peak",type:"quantitative",alt:"Value",format:".2"},{field:"sample",type:"nominal",alt:"Sample"}],width:600,height:130}]},{tracks:[{id:"track-2",data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"]},mark:"bar",x:{field:"position",type:"genomic",axis:"top"},y:{field:"peak",type:"quantitative"},row:{field:"sample",type:"nominal"},color:{field:"sample",type:"nominal",legend:!0},tooltip:[{field:"position",type:"genomic",alt:"Position"},{field:"peak",type:"quantitative",alt:"Value",format:".2"},{field:"sample",type:"nominal",alt:"Sample"}],width:600,height:130}]},{tracks:[{id:"track-3",data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"]},mark:"bar",x:{field:"position",type:"genomic",axis:"top"},y:{field:"peak",type:"quantitative",grid:!0},color:{field:"sample",type:"nominal",legend:!0},tooltip:[{field:"position",type:"genomic",alt:"Position"},{field:"peak",type:"quantitative",alt:"Value",format:".2"},{field:"sample",type:"nominal",alt:"Sample"}],width:600,height:130}]},{id:"track-4",alignment:"overlay",data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"]},x:{field:"position",type:"genomic",axis:"top"},y:{field:"peak",type:"quantitative"},row:{field:"sample",type:"nominal"},color:{field:"sample",type:"nominal",legend:!0},tracks:[{mark:"line"},{mark:"point",size:{field:"peak",type:"quantitative",range:[0,2]}}],tooltip:[{field:"position",type:"genomic",alt:"Position"},{field:"peak",type:"quantitative",alt:"Value",format:".2"},{field:"sample",type:"nominal",alt:"Sample"}],width:600,height:130},{tracks:[{id:"track-5",data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"]},mark:"point",x:{field:"position",type:"genomic",axis:"top"},y:{field:"peak",type:"quantitative"},row:{field:"sample",type:"nominal"},size:{field:"peak",type:"quantitative"},color:{field:"sample",type:"nominal",legend:!0},opacity:{value:.5},tooltip:[{field:"position",type:"genomic",alt:"Position"},{field:"peak",type:"quantitative",alt:"Value",format:".2"},{field:"sample",type:"nominal",alt:"Sample"}],width:600,height:130}]},{tracks:[{id:"track-6",data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"]},mark:"point",x:{field:"position",type:"genomic",axis:"top"},y:{field:"peak",type:"quantitative",grid:!0},size:{field:"peak",type:"quantitative"},color:{field:"sample",type:"nominal",legend:!0},opacity:{value:.5},tooltip:[{field:"position",type:"genomic",alt:"Position"},{field:"peak",type:"quantitative",alt:"Value",format:".2"},{field:"sample",type:"nominal",alt:"Sample"}],width:600,height:130}]},{tracks:[{id:"track-7",data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"]},mark:"area",x:{field:"position",type:"genomic",axis:"top"},y:{field:"peak",type:"quantitative"},row:{field:"sample",type:"nominal"},color:{field:"sample",type:"nominal",legend:!0},stroke:{value:"white"},strokeWidth:{value:.5},tooltip:[{field:"position",type:"genomic",alt:"Position"},{field:"peak",type:"quantitative",alt:"Value",format:".2"},{field:"sample",type:"nominal",alt:"Sample"}],width:600,height:130}]},{tracks:[{id:"track-8",data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"],binSize:4},mark:"bar",x:{field:"start",type:"genomic",axis:"top"},xe:{field:"end",type:"genomic",axis:"top"},y:{field:"peak_min",type:"quantitative"},ye:{field:"peak_max",type:"quantitative"},row:{field:"sample",type:"nominal"},color:{field:"sample",type:"nominal",legend:!0},stroke:{value:"black"},strokeWidth:{value:.2},tooltip:[{field:"position",type:"genomic",alt:"Position"},{field:"peak_min",type:"quantitative",alt:"min(Value)",format:".2"},{field:"peak_max",type:"quantitative",alt:"max(Value)",format:".2"},{field:"sample",type:"nominal",alt:"Sample"}],width:600,height:130}]},{tracks:[{id:"track-9",data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/circos-segdup-edited.txt",type:"csv",chromosomeField:"c2",genomicFields:["s1","e1","s2","e2"]},mark:"withinLink",x:{field:"s1",type:"genomic",domain:{chromosome:"1",interval:[1039e5,1041e5]}},xe:{field:"e1",type:"genomic"},x1:{field:"s2",type:"genomic",domain:{chromosome:"1"}},x1e:{field:"e2",type:"genomic"},color:{field:"s1",type:"nominal"},stroke:{value:"black"},strokeWidth:{value:.5},opacity:{value:.2},width:600,height:130}]}]},uC={title:"Visual Encoding in Circular Layouts",subtitle:"Gosling provides diverse visual encoding methods in circular layouts",layout:"circular",arrangement:"vertical",centerRadius:.5,static:!0,xDomain:{chromosome:"1",interval:[1,3000500]},views:[{arrangement:"horizontal",views:[{spacing:2,tracks:[{data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"],binSize:4},mark:"rect",x:{field:"start",type:"genomic",axis:"top"},xe:{field:"end",type:"genomic"},row:{field:"sample",type:"nominal",legend:!0},color:{field:"peak",type:"quantitative",legend:!0},width:350,height:130}]},{spacing:2,tracks:[{data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"]},mark:"bar",x:{field:"position",type:"genomic",axis:"top"},y:{field:"peak",type:"quantitative"},row:{field:"sample",type:"nominal"},color:{field:"sample",type:"nominal",legend:!0},width:350,height:130}]}]},{arrangement:"horizontal",views:[{spacing:2,tracks:[{data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"]},mark:"bar",x:{field:"position",type:"genomic",axis:"top"},y:{field:"peak",type:"quantitative",grid:!0},color:{field:"sample",type:"nominal",legend:!0},width:350,height:130}]},{spacing:2,alignment:"overlay",data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"]},x:{field:"position",type:"genomic",axis:"top"},y:{field:"peak",type:"quantitative"},row:{field:"sample",type:"nominal"},color:{field:"sample",type:"nominal",legend:!0},tracks:[{mark:"line"},{mark:"point",size:{field:"peak",type:"quantitative",range:[0,2]}}],width:350,height:130}]},{arrangement:"horizontal",views:[{spacing:2,tracks:[{data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"]},mark:"point",x:{field:"position",type:"genomic",axis:"top"},y:{field:"peak",type:"quantitative"},row:{field:"sample",type:"nominal"},size:{field:"peak",type:"quantitative"},color:{field:"sample",type:"nominal",legend:!0},opacity:{value:.5},width:350,height:130}]},{spacing:2,tracks:[{data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"]},mark:"point",x:{field:"position",type:"genomic",axis:"top"},y:{field:"peak",type:"quantitative",grid:!0},size:{field:"peak",type:"quantitative"},color:{field:"sample",type:"nominal",legend:!0},opacity:{value:.5},width:350,height:130}]}]},{arrangement:"horizontal",views:[{spacing:2,tracks:[{data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"]},mark:"area",x:{field:"position",type:"genomic",axis:"top"},y:{field:"peak",type:"quantitative"},row:{field:"sample",type:"nominal"},color:{field:"sample",type:"nominal",legend:!0},stroke:{value:"white"},strokeWidth:{value:.5},width:350,height:130}]},{spacing:2,tracks:[{data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/circos-segdup-edited.txt",type:"csv",chromosomeField:"c2",genomicFields:["s1","e1","s2","e2"]},mark:"withinLink",x:{field:"s1",type:"genomic",domain:{chromosome:"1",interval:[1039e5,1041e5]}},xe:{field:"e1",type:"genomic"},x1:{field:"s2",type:"genomic",domain:{chromosome:"1"}},x1e:{field:"e2",type:"genomic"},color:{field:"s1",type:"nominal"},stroke:{value:"black"},strokeWidth:{value:.5},opacity:{value:.4},width:350,height:130}]}]},{tracks:[{data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2"],binSize:4},mark:"bar",x:{field:"start",type:"genomic",axis:"top"},xe:{field:"end",type:"genomic",axis:"top"},y:{field:"peak_min",type:"quantitative"},ye:{field:"peak_max",type:"quantitative"},row:{field:"sample",type:"nominal"},color:{field:"sample",type:"nominal",legend:!0},stroke:{value:"black"},strokeWidth:{value:.2},tooltip:[{field:"position",type:"genomic",alt:"Position"},{field:"peak_min",type:"quantitative",alt:"min(Value)",format:".2"},{field:"peak_max",type:"quantitative",alt:"max(Value)",format:".2"},{field:"sample",type:"nominal",alt:"Sample"}],width:350,height:130}]}]};function YC(g,I,C,A){return{static:!1,layout:"linear",centerRadius:.05,xDomain:A,spacing:.01,tracks:[{alignment:"overlay",title:"example_higlass.bam",data:{type:"bam",url:"https://s3.amazonaws.com/gosling-lang.org/data/example_higlass.bam",indexUrl:"https://s3.amazonaws.com/gosling-lang.org/data/example_higlass.bam.bai",loadMates:!0},mark:"bar",tracks:[{dataTransform:[{type:"coverage",startField:"start",endField:"end"}],x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"coverage",type:"quantitative",axis:"right"},color:{value:"#C6C6C6"}}],style:{outlineWidth:.5},width:I,height:80},{alignment:"overlay",title:"example_higlass.bam",data:{type:"bam",url:"https://s3.amazonaws.com/gosling-lang.org/data/example_higlass.bam",indexUrl:"https://s3.amazonaws.com/gosling-lang.org/data/example_higlass.bam.bai",loadMates:!0,maxInsertSize:300},mark:"rect",tracks:[{dataTransform:[{type:"displace",method:"pile",boundingBox:{startField:"start",endField:"end",padding:5,isPaddingBP:!0},newField:"pileup-row"}],x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},color:{field:"svType",type:"nominal",legend:!0,domain:["normal read","deletion (+-)","inversion (++)","inversion (--)","duplication (-+)","more than two mates","mates not found within chromosome","clipping"],range:["#C8C8C8","#E79F00","#029F73","#0072B2","#CB7AA7","#57B4E9","#D61E2E","#414141"]}},{dataTransform:[{type:"displace",method:"pile",boundingBox:{startField:"start",endField:"end",padding:5,isPaddingBP:!0},newField:"pileup-row"},{type:"subjson",field:"substitutions",genomicField:"pos",baseGenomicField:"start",genomicLengthField:"length"},{type:"filter",field:"type",oneOf:["S","H"]}],x:{field:"pos_start",type:"genomic"},xe:{field:"pos_end",type:"genomic"},color:{value:"#414141"}}],tooltip:[{field:"start",type:"genomic"},{field:"end",type:"genomic"},{field:"insertSize",type:"quantitative"},{field:"svType",type:"nominal"},{field:"strand",type:"nominal"},{field:"numMates",type:"quantitative"},{field:"mateIds",type:"nominal"}],row:{field:"pileup-row",type:"nominal",padding:.2},style:{outlineWidth:.5,legendTitle:"Insert Size = 300bp"},width:I,height:C}]}}const KC=Z({title:"Pileup Track Using BAM Data",subtitle:""},YC(0,1250,600,{chromosome:"1",interval:[136750,139450]})),RC={title:"Breast Cancer Variant (Staaf et al. 2019)",subtitle:"Genetic characteristics of RAD51C- and PALB2-altered TNBCs",layout:"linear",arrangement:"vertical",centerRadius:.5,assembly:"hg19",spacing:40,style:{outlineWidth:1,outline:"lightgray",enableSmoothPath:!1},views:[{arrangement:"vertical",views:[{xOffset:190,layout:"circular",spacing:1,tracks:[{title:"Patient Overview (PD35930a)",alignment:"overlay",data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv",type:"csv",chromosomeField:"Chromosome",genomicFields:["chromStart","chromEnd"]},tracks:[{mark:"rect"},{mark:"brush",x:{linkingId:"mid-scale"},strokeWidth:{value:1.5},stroke:{value:"#0070DC"},color:{value:"#AFD8FF"},opacity:{value:.5}}],color:{field:"Stain",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar","acen"],range:["white","lightgray","gray","gray","black","#7B9CC8","#DC4542"]},size:{value:18},x:{field:"chromStart",type:"genomic"},xe:{field:"chromEnd",type:"genomic"},stroke:{value:"gray"},strokeWidth:{value:.3},width:500,height:100},{title:"Putative Driver",alignment:"overlay",data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/SV/driver.df.scanb.complete.csv",type:"csv",chromosomeField:"Chr",genomicFields:["ChrStart","ChrEnd"]},dataTransform:[{type:"filter",field:"Sample",oneOf:["PD35930a"]}],tracks:[{mark:"text"},{mark:"triangleBottom",size:{value:5}}],x:{field:"ChrStart",type:"genomic"},xe:{field:"ChrEnd",type:"genomic"},text:{field:"Gene",type:"nominal"},color:{value:"black"},style:{textFontWeight:"normal",dx:-10,outlineWidth:0},width:500,height:40},{title:"LOH",style:{background:"lightgray",backgroundOpacity:.2},alignment:"overlay",data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/cancer/cnv.PD35930a.csv",headerNames:["id","chr","start","end","total_cn_normal","minor_cp_normal","total_cn_tumor","minor_cn_tumor"],type:"csv",chromosomeField:"chr",genomicFields:["start","end"]},dataTransform:[{type:"filter",field:"minor_cn_tumor",oneOf:["0"]}],tracks:[{mark:"rect"},{mark:"brush",x:{linkingId:"mid-scale"},strokeWidth:{value:1},stroke:{value:"#94C2EF"},color:{value:"#AFD8FF"}}],x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},color:{value:"#FB6A4B"},width:620,height:40},{title:"Gain",style:{background:"lightgray",backgroundOpacity:.2},alignment:"overlay",data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/cancer/cnv.PD35930a.csv",headerNames:["id","chr","start","end","total_cn_normal","minor_cp_normal","total_cn_tumor","minor_cn_tumor"],type:"csv",chromosomeField:"chr",genomicFields:["start","end"]},dataTransform:[{type:"filter",field:"total_cn_tumor",inRange:[4.5,900]}],tracks:[{mark:"rect"},{mark:"brush",x:{linkingId:"mid-scale"},strokeWidth:{value:0}}],x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},color:{value:"#73C475"},width:500,height:40},{title:"Structural Variant",data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/cancer/rearrangement.PD35930a.csv",type:"csv",genomicFieldsToConvert:[{chromosomeField:"chr1",genomicFields:["start1","end1"]},{chromosomeField:"chr2",genomicFields:["start2","end2"]}]},mark:"withinLink",x:{field:"start1",type:"genomic"},xe:{field:"end2",type:"genomic"},color:{field:"svclass",type:"nominal",legend:!0,domain:["tandem-duplication","translocation","delection","inversion"],range:["#569C4D","#4C75A2","#DA5456","#EA8A2A"]},stroke:{field:"svclass",type:"nominal",domain:["tandem-duplication","translocation","delection","inversion"],range:["#569C4D","#4C75A2","#DA5456","#EA8A2A"]},strokeWidth:{value:1},opacity:{value:.6},style:{legendTitle:"SV Class"},width:500,height:80}]},{linkingId:"mid-scale",xDomain:{chromosome:"1"},layout:"linear",tracks:[{style:{background:"#D7EBFF",outline:"#8DC1F2",outlineWidth:5},title:"Ideogram",alignment:"overlay",data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv",type:"csv",chromosomeField:"Chromosome",genomicFields:["chromStart","chromEnd"]},tracks:[{mark:"rect",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"],not:!0}]},{mark:"triangleRight",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"]},{type:"filter",field:"Name",include:"q"}]},{mark:"triangleLeft",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"]},{type:"filter",field:"Name",include:"p"}]},{mark:"text",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"],not:!0}],size:{value:12},color:{field:"Stain",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar"],range:["black","black","black","black","white","black"]},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}]}],color:{field:"Stain",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar","acen"],range:["white","lightgray","gray","gray","black","#7B9CC8","#DC4542"]},size:{value:18},x:{field:"chromStart",type:"genomic"},xe:{field:"chromEnd",type:"genomic"},text:{field:"Name",type:"nominal"},stroke:{value:"gray"},strokeWidth:{value:.3},width:500,height:30},{title:"Putative Driver",data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/SV/driver.df.scanb.complete.csv",type:"csv",chromosomeField:"Chr",genomicFields:["ChrStart","ChrEnd"]},dataTransform:[{type:"filter",field:"Sample",oneOf:["PD35930a"]}],mark:"text",x:{field:"ChrStart",type:"genomic"},xe:{field:"ChrEnd",type:"genomic"},text:{field:"Gene",type:"nominal"},color:{value:"black"},style:{textFontWeight:"normal",dx:-10},width:500,height:20},{alignment:"overlay",title:"hg38 | Genes",data:{url:"https://server.gosling-lang.org/api/v1/tileset_info/?d=gene-annotation",type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}],exonIntervalFields:[{index:12,name:"start"},{index:13,name:"end"}]},tracks:[{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"triangleRight",x:{field:"end",type:"genomic"},size:{value:15}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"text",text:{field:"name",type:"nominal"},x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},style:{dy:-15,outline:"black",outlineWidth:0}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"triangleLeft",x:{field:"start",type:"genomic"},size:{value:15},style:{align:"right",outline:"black",outlineWidth:0}},{dataTransform:[{type:"filter",field:"type",oneOf:["exon"]}],mark:"rect",x:{field:"start",type:"genomic"},size:{value:15},xe:{field:"end",type:"genomic"}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"rule",x:{field:"start",type:"genomic"},strokeWidth:{value:2},xe:{field:"end",type:"genomic"},style:{linePattern:{type:"triangleRight",size:3.5},outline:"black",outlineWidth:0}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"rule",x:{field:"start",type:"genomic"},strokeWidth:{value:2},xe:{field:"end",type:"genomic"},style:{linePattern:{type:"triangleLeft",size:3.5},outline:"black",outlineWidth:0}},{mark:"brush",x:{linkingId:"detail-1"},strokeWidth:{value:0},color:{value:"gray"},opacity:{value:.3}},{mark:"brush",x:{linkingId:"detail-2"},strokeWidth:{value:0},color:{value:"gray"},opacity:{value:.3}}],row:{field:"strand",type:"nominal",domain:["+","-"]},color:{field:"strand",type:"nominal",domain:["+","-"],range:["#97A8B2","#D4C6BA"]},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],width:400,height:100},{title:"LOH",style:{background:"lightgray",backgroundOpacity:.2},data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/cancer/cnv.PD35930a.csv",headerNames:["id","chr","start","end","total_cn_normal","minor_cp_normal","total_cn_tumor","minor_cn_tumor"],type:"csv",chromosomeField:"chr",genomicFields:["start","end"]},dataTransform:[{type:"filter",field:"minor_cn_tumor",oneOf:["0"]}],mark:"rect",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},color:{value:"#FB6A4B"},width:620,height:20},{title:"Gain",style:{background:"lightgray",backgroundOpacity:.2},data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/cancer/cnv.PD35930a.csv",headerNames:["id","chr","start","end","total_cn_normal","minor_cp_normal","total_cn_tumor","minor_cn_tumor"],type:"csv",chromosomeField:"chr",genomicFields:["start","end"]},dataTransform:[{type:"filter",field:"total_cn_tumor",inRange:[4.5,900]}],mark:"rect",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},color:{value:"#73C475"},width:500,height:20},{title:"Structural Variant",data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/cancer/rearrangement.PD35930a.csv",type:"csv",genomicFieldsToConvert:[{chromosomeField:"chr1",genomicFields:["start1","end1"]},{chromosomeField:"chr2",genomicFields:["start2","end2"]}]},alignment:"overlay",tracks:[{mark:"withinLink",x:{field:"start1",type:"genomic"},xe:{field:"end2",type:"genomic"}},{mark:"point",x:{field:"start1",type:"genomic"},y:{value:400}},{mark:"point",x:{field:"end2",type:"genomic"},y:{value:400}}],color:{field:"svclass",type:"nominal",domain:["tandem-duplication","translocation","delection","inversion"],range:["#569C4D","#4C75A2","#DA5456","#EA8A2A"],legend:!0},stroke:{field:"svclass",type:"nominal",domain:["tandem-duplication","translocation","delection","inversion"],range:["#569C4D","#4C75A2","#DA5456","#EA8A2A"]},strokeWidth:{value:1},opacity:{value:.6},size:{value:4},tooltip:[{field:"start1",type:"genomic"},{field:"end2",type:"genomic"},{field:"svclass",type:"nominal"}],style:{legendTitle:"SV Class",bazierLink:!0},width:1e3,height:200}]}]},{arrangement:"horizontal",spacing:100,views:[Z({},YC(0,450,310,{chromosome:"1",interval:[205e3,207e3]})),Z({},YC(0,450,310,{chromosome:"1",interval:[49e4,496e3]}))]}]},rC={title:"Matrix Visualization",subtitle:"Comparison of Micro-C and Hi-C for HFFc6 Cells",arrangement:"horizontal",xDomain:{chromosome:"7",interval:[777e5,81e6]},spacing:1,linkingId:"-",views:[{orientation:"vertical",yOffset:75,views:[{tracks:[{data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/HFFc6_H3K4me3.bigWig",type:"bigwig",column:"position",value:"peak",binSize:8},title:"HFFc6_H3K4me3",mark:"bar",x:{field:"start",type:"genomic",axis:"top"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative",axis:"none"},color:{value:"darkgreen"},height:600,width:40},{data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/HFFc6_Atacseq.mRp.clN.bigWig",type:"bigwig",column:"position",value:"peak",binSize:8},title:"HFFc6_ATAC",mark:"bar",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative",axis:"none"},color:{value:"#E79F00"},height:600,width:40},{alignment:"overlay",tracks:[{data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/HFFC6_CTCF.mRp.clN.bigWig",type:"bigwig",column:"position",value:"peak",binSize:8},mark:"bar",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative",axis:"none"},color:{value:"#0072B2"}},{style:{backgroundOpacity:0},data:{url:tC,type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}]},dataTransform:[{type:"filter",field:"strand",oneOf:["+"]}],mark:"triangleRight",x:{field:"start",type:"genomic"},size:{value:13},stroke:{value:"white"},strokeWidth:{value:1},row:{field:"strand",type:"nominal",domain:["+","-"]},color:{value:"#CB7AA7"}},{style:{backgroundOpacity:0},title:"HFFC6_CTCF",data:{url:tC,type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}]},dataTransform:[{type:"filter",field:"strand",oneOf:["-"]}],mark:"triangleLeft",x:{field:"start",type:"genomic"},size:{value:13},stroke:{value:"white"},strokeWidth:{value:1},row:{field:"strand",type:"nominal",domain:["+","-"]},color:{value:"#029F73"}}],height:600,width:40}]}]},{spacing:30,views:[{spacing:0,arrangement:"vertical",views:[{tracks:[{data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/HFFc6_H3K4me3.bigWig",type:"bigwig",column:"position",value:"peak",binSize:8},title:"HFFc6_H3K4me3",mark:"bar",x:{field:"start",type:"genomic",axis:"top"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative",axis:"none"},color:{value:"darkgreen"},width:570,height:40},{data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/HFFc6_Atacseq.mRp.clN.bigWig",type:"bigwig",column:"position",value:"peak",binSize:8},title:"HFFc6_ATAC",mark:"bar",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative",axis:"none"},color:{value:"#E79F00"},width:600,height:40},{alignment:"overlay",tracks:[{data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/HFFC6_CTCF.mRp.clN.bigWig",type:"bigwig",column:"position",value:"peak",binSize:8},mark:"bar",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative",axis:"none"},color:{value:"#0072B2"}},{style:{backgroundOpacity:0},data:{url:tC,type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}]},dataTransform:[{type:"filter",field:"strand",oneOf:["+"]}],mark:"triangleRight",x:{field:"start",type:"genomic"},size:{value:13},stroke:{value:"white"},strokeWidth:{value:1},row:{field:"strand",type:"nominal",domain:["+","-"]},color:{value:"#CB7AA7"}},{style:{backgroundOpacity:0},title:"HFFC6_CTCF",data:{url:tC,type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}]},dataTransform:[{type:"filter",field:"strand",oneOf:["-"]}],mark:"triangleLeft",x:{field:"start",type:"genomic"},stroke:{value:"white"},strokeWidth:{value:1},size:{value:13},row:{field:"strand",type:"nominal",domain:["+","-"]},color:{value:"#029F73"}}],width:600,height:40}]},{tracks:[{title:"HFFc6_Micro-C",data:{url:yC,type:"matrix"},mark:"rect",x:{field:"position1",type:"genomic",axis:"none"},y:{field:"position2",type:"genomic",axis:"none"},color:{field:"value",type:"quantitative",range:"warm"},width:600,height:600}]},{tracks:[{title:"Epilogos (hg38)",data:{url:aC,type:"multivec",row:"category",column:"position",value:"value",categories:["Active TSS","Flanking Active TSS","Transcr at gene 5\\' and 3\\'","Strong transcription","Weak transcription","Genic enhancers","Enhancers","ZNF genes & repeats","Heterochromatin","Bivalent/Poised TSS","Flanking Bivalent TSS/Enh","Bivalent Enhancer","Repressed PolyComb","Weak Repressed PolyComb","Quiescent/Low"],binSize:8},dataTransform:[{type:"filter",field:"value",inRange:[0,999999]}],mark:"bar",x:{field:"start",type:"genomic",axis:"none"},xe:{field:"end",type:"genomic"},y:{field:"value",type:"quantitative",axis:"none"},color:{field:"category",type:"nominal",range:["#FF0000","#FF4500","#32CD32","#008000","#006400","#C2E105","#FFFF00","#66CDAA","#8A91D0","#CD5C5C","#E9967A","#BDB76B","#808080","#C0C0C0","gray"]},width:600,height:40}]}]},{arrangement:"vertical",spacing:0,views:[{tracks:[{data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/HFFc6_H3K4me3.bigWig",type:"bigwig",column:"position",value:"peak",binSize:8},title:"HFFc6_H3K4me3",mark:"bar",x:{field:"start",type:"genomic",axis:"top"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative",axis:"none"},color:{value:"darkgreen"},width:600,height:40},{data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/HFFc6_Atacseq.mRp.clN.bigWig",type:"bigwig",column:"position",value:"peak",binSize:8},title:"HFFc6_ATAC",mark:"bar",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative",axis:"none"},color:{value:"#E79F00"},width:600,height:40},{alignment:"overlay",tracks:[{data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/HFFC6_CTCF.mRp.clN.bigWig",type:"bigwig",column:"position",value:"peak",binSize:8},mark:"bar",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative",axis:"none"},color:{value:"#0072B2"}},{style:{backgroundOpacity:0},data:{url:tC,type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}]},dataTransform:[{type:"filter",field:"strand",oneOf:["+"]}],mark:"triangleRight",x:{field:"start",type:"genomic"},size:{value:13},stroke:{value:"white"},strokeWidth:{value:1},row:{field:"strand",type:"nominal",domain:["+","-"]},color:{value:"#CB7AA7"}},{style:{backgroundOpacity:0},title:"HFFC6_CTCF",data:{url:tC,type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}]},dataTransform:[{type:"filter",field:"strand",oneOf:["-"]}],mark:"triangleLeft",x:{field:"start",type:"genomic"},size:{value:13},stroke:{value:"white"},strokeWidth:{value:1},row:{field:"strand",type:"nominal",domain:["+","-"]},color:{value:"#029F73"}}],width:600,height:40}]},{tracks:[{title:"HFFc6_Hi-C",data:{url:XC,type:"matrix"},mark:"rect",x:{field:"position1",type:"genomic",axis:"none"},y:{field:"position2",type:"genomic",axis:"none"},color:{field:"value",type:"quantitative",range:"warm"},width:600,height:600}]},{tracks:[{title:"Epilogos (hg38)",data:{url:aC,type:"multivec",row:"category",column:"position",value:"value",categories:["Active TSS","Flanking Active TSS","Transcr at gene 5\\' and 3\\'","Strong transcription","Weak transcription","Genic enhancers","Enhancers","ZNF genes & repeats","Heterochromatin","Bivalent/Poised TSS","Flanking Bivalent TSS/Enh","Bivalent Enhancer","Repressed PolyComb","Weak Repressed PolyComb","Quiescent/Low"],binSize:8},dataTransform:[{type:"filter",field:"value",inRange:[0,999999]}],mark:"bar",x:{field:"start",type:"genomic",axis:"none"},xe:{field:"end",type:"genomic"},y:{field:"value",type:"quantitative",axis:"none"},color:{field:"category",type:"nominal",range:["#FF0000","#FF4500","#32CD32","#008000","#006400","#C2E105","#FFFF00","#66CDAA","#8A91D0","#CD5C5C","#E9967A","#BDB76B","#808080","#C0C0C0","gray"]},width:600,height:40}]}]}]}],style:{outlineWidth:0,background:"#F6F6F6"}},JC={title:"Visual Linking",subtitle:"Change the position and range of brushes to update the detail view on the bottom",arrangement:"vertical",centerRadius:.4,views:[{spacing:40,arrangement:"horizontal",views:[{spacing:5,static:!0,layout:"circular",xDomain:{chromosome:"1"},alignment:"overlay",tracks:[{mark:"bar"},{mark:"brush",x:{linkingId:"detail"}}],data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"]},x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative"},row:{field:"sample",type:"nominal"},color:{field:"sample",type:"nominal"},width:250,height:130},{layout:"linear",xDomain:{chromosome:"1"},alignment:"overlay",tracks:[{mark:"bar"},{mark:"brush",x:{linkingId:"detail"}}],data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"]},x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative"},row:{field:"sample",type:"nominal"},color:{field:"sample",type:"nominal"},width:400,height:200}]},{layout:"linear",xDomain:{chromosome:"1",interval:[16e7,2e8]},linkingId:"detail",tracks:[{data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"]},mark:"bar",x:{field:"position",type:"genomic",axis:"top"},y:{field:"peak",type:"quantitative"},row:{field:"sample",type:"nominal"},color:{field:"sample",type:"nominal"},width:690,height:200}]}]},wC={title:"Basic Idea of Semantic Zoom",subtitle:"Zoom in and out to see how different visual encoding (here, color) can be applied depending on the zoom level.",layout:"linear",centerRadius:.5,alignment:"overlay",data:{type:"multivec",url:bC,value:"y",row:"_",column:"x",categories:["_"],binSize:12},mark:"rect",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},style:{outline:"black",outlineWidth:1},width:720,height:130,tracks:[{color:{value:"#E79F00"},visibility:[{operation:"GT",target:"mark",threshold:1e8,measure:"zoomLevel"}]},{color:{value:"#57B4E9"},visibility:[{operation:"GT",target:"mark",threshold:1e7,measure:"zoomLevel"},{operation:"LT",target:"mark",threshold:1e8,measure:"zoomLevel"}]},{color:{value:"#029F73"},visibility:[{operation:"GT",target:"mark",threshold:1e6,measure:"zoomLevel"},{operation:"LT",target:"mark",threshold:1e7,measure:"zoomLevel"}]},{color:{value:"#0072B2"},visibility:[{operation:"GT",target:"mark",threshold:1e5,measure:"zoomLevel"},{operation:"LT",target:"mark",threshold:1e6,measure:"zoomLevel"}]},{color:{value:"#D45E00"},visibility:[{operation:"GT",target:"mark",threshold:1e4,measure:"zoomLevel"},{operation:"LT",target:"mark",threshold:1e5,measure:"zoomLevel"}]},{color:{value:"#CB7AA7"},visibility:[{operation:"GT",target:"mark",threshold:1e3,measure:"zoomLevel"},{operation:"LT",target:"mark",threshold:1e4,measure:"zoomLevel"}]}]},SC={title:"Mark Displacement",subtitle:"Reposition marks to address visual overlaps using `displacement` options",spacing:1,centerRadius:.8,xDomain:{chromosome:"17",interval:[4308e4,4312e4]},views:[{alignment:"overlay",xDomain:{chromosome:"3",interval:[1425e5,143e6]},data:{url:GC,type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:0,name:"chr",type:"nominal"},{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"},{index:9,name:"exon_start",type:"nominal"},{index:10,name:"exon_end",type:"nominal"}]},dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"displace",method:"pile",boundingBox:{startField:"start",endField:"end"},newField:"row",maxRows:15}],title:"hg38 | Transcript (Max. 15 Rows)",tracks:[{dataTransform:[{type:"displace",method:"pile",boundingBox:{startField:"start",endField:"end"},newField:"row",maxRows:15},{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"triangleRight",x:{field:"end",type:"genomic",axis:"top"},xe:void 0,size:{value:15}},{dataTransform:[{type:"displace",method:"pile",boundingBox:{startField:"start",endField:"end"},newField:"row",maxRows:15},{type:"filter",field:"type",oneOf:["gene"]}],mark:"text",text:{field:"name",type:"nominal"},x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},style:{dy:-10}},{dataTransform:[{type:"displace",method:"pile",boundingBox:{startField:"start",endField:"end"},newField:"row",maxRows:15},{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"triangleLeft",x:{field:"start",type:"genomic"},size:{value:15},style:{align:"right"}},{dataTransform:[{type:"displace",method:"pile",boundingBox:{startField:"start",endField:"end"},newField:"row",maxRows:15},{type:"exonSplit",separator:",",flag:{field:"type",value:"exon"},fields:[{field:"exon_start",type:"genomic",newField:"start",chrField:"chr"},{field:"exon_end",type:"genomic",newField:"end",chrField:"chr"}]},{type:"filter",field:"type",oneOf:["exon"]}],mark:"rect",size:{value:10},x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"}},{dataTransform:[{type:"displace",method:"pile",boundingBox:{startField:"start",endField:"end"},newField:"row",maxRows:15},{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"rule",x:{field:"start",type:"genomic"},strokeWidth:{value:3},xe:{field:"end",type:"genomic"},style:{linePattern:{type:"triangleRight",size:5}}},{dataTransform:[{type:"displace",method:"pile",boundingBox:{startField:"start",endField:"end"},newField:"row",maxRows:15},{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"rule",x:{field:"start",type:"genomic"},strokeWidth:{value:3},xe:{field:"end",type:"genomic"},style:{linePattern:{type:"triangleRight",size:5}}}],row:{field:"row",type:"nominal"},color:{field:"strand",type:"nominal",domain:["+","-"],range:["#0072B2","#D45E00"]},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],opacity:{value:.8},style:{outline:"black"},width:700,height:500},{xDomain:{chromosome:"2",interval:[1268e5,1277e5]},tracks:[{alignment:"overlay",title:"Likely Benign",data:{url:"https://server.gosling-lang.org/api/v1/tileset_info/?d=clinvar-beddb",type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:7,name:"significance",type:"nominal"},{type:"nominal",index:3,name:"3"},{type:"nominal",index:4,name:"4"}]},dataTransform:[{type:"filter",field:"significance",oneOf:["Likely_benign"]},{type:"displace",boundingBox:{startField:"start",endField:"end",padding:5},method:"spread",newField:"a"}],tracks:[{mark:"point",size:{value:4},color:{value:"#029F73"},stroke:{value:"black"},strokeWidth:{value:1}},{mark:"text",color:{field:"3",type:"nominal",domain:["A","T","G","C"],legend:!0},text:{field:"3",type:"nominal"},y:{value:48}},{mark:"text",color:{field:"4",type:"nominal",domain:["A","T","G","C"]},text:{field:"4",type:"nominal"},y:{value:18}},{mark:"text",color:{value:"gray"},text:{value:"↓"},y:{value:33}}],x:{field:"aStart",type:"genomic"},xe:{field:"aEnd",type:"genomic"},y:{value:5},opacity:{value:.8},style:{inlineLegend:!0},width:700,height:60},{data:{url:"https://server.gosling-lang.org/api/v1/tileset_info/?d=clinvar-beddb",type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:7,name:"significance",type:"nominal"}]},dataTransform:[{type:"filter",field:"significance",oneOf:["Likely_benign"]},{type:"displace",boundingBox:{startField:"start",endField:"end",padding:5},method:"spread",newField:"a"}],mark:"betweenLink",xe:{field:"start",type:"genomic"},x:{field:"aStart",type:"genomic"},color:{value:"#029F73"},stroke:{value:"lightgrey"},strokeWidth:{value:.5},opacity:{value:.8},width:700,height:60},{alignment:"overlay",tracks:[{data:{url:"https://server.gosling-lang.org/api/v1/tileset_info/?d=clinvar-beddb",type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:7,name:"significance",type:"nominal"}]},dataTransform:[{type:"filter",field:"significance",oneOf:["Likely_benign"]}],mark:"rect",color:{value:"lightgray"},stroke:{value:"lightgray"},strokeWidth:{value:.5},x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},opacity:{value:.8}},{data:{url:tC,type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}],exonIntervalFields:[{index:12,name:"start"},{index:13,name:"end"}]},row:{field:"strand",type:"nominal",domain:["+","-"]},color:{field:"strand",type:"nominal",domain:["+","-"],range:["#7585FF","#FF8A85"]},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],opacity:{value:.8},dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"triangleRight",x:{field:"end",type:"genomic",axis:"none"},size:{value:15}},{data:{url:tC,type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}],exonIntervalFields:[{index:12,name:"start"},{index:13,name:"end"}]},row:{field:"strand",type:"nominal",domain:["+","-"]},color:{field:"strand",type:"nominal",domain:["+","-"],range:["#7585FF","#FF8A85"]},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],opacity:{value:.8},dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"text",text:{field:"name",type:"nominal"},x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},style:{dy:-15}},{data:{url:tC,type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}],exonIntervalFields:[{index:12,name:"start"},{index:13,name:"end"}]},row:{field:"strand",type:"nominal",domain:["+","-"]},color:{field:"strand",type:"nominal",domain:["+","-"],range:["#7585FF","#FF8A85"]},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],opacity:{value:.8},dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"triangleLeft",x:{field:"start",type:"genomic"},size:{value:15},style:{align:"right"}},{data:{url:tC,type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}],exonIntervalFields:[{index:12,name:"start"},{index:13,name:"end"}]},row:{field:"strand",type:"nominal",domain:["+","-"]},color:{field:"strand",type:"nominal",domain:["+","-"],range:["#7585FF","#FF8A85"]},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],opacity:{value:.8},dataTransform:[{type:"filter",field:"type",oneOf:["exon"]}],mark:"rect",x:{field:"start",type:"genomic"},size:{value:15},xe:{field:"end",type:"genomic"}},{data:{url:tC,type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}],exonIntervalFields:[{index:12,name:"start"},{index:13,name:"end"}]},row:{field:"strand",type:"nominal",domain:["+","-"]},color:{field:"strand",type:"nominal",domain:["+","-"],range:["#7585FF","#FF8A85"]},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],opacity:{value:.8},dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"rule",x:{field:"start",type:"genomic"},strokeWidth:{value:3},xe:{field:"end",type:"genomic"},style:{linePattern:{type:"triangleRight",size:5}}},{data:{url:tC,type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}],exonIntervalFields:[{index:12,name:"start"},{index:13,name:"end"}]},row:{field:"strand",type:"nominal",domain:["+","-"]},color:{field:"strand",type:"nominal",domain:["+","-"],range:["#7585FF","#FF8A85"]},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],opacity:{value:.8},dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"rule",x:{field:"start",type:"genomic"},strokeWidth:{value:3},xe:{field:"end",type:"genomic"},style:{linePattern:{type:"triangleLeft",size:5}}}],width:700,height:100}]},{tracks:[{data:{url:"https://server.gosling-lang.org/api/v1/tileset_info/?d=clinvar-beddb",type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:7,name:"significance",type:"nominal"}]},displacement:{type:"pile",padding:3.5},mark:"point",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},size:{value:3},color:{field:"significance",type:"nominal",domain:["Pathogenic","Pathogenic/Likely_pathogenic","Likely_pathogenic","Uncertain_significance","Likely_benign","Benign/Likely_benign","Benign"],range:["#CB3B8C","#CB71A3","#CB96B3","gray","#029F73","#5A9F8C","#5A9F8C"],legend:!0},width:700,height:260}]}],style:{outlineWidth:0}},FC={arrangement:"vertical",views:[{static:!0,layout:"circular",alignment:"stack",tracks:[{alignment:"overlay",data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"],binSize:4},x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative"},row:{field:"sample",type:"nominal"},color:{field:"sample",type:"nominal"},stroke:{value:"black"},strokeWidth:{value:.3},tracks:[{mark:"bar"},{mark:"brush",x:{linkingId:"detail-1"},color:{value:"blue"}},{mark:"brush",x:{linkingId:"detail-2"},color:{value:"red"}}],style:{outlineWidth:0},width:500,height:100},{data:{type:"csv",url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/rearrangements.bulk.1639.simple.filtered.pub",headerNames:["chr1","p1s","p1e","chr2","p2s","p2e","type","id","f1","f2","f3","f4","f5","f6"],separator:"\t",genomicFieldsToConvert:[{chromosomeField:"chr1",genomicFields:["p1s","p1e"]},{chromosomeField:"chr2",genomicFields:["p2s","p2e"]}]},dataTransform:[{type:"filter",field:"chr1",oneOf:["1","16","14","9","6","5","3"]},{type:"filter",field:"chr2",oneOf:["1","16","14","9","6","5","3"]}],mark:"withinLink",x:{field:"p1s",type:"genomic"},xe:{field:"p1e",type:"genomic"},x1:{field:"p2s",type:"genomic"},x1e:{field:"p2e",type:"genomic"},stroke:{field:"type",type:"nominal",domain:["deletion","inversion","translocation","tandem-duplication"]},strokeWidth:{value:.8},opacity:{value:.15},width:500,height:100}]},{spacing:10,arrangement:"horizontal",views:[{tracks:[{data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"],binSize:4},mark:"bar",x:{field:"start",type:"genomic",linkingId:"detail-1",domain:{chromosome:"5"}},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative"},row:{field:"sample",type:"nominal"},color:{field:"sample",type:"nominal"},stroke:{value:"black"},strokeWidth:{value:.3},style:{background:"blue"},width:245,height:150}]},{tracks:[{data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"],binSize:4},mark:"bar",x:{field:"start",type:"genomic",domain:{chromosome:"16"},linkingId:"detail-2"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative"},row:{field:"sample",type:"nominal"},color:{field:"sample",type:"nominal",legend:!0},stroke:{value:"black"},strokeWidth:{value:.3},style:{background:"red"},width:245,height:150}]}],style:{backgroundOpacity:.1}}]},kC={url:tC,type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}],exonIntervalFields:[{index:12,name:"start"},{index:13,name:"end"}]},vC={alignment:"overlay",title:"HiGlass",data:kC,tracks:[{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"triangleRight",x:{field:"end",type:"genomic",domain:undefined,axis:"top"},size:{value:15}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"text",text:{field:"name",type:"nominal"},x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},style:{dy:-15}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"triangleLeft",x:{field:"start",type:"genomic"},size:{value:15},style:{align:"right"}},{dataTransform:[{type:"filter",field:"type",oneOf:["exon"]}],mark:"rect",x:{field:"start",type:"genomic"},size:{value:15},xe:{field:"end",type:"genomic"}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"rule",x:{field:"start",type:"genomic"},strokeWidth:{value:3},xe:{field:"end",type:"genomic"},style:{linePattern:{type:"triangleRight",size:5}}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"rule",x:{field:"start",type:"genomic"},strokeWidth:{value:3},xe:{field:"end",type:"genomic"},style:{linePattern:{type:"triangleLeft",size:5}}}],row:{field:"strand",type:"nominal",domain:["+","-"]},color:{field:"strand",type:"nominal",domain:["+","-"],range:["#7585FF","#FF8A85"]},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],opacity:{value:.8},width:350,height:100},NC={higlass:vC,igv:{alignment:"overlay",title:"IGV",data:kC,tracks:[{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"text",text:{field:"name",type:"nominal"},x:{field:"start",type:"genomic",domain:undefined,axis:"top"},xe:{field:"end",type:"genomic"}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"rect",x:{field:"start",type:"genomic",axis:"top"},size:{value:15},xe:{field:"end",type:"genomic"}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"rule",x:{field:"start",type:"genomic",axis:"top"},strokeWidth:{value:0},xe:{field:"end",type:"genomic"},color:{value:"white"},opacity:{value:.6},style:{linePattern:{type:"triangleLeft",size:10}}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"rule",x:{field:"start",type:"genomic",axis:"top"},strokeWidth:{value:0},xe:{field:"end",type:"genomic"},color:{value:"white"},opacity:{value:.6},style:{linePattern:{type:"triangleRight",size:10}}}],row:{field:"strand",type:"nominal",domain:["+","-"]},color:{value:"#0900B1"},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],width:350,height:100},cyverse:{alignment:"overlay",title:"Cyverse-QUBES",data:kC,tracks:[{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"text",text:{field:"name",type:"nominal"},x:{field:"start",type:"genomic",domain:undefined},xe:{field:"end",type:"genomic"},color:{value:"black"}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"triangleRight",x:{field:"end",type:"genomic",axis:"top"},color:{value:"#999999"}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"triangleLeft",x:{field:"start",type:"genomic",axis:"top"},color:{value:"#999999"},style:{align:"right"}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"rect",x:{field:"start",type:"genomic",axis:"top"},xe:{field:"end",type:"genomic"},color:{value:"lightgray"}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"rule",x:{field:"start",type:"genomic",axis:"top"},strokeWidth:{value:5},xe:{field:"end",type:"genomic"},color:{value:"gray"}},{dataTransform:[{type:"filter",field:"type",oneOf:["exon"]}],mark:"rect",x:{field:"start",type:"genomic",axis:"top"},xe:{field:"end",type:"genomic"},color:{value:"#E2A6F5"},stroke:{value:"#BB57C9"},strokeWidth:{value:1}}],row:{field:"strand",type:"nominal",domain:["+","-"]},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],size:{value:15},width:350,height:100},gmgdb:{alignment:"overlay",title:"GmGDV",data:kC,tracks:[{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"text",text:{field:"name",type:"nominal"},x:{field:"start",type:"genomic",domain:undefined,axis:"top"},xe:{field:"end",type:"genomic"},style:{dy:-14}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"triangleRight",x:{field:"end",type:"genomic",axis:"top"},size:{value:15}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"triangleLeft",x:{field:"start",type:"genomic",axis:"top"},size:{value:15},style:{align:"right"}},{dataTransform:[{type:"filter",field:"type",oneOf:["exon"]}],mark:"rect",x:{field:"start",type:"genomic",axis:"top"},size:{value:10},xe:{field:"end",type:"genomic"}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"rule",x:{field:"start",type:"genomic",axis:"top"},strokeWidth:{value:3},xe:{field:"end",type:"genomic"}}],row:{field:"strand",type:"nominal",domain:["+","-"]},color:{field:"strand",type:"nominal",domain:["+","-"],range:["blue","red"]},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],width:350,height:100},give:{alignment:"overlay",title:"GIVE",data:kC,tracks:[{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"rect",x:{field:"end",type:"genomic",axis:"top"},size:{value:7}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"rect",x:{field:"start",type:"genomic"},size:{value:7}},{dataTransform:[{type:"filter",field:"type",oneOf:["exon"]}],mark:"rect",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},size:{value:14}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"rule",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},strokeWidth:{value:3}}],row:{field:"strand",type:"nominal",domain:["+","-"]},color:{value:"#4050B4"},width:350,height:100},corces:{alignment:"overlay",title:"Corces et al.",data:kC,tracks:[{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"text",text:{field:"name",type:"nominal"},x:{field:"start",type:"genomic",domain:undefined},xe:{field:"end",type:"genomic"},size:{value:8},style:{textFontSize:8,dy:-12}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"text",text:{field:"name",type:"nominal"},x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},size:{value:8},style:{textFontSize:8,dy:10}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"rect",x:{field:"end",type:"genomic"},size:{value:7}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"rect",x:{field:"start",type:"genomic"},size:{value:7}},{dataTransform:[{type:"filter",field:"type",oneOf:["exon"]}],mark:"rect",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},size:{value:14}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"rule",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},strokeWidth:{value:3}}],row:{field:"strand",type:"nominal",domain:["+","-"]},color:{field:"strand",type:"nominal",domain:["+","-"],range:["#012DB8","#BE1E2C"]},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],width:350,height:100},g6:{alignment:"overlay",data:kC,tracks:[{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"text",text:{field:"name",type:"nominal"},x:{field:"start",type:"genomic",domain:undefined,axis:"top"},xe:{field:"end",type:"genomic"},style:{dy:-14}},{dataTransform:[{type:"filter",field:"type",oneOf:["exon"]}],mark:"rect",x:{field:"start",type:"genomic",axis:"top"},size:{value:10},xe:{field:"end",type:"genomic"}},{dataTransform:[{type:"filter",field:"type",oneOf:["intron"]}],mark:"rule",x:{field:"start",type:"genomic",axis:"top"},strokeWidth:{value:2},xe:{field:"end",type:"genomic"},style:{curve:"top"}}],row:{field:"strand",type:"nominal",domain:["+","-"]},color:{value:"#B54F4A"},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],width:350,height:100},g7:{alignment:"overlay",data:kC,tracks:[{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"text",text:{field:"name",type:"nominal"},x:{field:"start",type:"genomic",domain:undefined,axis:"top"},color:{value:"black"},xe:{field:"end",type:"genomic"}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"rect",x:{field:"start",type:"genomic",axis:"top"},xe:{field:"end",type:"genomic"},color:{value:"#666666"}},{dataTransform:[{type:"filter",field:"type",oneOf:["exon"]}],mark:"rect",x:{field:"start",type:"genomic",axis:"top"},xe:{field:"end",type:"genomic"},color:{value:"#FF6666"}},{dataTransform:[{type:"filter",field:"type",oneOf:["intron"]}],mark:"rect",x:{field:"start",type:"genomic",axis:"top"},xe:{field:"end",type:"genomic"},color:{value:"#99FEFF"}}],size:{value:30},row:{field:"strand",type:"nominal",domain:["+","-"]},stroke:{value:"#777777"},strokeWidth:{value:1},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],width:350,height:100}},fC={layout:"linear",xDomain:{chromosome:"3",interval:[52168e3,5289e4]},arrangement:"horizontal",views:[{arrangement:"vertical",views:[NC.higlass,NC.corces,NC.igv]},{arrangement:"vertical",views:[NC.cyverse,NC.gmgdb,NC.g7]}]},zC={xDomain:{chromosome:"3",interval:[1014e4,1016e4]},centerRadius:.1,layout:"linear",spacing:0,alignment:"stack",tracks:[NC.higlass,{alignment:"overlay",data:{url:nC,type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:7,name:"significance",type:"nominal"}]},tracks:[{mark:"bar",x:{field:"start",type:"genomic"},y:{field:"significance",type:"nominal",domain:["Pathogenic","Pathogenic/Likely_pathogenic","Likely_pathogenic","Uncertain_significance","Likely_benign","Benign/Likely_benign","Benign"],baseline:"Uncertain_significance",range:[150,20]},size:{value:1},color:{value:"lightgray"},stroke:{value:"lightgray"},strokeWidth:{value:1},opacity:{value:.3},visibility:[{measure:"zoomLevel",target:"mark",threshold:1e5,operation:"LT",transitionPadding:1e5}]},{mark:"point",x:{field:"start",type:"genomic"},row:{field:"significance",type:"nominal",domain:["Pathogenic","Pathogenic/Likely_pathogenic","Likely_pathogenic","Uncertain_significance","Likely_benign","Benign/Likely_benign","Benign"]},size:{value:7},opacity:{value:.8},visibility:[{measure:"zoomLevel",target:"mark",threshold:1e6,operation:"LT",transitionPadding:1e6}]},{data:{url:VC,type:"multivec",row:"significance",column:"position",value:"count",categories:["Benign","Benign/Likely_benign","Likely_benign","Uncertain_significance","Likely_pathogenic","Pathogenic/Likely_pathogenic","Pathogenic"],binSize:4},mark:"bar",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"count",type:"quantitative",axis:"none"},color:{field:"significance",type:"nominal",domain:["Pathogenic","Pathogenic/Likely_pathogenic","Likely_pathogenic","Uncertain_significance","Likely_benign","Benign/Likely_benign","Benign"],range:["#CB3B8C","#CB71A3","#CB96B3","gray","#029F73","#5A9F8C","#5A9F8C"],legend:!0},visibility:[{measure:"zoomLevel",target:"mark",threshold:5e5,operation:"GT",transitionPadding:5e5}]}],color:{field:"significance",type:"nominal",domain:["Pathogenic","Pathogenic/Likely_pathogenic","Likely_pathogenic","Uncertain_significance","Likely_benign","Benign/Likely_benign","Benign"],range:["#CB3B8C","#CB71A3","#CB96B3","gray","#029F73","#5A9F8C","#5A9F8C"]},width:800,height:150}]},xC={sequence:{alignment:"overlay",data:{url:sC,type:"multivec",row:"base",column:"position",value:"count",categories:["A","T","G","C"],start:"start",end:"end"},tracks:[{mark:"bar",y:{field:"count",type:"quantitative",axis:"none"}},{dataTransform:[{type:"filter",field:"count",oneOf:[0],not:!0}],mark:"text",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},size:{value:24},color:{value:"white"},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:30,target:"mark"},{operation:"LT",measure:"zoomLevel",threshold:10,target:"track"}]}],x:{field:"position",type:"genomic"},color:{field:"base",type:"nominal",domain:["A","T","G","C"],legend:!0},text:{field:"base",type:"nominal"},style:{textFontWeight:"bold"},width:400,height:80},cytoband:{alignment:"overlay",data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv",type:"csv",chromosomeField:"Chromosome",genomicFields:["chromStart","chromEnd"]},tracks:[{mark:"rect",color:{field:"Chromosome",type:"nominal",domain:["chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY"],range:["#F6F6F6","gray"]},x:{field:"chromStart",type:"genomic",aggregate:"min"},xe:{field:"chromEnd",aggregate:"max",type:"genomic"},strokeWidth:{value:2},stroke:{value:"gray"},visibility:[{operation:"greater-than",measure:"zoomLevel",threshold:1e8,target:"mark",transitionPadding:1e8}]},{mark:"text",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"],not:!0}],text:{field:"Name",type:"nominal"},color:{field:"Stain",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar"],range:["black","black","black","black","white","black"]},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}]},{mark:"rect",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"],not:!0}],color:{field:"Stain",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar"],range:["white","#D9D9D9","#979797","#636363","black","#A0A0F2"]}},{mark:"triangleRight",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"]},{type:"filter",field:"Name",include:"q"}],color:{value:"#B40101"}},{mark:"triangleLeft",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"]},{type:"filter",field:"Name",include:"p"}],color:{value:"#B40101"}}],x:{field:"chromStart",type:"genomic"},xe:{field:"chromEnd",type:"genomic"},size:{value:20},stroke:{value:"gray"},strokeWidth:{value:.5},visibility:[{operation:"greater-than",measure:"width",threshold:3,transitionPadding:5,target:"mark"}],style:{outline:"white"},width:400,height:25}},UC={arrangement:"vertical",views:[e(Z({layout:"linear",xDomain:{chromosome:"1",interval:[3e6,3000010]}},xC.sequence),{width:800,height:100})]},MC={arrangement:"vertical",views:[e(Z({},zC),{xDomain:{chromosome:"13",interval:[315e5,3315e4]}}),e(Z({},zC),{xDomain:{chromosome:"13",interval:[32e6,327e5]}}),e(Z({},zC),{xDomain:{chromosome:"13",interval:[32314e3,32402500]}})]},LC={alignment:"overlay",title:"NC_045512.2 Genes",data:{type:"csv",url:"https://s3.amazonaws.com/gosling-lang.org/data/COVID/NC_045512.2-Genes.csv",genomicFields:["Start","Stop"]},tracks:[{mark:"rect",color:{value:"#0072B2"},stroke:{value:"white"},strokeWidth:{value:2}},{mark:"rule",color:{value:"white"},opacity:{value:.6},strokeWidth:{value:0},style:{linePattern:{type:"triangleRight",size:10}}},{mark:"text",text:{field:"Gene symbol",type:"nominal"},color:{value:"black"},stroke:{value:"white"},strokeWidth:{value:3},visibility:[{target:"mark",measure:"width",threshold:"|xe-x|",operation:"LTET",transitionPadding:30}]}],x:{field:"Start",type:"genomic"},xe:{field:"Stop",type:"genomic"},width:800,height:30},TC={title:"SARS-CoV-2",subtitle:"Data Source: WashU Virus Genome Browser, NCBI, GISAID",assembly:"unknown",layout:"linear",spacing:50,views:[e(Z({},LC),{static:!0,layout:"linear",xDomain:{interval:[1,29903]},tracks:[...LC.tracks,{mark:"brush",x:{linkingId:"detail"}}]}),{centerRadius:0,xDomain:{interval:[1,29903]},linkingId:"detail",alignment:"stack",tracks:[{alignment:"overlay",title:"S Protein Annotation",data:{type:"csv",url:"https://s3.amazonaws.com/gosling-lang.org/data/COVID/sars-cov-2_Sprot_annot_sorted.bed",genomicFields:["Start","Stop"]},tracks:[{mark:"rect",color:{field:"Protein",type:"nominal",domain:["receptor-binding domain (RBD)","receptor-binding motif (RBM)","S1/S2 cleavage site","heptad repeat 1 (HR1)","heptad repeat 2 (HR2)"]},xe:{field:"Stop",type:"genomic"}},{mark:"text",text:{field:"Protein",type:"nominal"},color:{value:"#333"},stroke:{value:"white"},strokeWidth:{value:3},style:{textAnchor:"end"}}],x:{field:"Start",type:"genomic"},row:{field:"Protein",type:"nominal",domain:["receptor-binding domain (RBD)","receptor-binding motif (RBM)","S1/S2 cleavage site","heptad repeat 1 (HR1)","heptad repeat 2 (HR2)"]},width:800,height:80},LC,e(Z({title:"NC_045512.2 Sequence"},xC.sequence),{data:e(Z({},xC.sequence.data),{url:"https://server.gosling-lang.org/api/v1/tileset_info/?d=NC_045512_2-multivec"}),style:{inlineLegend:!0},width:800,height:40}),{title:"TRS-L-Dependent Recombination Events",data:{type:"csv",url:"https://s3.amazonaws.com/gosling-lang.org/data/COVID/TRS-L-dependent_recombinationEvents_sorted.bed",genomicFields:["Start1","Stop1","Start2","Stop2"],sampleLength:100},mark:"withinLink",x:{field:"Start1",type:"genomic"},xe:{field:"Stop1",type:"genomic"},x1:{field:"Start2",type:"genomic"},x1e:{field:"Stop2",type:"genomic"},stroke:{value:"#0072B2"},color:{value:"#0072B2"},opacity:{value:.1},width:800,height:400}]}]},DC={title:"Between Links in Circular Layouts with Parallel Arrangements",layout:"circular",static:!0,spacing:.01,centerRadius:.3,alignment:"stack",tracks:[{data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1"],binSize:1},mark:"bar",x:{field:"start",type:"genomic",axis:"top"},xe:{field:"end",type:"genomic",axis:"top"},y:{field:"peak",type:"quantitative",axis:"right"},color:{value:"lightgray"},width:700,height:60},{data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv",type:"csv",chromosomeField:"Chromosome",genomicFields:["chromStart","chromEnd"]},mark:"rect",color:{field:"Stain",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar","acen"],range:["white","#D9D9D9","#979797","#636363","black","#F0F0F0","#8D8D8D"]},x:{field:"chromStart",type:"genomic"},xe:{field:"chromEnd",type:"genomic"},stroke:{value:"black"},strokeWidth:{value:.5},width:700,height:30},{alignment:"overlay",data:{url:"https://raw.githubusercontent.com/vigsterkr/circos/master/data/5/segdup.txt",type:"csv",headerNames:["id","chr","p1","p2"],chromosomePrefix:"hs",chromosomeField:"chr",genomicFields:["p1","p2"],separator:" ",longToWideId:"id",sampleLength:5e3},opacity:{value:.1},tracks:[{dataTransform:[{type:"filter",field:"chr",oneOf:["hs1"],not:!0}],mark:"betweenLink",x:{field:"p2_2",type:"genomic"},xe:{field:"p1",type:"genomic"},stroke:{value:"lightgray"},strokeWidth:{value:1}},{dataTransform:[{type:"filter",field:"chr",oneOf:["hs1"]}],mark:"betweenLink",x:{field:"p2_2",type:"genomic"},xe:{field:"p1",type:"genomic"},stroke:{value:"black"},strokeWidth:{value:1}}],width:1e3,height:300},{data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv",type:"csv",chromosomeField:"Chromosome",genomicFields:["chromStart","chromEnd"]},mark:"rect",color:{field:"Stain",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar","acen"],range:["white","#D9D9D9","#979797","#636363","black","#F0F0F0","#8D8D8D"]},x:{field:"chromStart",type:"genomic"},xe:{field:"chromEnd",type:"genomic"},stroke:{value:"black"},strokeWidth:{value:.5},width:700,height:30}]},QC={title:"Single-cell Epigenomic Analysis",subtitle:"Corces et al. 2020",static:!0,layout:"linear",arrangement:"vertical",views:[{layout:"linear",xDomain:{chromosome:"3"},centerRadius:.8,tracks:[{alignment:"overlay",title:"chr3",data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/cytogenetic_band.csv",type:"csv",chromosomeField:"Chr.",genomicFields:["ISCN_start","ISCN_stop","Basepair_start","Basepair_stop"],quantitativeFields:["Band","Density"]},tracks:[{mark:"rect",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen-1","acen-2"],not:!0}],color:{field:"Density",type:"nominal",domain:["","25","50","75","100"],range:["white","#D9D9D9","#979797","#636363","black"]},size:{value:20}},{mark:"rect",dataTransform:[{type:"filter",field:"Stain",oneOf:["gvar"]}],color:{value:"#A0A0F2"},size:{value:20}},{mark:"triangleRight",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen-1"]}],color:{value:"#B40101"},size:{value:20}},{mark:"triangleLeft",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen-2"]}],color:{value:"#B40101"},size:{value:20}},{mark:"brush",x:{linkingId:"detail"},color:{value:"red"},opacity:{value:1},strokeWidth:{value:1},stroke:{value:"red"}}],x:{field:"Basepair_start",type:"genomic",axis:"none"},xe:{field:"Basepair_stop",type:"genomic"},stroke:{value:"black"},strokeWidth:{value:1},style:{outlineWidth:0},width:400,height:25}]},{xDomain:{chromosome:"3",interval:[52168e3,5289e4]},linkingId:"detail",mark:"bar",x:{field:"position",type:"genomic"},y:{field:"peak",type:"quantitative",axis:"right"},style:{outline:"#20102F"},width:400,height:40,tracks:[{data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/ExcitatoryNeurons-insertions_bin100_RIPnorm.bw",type:"bigwig",column:"position",value:"peak"},title:"Excitatory neurons",color:{value:"#F29B67"}},{data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/InhibitoryNeurons-insertions_bin100_RIPnorm.bw",type:"bigwig",column:"position",value:"peak"},title:"Inhibitory neurons",color:{value:"#3DC491"}},{data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/DopaNeurons_Cluster10_AllFrags_projSUNI2_insertions_bin100_RIPnorm.bw",type:"bigwig",column:"position",value:"peak"},title:"Dopaminergic neurons",mark:"bar",color:{value:"#565C8B"}},{data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/Microglia-insertions_bin100_RIPnorm.bw",type:"bigwig",column:"position",value:"peak"},title:"Microglia",color:{value:"#77C0FA"}},{data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/Oligodendrocytes-insertions_bin100_RIPnorm.bw",type:"bigwig",column:"position",value:"peak"},title:"Oligodendrocytes",mark:"bar",color:{value:"#9B46E5"}},{data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/Astrocytes-insertions_bin100_RIPnorm.bw",type:"bigwig",column:"position",value:"peak"},title:"Astrocytes",mark:"bar",color:{value:"#D73636"}},{data:{url:"https://s3.amazonaws.com/gosling-lang.org/data/OPCs-insertions_bin100_RIPnorm.bw",type:"bigwig",column:"position",value:"peak"},title:"OPCs",mark:"bar",color:{value:"#E38ADC"}},{alignment:"overlay",title:"Genes",data:{url:tC,type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}],exonIntervalFields:[{index:12,name:"start"},{index:13,name:"end"}]},style:{outline:"#20102F"},tracks:[{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"text",text:{field:"name",type:"nominal"},x:{field:"start",type:"genomic"},size:{value:8},xe:{field:"end",type:"genomic"},style:{textFontSize:8,dy:-12}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"text",text:{field:"name",type:"nominal"},x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},size:{value:8},style:{textFontSize:8,dy:10}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"rect",x:{field:"end",type:"genomic"},size:{value:7}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"rect",x:{field:"start",type:"genomic"},size:{value:7}},{dataTransform:[{type:"filter",field:"type",oneOf:["exon"]}],mark:"rect",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},size:{value:14}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"rule",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},strokeWidth:{value:3}}],row:{field:"strand",type:"nominal",domain:["+","-"]},color:{field:"strand",type:"nominal",domain:["+","-"],range:["#012DB8","#BE1E2C"]},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],width:400,height:80},{data:{url:"https://server.gosling-lang.org/api/v1/tileset_info/?d=oligodendrocyte-plac-seq-bedpe",type:"beddb",genomicFields:[{name:"start",index:1},{name:"end",index:2}]},mark:"withinLink",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{flip:!0},strokeWidth:{value:1},color:{value:"none"},stroke:{value:"#F97E2A"},opacity:{value:.1},width:400,height:60},{data:{url:"https://server.gosling-lang.org/api/v1/tileset_info/?d=microglia-plac-seq-bedpe",type:"beddb",genomicFields:[{name:"start",index:1},{name:"end",index:2}]},mark:"withinLink",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{flip:!0},strokeWidth:{value:1},color:{value:"none"},stroke:{value:"#50ADF9"},opacity:{value:.1},overlayOnPreviousTrack:!0,width:400,height:60},{title:"PLAC-seq (H3K4me3) Nott et al.",data:{url:"https://server.gosling-lang.org/api/v1/tileset_info/?d=neuron-plac-seq-bedpe",type:"beddb",genomicFields:[{name:"start",index:1},{name:"end",index:2}]},mark:"withinLink",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{flip:!0},strokeWidth:{value:1},color:{value:"none"},stroke:{value:"#7B0EDC"},opacity:{value:.1},overlayOnPreviousTrack:!0,width:400,height:60}]}]},OC={alignment:"overlay",data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/cytogenetic_band.csv",type:"csv",chromosomeField:"Chr.",genomicFields:["ISCN_start","ISCN_stop","Basepair_start","Basepair_stop"],quantitativeFields:["Band","Density"]},tracks:[{mark:"text",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen-1","acen-2"],not:!0}],text:{field:"Band",type:"nominal"},color:{value:"black"},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}]},{mark:"rect",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen-1","acen-2"],not:!0}],color:{field:"Density",type:"nominal",domain:["","25","50","75","100"],range:["white","#D9D9D9","#979797","#636363","black"]}},{mark:"rect",dataTransform:[{type:"filter",field:"Stain",oneOf:["gvar"]}],color:{value:"#A0A0F2"}},{mark:"triangleRight",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen-1"]}],color:{value:"#B40101"}},{mark:"triangleLeft",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen-2"]}],color:{value:"#B40101"}}],x:{field:"Basepair_start",type:"genomic"},xe:{field:"Basepair_stop",type:"genomic"},stroke:{value:"gray"},strokeWidth:{value:.5},width:600,height:20},PC={data:{url:bC,type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"]},mark:"area",x:{field:"position",type:"genomic"},y:{field:"peak",type:"quantitative"},color:{field:"sample",type:"nominal"},width:600,height:30},jC={static:!0,layout:"linear",centerRadius:.2,arrangement:"parallel",views:[{xDomain:{chromosome:"1"},tracks:[e(Z({},PC),{width:1e3}),e(Z({},OC),{width:1e3})]},{xDomain:{chromosome:"2"},tracks:[e(Z({},PC),{width:970}),e(Z({},OC),{width:970})]},{xDomain:{chromosome:"3"},tracks:[e(Z({},PC),{width:800}),e(Z({},OC),{width:800})]},{xDomain:{chromosome:"4"},tracks:[e(Z({},PC),{width:770}),e(Z({},OC),{width:770})]},{xDomain:{chromosome:"5"},tracks:[e(Z({},PC),{width:740}),e(Z({},OC),{width:740})]}]},EC={title:"Track Template In Gosling.js",subtitle:"Gosling.js enables track templates! This allows to create complex visualization more easily.",spacing:0,layout:"linear",centerRadius:.5,style:{enableSmoothPath:!0},views:[{xDomain:{chromosome:"3",interval:[52168e3,5289e4]},tracks:[{template:"gene",data:{url:tC,type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}],exonIntervalFields:[{index:12,name:"start"},{index:13,name:"end"}]},encoding:{startPosition:{field:"start"},endPosition:{field:"end"},strandColor:{field:"strand",range:["gray"]},strandRow:{field:"strand"},opacity:{value:.4},geneHeight:{value:30},geneLabel:{field:"name"},geneLabelFontSize:{value:30},geneLabelColor:{field:"strand",range:["gray"]},geneLabelStroke:{value:"white"},geneLabelStrokeThickness:{value:4},geneLabelOpacity:{value:1},type:{field:"type"}},width:800,height:300}]},{xDomain:{chromosome:"1",interval:[77925299,77925320]},tracks:[{template:"sequence",data:{url:sC,type:"multivec",row:"base",column:"position",value:"count",categories:["A","T","G","C"],start:"start",end:"end"},encoding:{barLength:{field:"count",type:"quantitative"},baseBackground:{field:"base",type:"nominal"},baseLabelColor:{field:"base",type:"nominal"},position:{field:"position",type:"genomic"},startPosition:{field:"start",type:"genomic"},endPosition:{field:"end",type:"genomic"}},width:800,height:100}]},{xDomain:{chromosome:"1"},tracks:[{template:"ideogram",data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv",type:"csv",chromosomeField:"Chromosome",genomicFields:["chromStart","chromEnd"]},encoding:{startPosition:{field:"chromStart"},endPosition:{field:"chromEnd"},stainBackgroundColor:{field:"Stain"},stainLabelColor:{field:"Stain"},name:{field:"Name"},stainStroke:{value:"black"}},width:800,height:60}]}]},qC={url:"https://resgen.io/api/v1/tileset_info/?d=UvVPeLHuRDiYA3qwFlm7xQ",type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1"]},_C=(g,I,C=0,A=!0)=>({title:`Basic Marks: ${g}`,subtitle:"Tutorial Examples",tracks:[e(Z({layout:"linear",width:800,height:180,data:I,mark:g},A?{x:{field:"position",type:"genomic",axis:"bottom"}}:{x:{field:"start",type:"genomic",axis:"bottom"},xe:{field:"end",type:"genomic"}}),{y:{field:"peak",type:"quantitative",axis:"right"},size:C>0?{value:C}:{field:"peak",type:"quantitative"}})]}),$C=_C("area",qC,2),gA=_C("line",qC,2),IA=_C("point",qC,0),CA=_C("bar",e(Z({},qC),{binSize:5}),5,!1),AA={title:"Example: Brushing and Linking",layout:"linear",tracks:[{width:800,height:200,data:qC,mark:"line",x:{field:"position",type:"genomic",domain:{chromosome:"1"},axis:"top"},y:{field:"peak",type:"quantitative"},alignment:"overlay",tracks:[{},{mark:"brush",x:{linkingId:"linking-with-brush"},color:{value:"steelBlue"}}]},{width:800,height:200,data:qC,mark:"line",x:{field:"position",type:"genomic",domain:{chromosome:"1",interval:[2e8,22e7]},axis:"top",linkingId:"linking-with-brush"},y:{field:"peak",type:"quantitative"},opacity:{value:1},style:{background:"steelBlue",backgroundOpacity:.1}}]},lA={title:"Example: Semantic Zooming",subtitle:"Text marks that indicate base pairs will appear when zooming in",tracks:[e(Z({},xC.sequence),{width:800})]},iA={title:"Example: Semantic Zooming",subtitle:"Text and triangle marks will show when zooming in to provide more details",tracks:[e(Z({},xC.cytoband),{width:800})]},cA={DEBUG:{name:"DEBUG",spec:{title:"Between-Connectivity In 2D Tracks",subtitle:"Between-link examples with three types, i.e., straight, corner, and curve",xDomain:{interval:[0,1e9]},style:{outlineWidth:.5},spacing:10,views:[{arrangement:"horizontal",views:[{yOffset:250,spacing:10,orientation:"vertical",tracks:[{data:{url:"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec",type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"],binSize:4},mark:"rect",x:{field:"start",type:"genomic",axis:"left"},xe:{field:"end",type:"genomic"},row:{field:"sample",type:"nominal",legend:!1},color:{field:"peak",type:"quantitative",legend:!1,range:"grey"},width:100,height:500},{data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/circos-segdup-edited.txt",type:"csv",chromosomeField:"c2",genomicFields:["s1","e1","s2","e2"]},style:{linkConnectionType:"corner"},mark:"withinLink",x:{field:"s1",type:"genomic",axis:"none"},xe:{field:"s2",type:"genomic"},flipY:!1,color:{value:"#3275B4"},size:{value:2},stroke:{value:"#3275B4"},opacity:{value:.2},width:100,height:500}]},{arrangement:"vertical",views:[{spacing:10,tracks:[{data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/circos-segdup-edited.txt",type:"csv",chromosomeField:"c2",genomicFields:["s1","e1","s2","e2"]},style:{linkConnectionType:"corner"},mark:"withinLink",x:{field:"s1",type:"genomic"},xe:{field:"s2",type:"genomic"},flipY:!1,color:{value:"#3275B4"},size:{value:2},stroke:{value:"#3275B4"},opacity:{value:.2},width:500,height:100},{data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/circos-segdup-edited.txt",type:"csv",chromosomeField:"c2",genomicFields:["s1","e1","s2","e2"]},style:{linkConnectionType:"corner"},mark:"withinLink",x:{field:"s1",type:"genomic"},xe:{field:"s2",type:"genomic"},flipY:!1,color:{value:"#3275B4"},size:{value:2},stroke:{value:"#3275B4"},opacity:{value:.2},width:500,height:100}]},{tracks:[{title:"Curved Connection",alignment:"overlay",data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/circos-segdup-edited.txt",type:"csv",chromosomeField:"c2",genomicFields:["s1","e1","s2","e2"]},style:{linkConnectionType:"corner"},tracks:[{mark:"betweenLink",x:{field:"s1",type:"genomic",axis:"none"},y:{field:"s2",type:"genomic",axis:"none"}},{mark:"betweenLink",y:{field:"s1",type:"genomic",axis:"none"},x:{field:"s2",type:"genomic",axis:"none"}},{mark:"point",x:{field:"s1",type:"genomic",axis:"none"},y:{field:"s2",type:"genomic",axis:"none"},opacity:{value:1}},{mark:"point",y:{field:"s1",type:"genomic",axis:"none"},x:{field:"s2",type:"genomic",axis:"none"},opacity:{value:1}}],color:{value:"#3275B4"},size:{value:1},stroke:{value:"#3275B4"},opacity:{value:.2},width:500,height:500}]}]},{xDomain:{interval:[0,1e9]},yOffset:250,spacing:10,orientation:"vertical",tracks:[{data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/circos-segdup-edited.txt",type:"csv",chromosomeField:"c2",genomicFields:["s1","e1","s2","e2"]},style:{linkConnectionType:"corner"},mark:"withinLink",x:{field:"s1",type:"genomic",axis:"none"},xe:{field:"s2",type:"genomic"},flipY:!0,color:{value:"#3275B4"},size:{value:2},stroke:{value:"#3275B4"},opacity:{value:.2},width:100,height:500},{data:{url:"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec",type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"],binSize:4},mark:"rect",x:{field:"start",type:"genomic",axis:"right"},xe:{field:"end",type:"genomic"},row:{field:"sample",type:"nominal",legend:!1},color:{field:"peak",type:"quantitative",legend:!1,range:"rdbu"},width:100,height:500}]}]},{views:[{xOffset:250,spacing:10,tracks:[{data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/circos-segdup-edited.txt",type:"csv",chromosomeField:"c2",genomicFields:["s1","e1","s2","e2"]},style:{linkConnectionType:"corner"},mark:"withinLink",x:{field:"s1",type:"genomic",axis:"none"},xe:{field:"s2",type:"genomic"},flipY:!0,color:{value:"#3275B4"},size:{value:2},stroke:{value:"#3275B4"},opacity:{value:.2},width:500,height:100},{data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/circos-segdup-edited.txt",type:"csv",chromosomeField:"c2",genomicFields:["s1","e1","s2","e2"]},style:{linkConnectionType:"corner"},mark:"withinLink",x:{field:"s1",type:"genomic",axis:"bottom"},xe:{field:"s2",type:"genomic"},flipY:!0,color:{value:"#3275B4"},size:{value:2},stroke:{value:"#3275B4"},opacity:{value:.2},width:500,height:100}]}]}]},hidden:!0},VISUAL_ENCODING:{name:"Basic Example: Visual Encoding",spec:HC},VISUAL_ENCODING_CIRCULAR:{name:"Basic Example: Circular Visual Encoding",spec:uC},BAND:{name:"Basic Example: Band Connection",spec:{layout:"linear",xDomain:{chromosome:"1",interval:[1039e5,1041e5]},spacing:0,tracks:[{data:{type:"csv",url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/circos-segdup-edited.txt",chromosomeField:"c2",genomicFields:["s1","e1","s2","e2"]},mark:"rect",x:{field:"s1",type:"genomic"},xe:{field:"e1",type:"genomic"},stroke:{value:"#4C6629"},strokeWidth:{value:.8},tooltip:[{field:"s1",type:"genomic",alt:'<b style="color:green">Start Position</b>'},{field:"e1",type:"genomic",alt:'<b style="color:green">End Position</b>'}],opacity:{value:.15},color:{value:"#85B348"},width:500,height:16},{data:{type:"csv",url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/circos-segdup-edited.txt",chromosomeField:"c2",genomicFields:["s1","e1","s2","e2"]},mark:"betweenLink",x:{field:"s1",type:"genomic"},xe:{field:"e1",type:"genomic"},x1:{field:"s2",type:"genomic"},x1e:{field:"e2",type:"genomic"},stroke:{value:"#4C6629"},strokeWidth:{value:.8},opacity:{value:.15},color:{value:"#85B348"},style:{outlineWidth:0},width:500,height:100},{data:{type:"csv",url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/circos-segdup-edited.txt",chromosomeField:"c2",genomicFields:["s1","e1","s2","e2"]},mark:"rect",x:{field:"s2",type:"genomic"},xe:{field:"e2",type:"genomic"},stroke:{value:"#4C6629"},strokeWidth:{value:.8},tooltip:[{field:"s2",type:"genomic",alt:'<b style="color:green">Start Position</b>'},{field:"e2",type:"genomic",alt:'<b style="color:green">End Position</b>'}],opacity:{value:.15},color:{value:"#85B348"},width:500,height:16},{data:{type:"csv",url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/circos-segdup-edited.txt",chromosomeField:"c2",genomicFields:["s1","e1","s2","e2"]},mark:"betweenLink",x1:{field:"s1",type:"genomic"},x1e:{field:"e1",type:"genomic"},x:{field:"s2",type:"genomic"},xe:{field:"e2",type:"genomic"},stroke:{value:"#4C6629"},strokeWidth:{value:.8},opacity:{value:.15},color:{value:"#85B348"},style:{outlineWidth:0},width:500,height:100},{data:{type:"csv",url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/circos-segdup-edited.txt",chromosomeField:"c2",genomicFields:["s1","e1","s2","e2"]},mark:"rect",x:{field:"s1",type:"genomic"},xe:{field:"e1",type:"genomic"},stroke:{value:"#4C6629"},strokeWidth:{value:.8},tooltip:[{field:"s1",type:"genomic",alt:'<b style="color:green">Start Position</b>'},{field:"e1",type:"genomic",alt:'<b style="color:green">End Position</b>'}],opacity:{value:.15},color:{value:"#85B348"},width:500,height:16},{data:{type:"csv",url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/circos-segdup-edited.txt",chromosomeField:"c2",genomicFields:["s1","e1","s2","e2"]},mark:"betweenLink",x:{field:"s1",type:"genomic"},xe:{field:"e1",type:"genomic"},x1:{field:"s2",type:"genomic"},x1e:{field:"e2",type:"genomic"},stroke:{value:"#4C6629"},strokeWidth:{value:.8},opacity:{value:.15},color:{value:"#85B348"},style:{outlineWidth:0},width:500,height:100},{data:{type:"csv",url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/circos-segdup-edited.txt",chromosomeField:"c2",genomicFields:["s1","e1","s2","e2"]},mark:"rect",x:{field:"s2",type:"genomic"},xe:{field:"e2",type:"genomic"},stroke:{value:"#4C6629"},strokeWidth:{value:.8},tooltip:[{field:"s2",type:"genomic",alt:'<b style="color:green">Start Position</b>'},{field:"e2",type:"genomic",alt:'<b style="color:green">End Position</b>'}],opacity:{value:.15},color:{value:"#85B348"},width:500,height:16}]}},LINKING:{name:"Basic Example: Visual Linking",spec:JC},LAYOUT_AND_ARRANGEMENT_1:{name:"Basic Example: Layouts and Arrangements",spec:hC,hidden:!0},LAYOUT_AND_ARRANGEMENT_2:{name:"Layouts and Arrangements 2",spec:pC,hidden:!0},BASIC_SEMANTIC_ZOOM:{name:"Basic Example: Basic Idea of Semantic Zoom",spec:wC,hidden:!0},MARK_DISPLACEMENT:{name:"Basic Example: Mark Displacement",spec:SC},CIRCULAR_OVERVIEW_LINEAR_DETAIL:{name:"Basic Example: Circular Overview + Linear Detail Views",spec:FC},SEQUENCE:{name:"Multi-Scale Sequence Track",spec:UC},SEMANTIC_ZOOM:{name:"Multi-Scale Clinvar Lollipop Plot",spec:MC},CYTOBANDS:{name:"Ideograms",spec:jC},GENE_ANNOTATION:{name:"Custom Gene Annotation",spec:fC},MATRIX_HFFC6:{name:"Comparative Matrices (Micro-C vs. Hi-C)",spec:rC},CIRCOS:{name:"Circos",spec:{title:"Circos",description:"http://circos.ca/intro/genomic_data/",layout:"circular",static:!0,spacing:1,centerRadius:.3,alignment:"stack",tracks:[{data:{type:"vector",url:"https://resgen.io/api/v1/tileset_info/?d=VLFaiSVjTjW6mkbjRjWREA",column:"position",value:"peak"},mark:"bar",x:{field:"position",type:"genomic",axis:"top"},y:{field:"peak",type:"quantitative",axis:"right"},color:{value:"#EEEDA1"},width:700,height:60},{data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv",type:"csv",chromosomeField:"Chromosome",genomicFields:["chromStart","chromEnd"]},mark:"rect",color:{field:"Stain",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar","acen"],range:["white","#D9D9D9","#979797","#636363","black","#F0F0F0","#8D8D8D"]},x:{field:"chromStart",type:"genomic"},xe:{field:"chromEnd",type:"genomic"},stroke:{value:"lightgray"},strokeWidth:{value:.5},width:700,height:30},{alignment:"overlay",data:{url:"https://raw.githubusercontent.com/vigsterkr/circos/master/data/5/segdup.txt",type:"csv",headerNames:["id","chr","p1","p2"],chromosomePrefix:"hs",chromosomeField:"chr",genomicFields:["p1","p2"],separator:" ",longToWideId:"id"},opacity:{value:.4},tracks:[{dataTransform:[{type:"filter",field:"chr",oneOf:["hs1"],not:!0}],mark:"withinLink",x:{field:"p1",type:"genomic"},xe:{field:"p1_2",type:"genomic"},x1:{field:"p2",type:"genomic"},x1e:{field:"P2_2",type:"genomic"},stroke:{value:"lightgray"},strokeWidth:{value:1}},{dataTransform:[{type:"filter",field:"chr",oneOf:["hs1"]}],mark:"withinLink",x:{field:"p1",type:"genomic"},xe:{field:"p1_2",type:"genomic"},x1:{field:"p2",type:"genomic"},x1e:{field:"P2_2",type:"genomic"},stroke:{field:"chr_2",type:"nominal",range:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"]},strokeWidth:{value:1.5}}],width:700,height:300}]}},"Circular Range":{name:"Circular Range (Inspired By Weather Radials)",spec:{layout:"circular",static:!0,spacing:1,centerRadius:.3,alignment:"stack",tracks:[{data:{type:"vector",url:"https://resgen.io/api/v1/tileset_info/?d=VLFaiSVjTjW6mkbjRjWREA",column:"position",value:"peak"},mark:"bar",x:{field:"position",type:"genomic",axis:"top"},y:{field:"peak",type:"quantitative"},color:{value:"#EEEDA1"},width:700,height:60}]},hidden:!0},SARS_COV_2:{name:"SARS-CoV-2",spec:TC},CORCES_ET_AL:{name:"Corces et al. 2020",spec:QC},SASHIMI_PLOT:{name:"Sashimi Plot",spec:{title:"Sashimi Plot",subtitle:"Junction extraction from a BAM file",description:"https://github.com/guigolab/ggsashimi/blob/master/examples/sashimi.pdf",style:{outlineWidth:0},spacing:0,static:!0,views:[{xDomain:{interval:[1707413670,1707421219]},tracks:[{data:{type:"bam",url:"https://s3.amazonaws.com/gosling-lang.org/data/sashimi/ENCFF088HTJ.chr10_27035000_27050000.bam",indexUrl:"https://s3.amazonaws.com/gosling-lang.org/data/sashimi/ENCFF088HTJ.chr10_27035000_27050000.bam.bai",extractJunction:!0,junctionMinCoverage:100},alignment:"overlay",tracks:[{mark:"withinLink"},{mark:"text",text:{field:"score",type:"nominal"},color:{value:"black"},stroke:{value:"white"},strokeWidth:{value:3},visibility:[{target:"mark",measure:"width",threshold:"|xe-x|",transitionPadding:10,operation:"LT"}]}],x:{field:"start",type:"genomic",axis:"none"},xe:{field:"end",type:"genomic"},y:{field:"score",type:"quantitative"},stroke:{value:"#FFC153"},strokeWidth:{field:"score",type:"quantitative",range:[1,4]},opacity:{value:.8},style:{flatWithinLink:!0},width:800,height:80},{data:{type:"bam",url:"https://s3.amazonaws.com/gosling-lang.org/data/sashimi/ENCFF088HTJ.chr10_27035000_27050000.bam",indexUrl:"https://s3.amazonaws.com/gosling-lang.org/data/sashimi/ENCFF088HTJ.chr10_27035000_27050000.bam.bai"},dataTransform:[{type:"coverage",startField:"start",endField:"end"}],mark:"bar",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"coverage",type:"quantitative"},color:{value:"#FFC153"},width:800,height:80}]},{xDomain:{chromosome:"10",interval:[27040527,27048076]},tracks:[{data:{type:"csv",url:"https://s3.amazonaws.com/gosling-lang.org/data/sashimi/ggsashimi-annotation.gtf",headerNames:["chrom","name","type","start","end"],separator:"\t",chromosomeField:"chrom",genomicFields:["start","end"]},alignment:"overlay",mark:"rect",tracks:[{dataTransform:[{type:"filter",field:"type",oneOf:["exon"]}]},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],size:{value:6}}],x:{field:"start",type:"genomic",axis:"bottom"},xe:{field:"end",type:"genomic"},color:{value:"gray"},width:800,height:30}]},{xDomain:{interval:[1707413670,1707421219]},tracks:[{data:{type:"bam",url:"https://s3.amazonaws.com/gosling-lang.org/data/sashimi/ENCFF088HTJ.chr10_27035000_27050000.bam",indexUrl:"https://s3.amazonaws.com/gosling-lang.org/data/sashimi/ENCFF088HTJ.chr10_27035000_27050000.bam.bai"},dataTransform:[{type:"displace",method:"pile",boundingBox:{startField:"start",endField:"end",padding:4,isPaddingBP:!0},newField:"pileup-row"}],mark:"bar",x:{field:"start",type:"genomic",axis:"none"},xe:{field:"end",type:"genomic"},row:{field:"pileup-row",type:"nominal",padding:.05},color:{value:"grey"},width:800,height:400}]}]},underDevelopment:!0},CIRCULAR_BETWEEN_BANDS:{name:"Circular Between Bands",spec:DC,underDevelopment:!0},GREMLIN:{name:"Gremlin (O'Brien et al. 2010)",spec:{title:"Gremlin (O'Brien et al. 2010)",views:[{linkingId:"view1",xDomain:{chromosome:"5",interval:[0,8e7]},tracks:[{alignment:"overlay",title:"Chromosome 5",data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv",type:"csv",chromosomeField:"Chromosome",genomicFields:["chromStart","chromEnd"]},tracks:[{mark:"rect",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"],not:!0}],color:{field:"Stain",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar"],range:["#C0C0C0","#808080","#404040","black","black","black"]},size:{value:20}},{mark:"rect",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"]}],size:{value:10},color:{value:"#B74780"}},{mark:"text",dataTransform:[{type:"filter",field:"Stain",oneOf:["gpos25","gpos50","gpos100"]}],text:{field:"Name",type:"nominal"},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],size:{value:6},style:{dy:16,outline:"white"}},{mark:"text",dataTransform:[{type:"filter",field:"Stain",oneOf:["gneg","gpos75","gvar"]}],text:{field:"Name",type:"nominal"},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],size:{value:6},style:{dy:-16,outline:"white"}},{mark:"brush",x:{linkingId:"view2"},strokeWidth:{value:0}}],x:{field:"chromStart",type:"genomic"},xe:{field:"chromEnd",type:"genomic"},color:{value:"black"},stroke:{value:"white"},strokeWidth:{value:1},style:{outline:"white"},width:800,height:60},{alignment:"overlay",data:{url:"https://raw.githubusercontent.com/vigsterkr/circos/master/data/5/segdup.txt",type:"csv",headerNames:["id","chr","p1","p2"],chromosomePrefix:"hs",chromosomeField:"chr",genomicFields:["p1","p2"],separator:" ",longToWideId:"id",sampleLength:2e3},dataTransform:[{type:"filter",field:"chr",oneOf:["hs5","hs4","hs6"]},{type:"filter",field:"chr_2",oneOf:["hs5","hs4","hs6"]}],tracks:[{mark:"rect"},{mark:"brush",x:{linkingId:"view2"},strokeWidth:{value:0}}],x:{field:"p1",type:"genomic"},xe:{field:"p2",type:"genomic"},row:{field:"chr_2",type:"nominal",domain:["hs5","hs4","hs6"]},color:{field:"chr_2",type:"nominal",domain:["hs5","hs4","hs6"],range:["#62AAD7","#D1A74F","#6CB74C"]},stroke:{field:"chr_2",type:"nominal",domain:["hs5","hs4","hs6"],range:["#62AAD7","#D1A74F","#6CB74C"]},strokeWidth:{value:2},opacity:{value:.4},style:{outline:"black",outlineWidth:1},width:800,height:80},{alignment:"overlay",data:{url:"https://raw.githubusercontent.com/vigsterkr/circos/master/data/5/segdup.txt",type:"csv",headerNames:["id","chr","p1","p2"],chromosomePrefix:"hs",chromosomeField:"chr",genomicFields:["p1","p2"],separator:" ",longToWideId:"id",sampleLength:1e3},dataTransform:[{type:"filter",field:"chr",oneOf:["hs5"]},{type:"filter",field:"chr_2",oneOf:["hs5"]}],tracks:[{mark:"withinLink"},{mark:"brush",x:{linkingId:"view2"},strokeWidth:{value:0}}],x:{field:"p1",type:"genomic",linkingId:"view1"},xe:{field:"p1_2",type:"genomic"},x1:{field:"p2",type:"genomic"},x1e:{field:"P2_2",type:"genomic"},stroke:{value:"#6CB74C"},strokeWidth:{value:1},opacity:{value:.4},style:{outline:"white"},width:800,height:220}]},{views:[{tracks:[{title:"Region of Interest",data:{url:"https://raw.githubusercontent.com/vigsterkr/circos/master/data/5/segdup.txt",type:"csv",headerNames:["id","chr","p1","p2"],chromosomePrefix:"hs",chromosomeField:"chr",genomicFields:["p1","p2"],separator:" ",longToWideId:"id",sampleLength:1e3},dataTransform:[{type:"filter",field:"chr",oneOf:["hs5","hs4","hs6"]},{type:"filter",field:"chr_2",oneOf:["hs5","hs4","hs6"]}],mark:"withinLink",x:{field:"p1",type:"genomic",linkingId:"view2",axis:"bottom",domain:{chromosome:"5",interval:[68e6,71e6]}},xe:{field:"p2",type:"genomic"},row:{field:"chr_2",type:"nominal",domain:["hs5","hs4","hs6","empty"]},color:{value:"none"},stroke:{field:"chr_2",type:"nominal",domain:["hs5","hs4","hs6"],range:["#62AAD7","#D1A74F","#6CB74C"]},strokeWidth:{value:6},opacity:{value:.4},style:{outline:"lightgray",outlineWidth:3,background:"#F8F8F8"},width:800,height:200}]},{views:[{tracks:[{title:"Rearrangement View",data:{url:"https://raw.githubusercontent.com/vigsterkr/circos/master/data/5/segdup.txt",type:"csv",headerNames:["id","chr","p1","p2"],chromosomePrefix:"hs",chromosomeField:"chr",genomicFields:["p1","p2"],separator:" ",longToWideId:"id",sampleLength:1e3},dataTransform:[{type:"filter",field:"chr",oneOf:["hs5"]}],mark:"withinLink",x:{field:"p1",type:"genomic",axis:"bottom",domain:{chromosome:"5",interval:[69276e3,69282e3]}},xe:{field:"p2",type:"genomic"},color:{value:"none"},stroke:{value:"#62AAD7"},strokeWidth:{value:6},opacity:{value:.4},style:{outline:"lightgray",outlineWidth:3},width:600,height:200}]}]}]}]},underDevelopment:!0},GIVE:{name:"GIVE (Cao et al. 2018)",spec:{title:"GIVE",subtitle:"Reimplementation of GenoCAT examples",spacing:60,arrangement:"vertical",views:[{layout:"linear",tracks:[{alignment:"overlay",title:"Genes",data:{url:"https://resgen.io/api/v1/tileset_info/?d=M9A9klpwTci5Vf4bHZ864g",type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}],exonIntervalFields:[{index:12,name:"start"},{index:13,name:"end"}]},tracks:[{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"rect",x:{field:"end",type:"genomic",domain:{chromosome:"17",interval:[2e5,8e5]},axis:"top"},size:{value:7}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"rect",x:{field:"start",type:"genomic"},size:{value:7}},{dataTransform:[{type:"filter",field:"type",oneOf:["exon"]}],mark:"rect",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},size:{value:14}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"rule",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},strokeWidth:{value:3}}],row:{field:"strand",type:"nominal",domain:["+","-"]},color:{value:"#4050B4"},width:700,height:50},{data:{url:"https://resgen.io/api/v1/tileset_info/?d=Zz3CBDSqQ3ySrOSe2yj1eg",type:"vector",column:"position",value:"peak",binSize:4},mark:"bar",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative"},color:{value:"#8A96D5"},stroke:{value:"#3C4DB4"},strokeWidth:{value:.5},width:700,height:40},{data:{url:"https://resgen.io/api/v1/tileset_info/?d=dc_SOjdCRgq_8PYf6W--7w",type:"vector",column:"position",value:"peak",binSize:4},mark:"bar",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative"},color:{value:"#8A96D5"},stroke:{value:"#3C4DB4"},strokeWidth:{value:.5},width:700,height:40},{data:{url:"https://resgen.io/api/v1/tileset_info/?d=Nolbrk9kS3CE0jJL_7OW1g",type:"vector",column:"position",value:"peak",binSize:4},mark:"bar",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative"},color:{value:"#8A96D5"},stroke:{value:"#3C4DB4"},strokeWidth:{value:.5},width:700,height:40},{alignment:"overlay",data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv",type:"csv",chromosomeField:"Chromosome",genomicFields:["chromStart","chromEnd"]},tracks:[{mark:"rect",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"],not:!0}]},{mark:"triangleRight",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"]},{type:"filter",field:"Name",include:"q"}]},{mark:"triangleLeft",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"]},{type:"filter",field:"Name",include:"p"}]}],x:{field:"chromStart",type:"genomic",domain:{chromosome:"17",interval:[2e7,5e7]}},xe:{field:"chromEnd",type:"genomic"},color:{value:"white"},size:{value:14},stroke:{value:"black"},strokeWidth:{value:.5},width:700,height:40},{data:{url:"https://raw.githubusercontent.com/vigsterkr/circos/master/data/5/segdup.txt",type:"csv",headerNames:["id","chr","p1","p2"],chromosomePrefix:"hs",chromosomeField:"chr",genomicFields:["p1","p2"],separator:" ",longToWideId:"id"},dataTransform:[{type:"filter",field:"chr",oneOf:["hs17"]}],mark:"rect",x:{field:"p1",type:"genomic"},xe:{field:"p2",type:"genomic"},color:{field:"chr_2",type:"nominal",domain:["chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY"]},opacity:{value:.5},size:{value:14},overlayOnPreviousTrack:!0,width:700,height:40}]},{layout:"linear",tracks:[{alignment:"overlay",data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv",type:"csv",chromosomeField:"Chromosome",genomicFields:["chromStart","chromEnd"]},tracks:[{mark:"rect",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"],not:!0}]},{mark:"triangleRight",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"]},{type:"filter",field:"Name",include:"q"}]},{mark:"triangleLeft",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"]},{type:"filter",field:"Name",include:"p"}]}],x:{field:"chromStart",type:"genomic",axis:"none"},xe:{field:"chromEnd",type:"genomic"},color:{value:"white"},size:{value:14},stroke:{value:"black"},strokeWidth:{value:.5},width:700,height:40},{data:{url:"https://raw.githubusercontent.com/vigsterkr/circos/master/data/5/segdup.txt",type:"csv",headerNames:["id","chr","p1","p2"],chromosomePrefix:"hs",chromosomeField:"chr",genomicFields:["p1","p2"],separator:" ",longToWideId:"id"},dataTransform:[{type:"filter",field:"chr_2",oneOf:["hs1"]}],mark:"rect",x:{field:"p1_2",type:"genomic"},xe:{field:"p2_2",type:"genomic"},color:{field:"chr",type:"nominal",domain:["chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY"]},opacity:{value:.5},size:{value:14},overlayOnPreviousTrack:!0,width:700,height:40},{data:{url:"https://resgen.io/api/v1/tileset_info/?d=Zz3CBDSqQ3ySrOSe2yj1eg",type:"vector",column:"position",value:"peak",binSize:4},mark:"bar",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative"},color:{value:"#8A96D5"},stroke:{value:"#3C4DB4"},strokeWidth:{value:.5},width:700,height:40},{data:{url:"https://resgen.io/api/v1/tileset_info/?d=dc_SOjdCRgq_8PYf6W--7w",type:"vector",column:"position",value:"peak",binSize:4},mark:"bar",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative"},color:{value:"#8A96D5"},stroke:{value:"#3C4DB4"},strokeWidth:{value:.5},width:700,height:40},{data:{url:"https://resgen.io/api/v1/tileset_info/?d=Nolbrk9kS3CE0jJL_7OW1g",type:"vector",column:"position",value:"peak",binSize:4},mark:"bar",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"peak",type:"quantitative"},color:{value:"#8A96D5"},stroke:{value:"#3C4DB4"},strokeWidth:{value:.5},width:700,height:40},{alignment:"overlay",title:"Genes",data:{url:"https://resgen.io/api/v1/tileset_info/?d=M9A9klpwTci5Vf4bHZ864g",type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:5,name:"strand",type:"nominal"},{index:3,name:"name",type:"nominal"}],exonIntervalFields:[{index:12,name:"start"},{index:13,name:"end"}]},tracks:[{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["+"]}],mark:"rect",x:{field:"end",type:"genomic",domain:{chromosome:"1",interval:[109e6,112e6]},axis:"bottom"},size:{value:7}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]},{type:"filter",field:"strand",oneOf:["-"]}],mark:"rect",x:{field:"start",type:"genomic"},size:{value:7}},{dataTransform:[{type:"filter",field:"type",oneOf:["exon"]}],mark:"rect",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},size:{value:14}},{dataTransform:[{type:"filter",field:"type",oneOf:["gene"]}],mark:"rule",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},strokeWidth:{value:3}}],row:{field:"strand",type:"nominal",domain:["+","-"]},color:{value:"#4050B4"},width:700,height:50}]}],style:{outlineWidth:0}},underDevelopment:!0},CANCER_VARIANT:{name:"Breast Cancer Variant (Staaf et al. 2019)",spec:RC},BAM_PILEUP:{name:"BAM file pileup tracks",spec:KC},TEMPLATE:{name:"Track Template",spec:EC,underDevelopment:!0},doc_area:{name:"Basic Example: Area Mark",spec:$C,hidden:!0},doc_bar:{name:"Basic Example: Bar Mark",spec:CA,hidden:!0},doc_brush:{name:"Basic Example: Brush Mark",spec:AA,hidden:!0},doc_line:{name:"Basic Example: Line Mark",spec:gA,hidden:!0},doc_link:{name:"Basic Example: Link Mark",spec:{title:"Basic Marks: Link",subtitle:"Tutorial Examples",tracks:[{layout:"linear",width:800,height:180,data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/circos-segdup-edited.txt",type:"csv",chromosomeField:"c2",genomicFields:["s1","e1","s2","e2"]},mark:"withinLink",x:{field:"s1",type:"genomic",domain:{chromosome:"1"},axis:"top"},xe:{field:"e1",type:"genomic"},x1:{field:"s2",type:"genomic",domain:{chromosome:"1"},axis:"top"},x1e:{field:"e2",type:"genomic"},stroke:{value:"steelblue"}}]},hidden:!0},doc_linking_tracks:{name:"Basic Example: Linking Tracks",spec:{tracks:[{layout:"linear",height:100,width:800,data:{url:"https://resgen.io/api/v1/tileset_info/?d=UvVPeLHuRDiYA3qwFlm7xQ",type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 3","sample 4"]},mark:"line",x:{field:"position",type:"genomic",domain:{chromosome:"2"},axis:"top",linkingId:"link1"},y:{field:"peak",type:"quantitative"},row:{field:"sample",type:"nominal"},color:{field:"sample",type:"nominal",legend:!0},stroke:{value:"white"},strokeWidth:{value:.5}},{height:100,width:800,data:{url:"https://resgen.io/api/v1/tileset_info/?d=UvVPeLHuRDiYA3qwFlm7xQ",type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2"]},mark:"area",x:{field:"position",type:"genomic",domain:{chromosome:"2"},axis:"top",linkingId:"link1"},y:{field:"peak",type:"quantitative"},row:{field:"sample",type:"nominal"},color:{field:"sample",type:"nominal",legend:!0},stroke:{value:"white"},strokeWidth:{value:.5}}]},hidden:!0},doc_point:{name:"Basic Example: Point Mark",spec:IA,hidden:!0},doc_rect:{name:"Basic Example: React Mark",spec:{title:"Basic Marks: Rect",subtitle:"Tutorial Examples",tracks:[{width:800,height:40,data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv",type:"csv",chromosomeField:"Chromosome",genomicFields:["chromStart","chromEnd"]},mark:"rect",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"],not:!0}],color:{field:"Stain",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar"],range:["white","#D9D9D9","#979797","#636363","black","#A0A0F2"]},x:{field:"chromStart",type:"genomic",domain:{chromosome:"1"},axis:"top"},xe:{field:"chromEnd",type:"genomic"},size:{value:20},stroke:{value:"gray"},strokeWidth:{value:.5},style:{outline:"white"}}]},hidden:!0},doc_text:{name:"Basic Example: Text Mark",spec:{title:"Basic Marks: Text",subtitle:"Tutorial Examples",tracks:[{width:800,height:180,data:{url:"https://resgen.io/api/v1/tileset_info/?d=UvVPeLHuRDiYA3qwFlm7xQ",type:"multivec",row:"base",column:"position",value:"count",categories:["A","T","G","C"],start:"start",end:"end",binSize:16},mark:"text",y:{field:"count",type:"quantitative"},style:{textStrokeWidth:0},stretch:!0,x:{field:"start",type:"genomic",axis:"top"},xe:{field:"end",type:"genomic"},color:{field:"base",type:"nominal",domain:["A","T","G","C"]},text:{field:"base",type:"nominal"}}]},hidden:!0},doc_triangle:{name:"Basic Example: Triangle Mark",spec:e(Z({},vC),{tracks:vC.tracks.filter((g=>g.mark.includes("triangle"))),title:"Basic Marks: Triangles",subtitle:"Tutorial Examples",width:800,visibility:void 0}),hidden:!0},doc_overlay_bar_point:{name:"Overlay Tracks: Bar + Point",spec:{title:"Example: Overlay Tracks",tracks:[{layout:"linear",width:800,height:200,data:{url:"https://cgap-higlass.com/api/v1/tileset_info/?d=clinvar_20200824_hg38",type:"beddb",genomicFields:[{index:1,name:"start"},{index:2,name:"end"}],valueFields:[{index:7,name:"significance",type:"nominal"}]},alignment:"overlay",tracks:[{mark:"bar",stroke:{field:"significance",type:"nominal",domain:["Pathogenic","Pathogenic/Likely_pathogenic","Likely_pathogenic","Uncertain_significance","Likely_benign","Benign/Likely_benign","Benign"],range:["#D45E00","#D45E00","#D45E00","black","#029F73","#029F73","#029F73"]},strokeWidth:{value:.5},size:{value:1}},{mark:"point",size:{value:5},color:{field:"significance",type:"nominal",domain:["Pathogenic","Pathogenic/Likely_pathogenic","Likely_pathogenic","Uncertain_significance","Likely_benign","Benign/Likely_benign","Benign"],range:["#D45E00","#D45E00","#D45E00","black","#029F73","#029F73","#029F73"],legend:!0}}],x:{field:"start",type:"genomic",domain:{chromosome:"3"},axis:"top"},xe:{field:"end",type:"genomic"},y:{field:"significance",type:"nominal",domain:["Pathogenic","Pathogenic/Likely_pathogenic","Likely_pathogenic","Uncertain_significance","Likely_benign","Benign/Likely_benign","Benign"],baseline:"Uncertain_significance",range:[150,20],grid:!0},color:{field:"significance",type:"nominal",domain:["Pathogenic","Pathogenic/Likely_pathogenic","Likely_pathogenic","Uncertain_significance","Likely_benign","Benign/Likely_benign","Benign"],range:["#D45E00","#D45E00","#D45E00","black","#029F73","#029F73","#029F73"]},opacity:{value:.6}}]},hidden:!0},doc_overlay_rect_text:{name:"Overlay Tracks: Rect + Text",spec:{title:"Example: Overlay Tracks",views:[{width:800,height:80,layout:"linear",data:{url:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv",type:"csv",chromosomeField:"Chromosome",genomicFields:["chromStart","chromEnd"]},alignment:"overlay",tracks:[{mark:"text",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"],not:!0}],text:{field:"Name",type:"nominal"},color:{field:"Stain",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar"],range:["black","black","black","black","white","black"]},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}],style:{textStrokeWidth:0}},{mark:"rect",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"],not:!0}],color:{field:"Stain",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar"],range:["white","#D9D9D9","#979797","#636363","black","#A0A0F2"]}},{mark:"triangleRight",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"],not:!1},{type:"filter",field:"Name",include:"q",not:!1}],color:{value:"#B40101"}},{mark:"triangleLeft",dataTransform:[{type:"filter",field:"Stain",oneOf:["acen"],not:!1},{type:"filter",field:"Name",include:"p",not:!1}],color:{value:"#B40101"}}],x:{field:"chromStart",type:"genomic",domain:{chromosome:"1"},axis:"top"},xe:{field:"chromEnd",type:"genomic"},size:{value:20},stroke:{value:"gray"},strokeWidth:{value:.5},style:{outline:"white"}}]},hidden:!0},doc_overlay_line_point:{name:"Overlay Tracks: Line + Point",spec:{title:"Example: Overlayed Tracks",tracks:[{height:200,width:1e3,layout:"linear",data:{url:"https://resgen.io/api/v1/tileset_info/?d=UvVPeLHuRDiYA3qwFlm7xQ",type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"]},alignment:"overlay",tracks:[{mark:"line"},{mark:"point",size:{field:"peak",type:"quantitative",range:[0,6]}}],x:{field:"position",type:"genomic",domain:{chromosome:"1",interval:[1,3000500]},axis:"top"},y:{field:"peak",type:"quantitative"},row:{field:"sample",type:"nominal"},color:{field:"sample",type:"nominal"}}]},hidden:!0},doc_semantic_zoom_sequence:{name:"Semantic Zoom: A Sequence Example",spec:lA,hidden:!0},doc_semantic_zoom_cyto:{name:"Semantic Zoom: Cyto",spec:iA,hidden:!0}};const dA={width:20,height:20,viewBox:"0 0 16 16",path:["M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"],stroke:"none",fill:"currentColor"},ZA={width:20,height:20,viewBox:"0 0 16 16",path:["M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z","M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z"],stroke:"none",fill:"currentColor"},eA={width:20,height:20,viewBox:"0 0 16 16",path:["M6.002 5.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z","M1.5 2A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13zm13 1a.5.5 0 0 1 .5.5v6l-3.775-1.947a.5.5 0 0 0-.577.093l-3.71 3.71-2.66-1.772a.5.5 0 0 0-.63.062L1.002 12v.54A.505.505 0 0 1 1 12.5v-9a.5.5 0 0 1 .5-.5h13z"],stroke:"none",fill:"currentColor"},mA={width:20,height:20,viewBox:"0 0 16 16",path:["M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm8.93 4.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM8 5.5a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"],stroke:"none",fill:"currentColor"},oA={width:20,height:20,viewBox:"0 0 16 16",path:["M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z","M8.93 6.588l-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"],stroke:"none",fill:"currentColor"},bA={width:20,height:20,viewBox:"0 0 16 16",path:["M12.258 3H3.747l-.082 2.46h.478c.26-1.544.76-1.783 2.694-1.845l.424-.013v7.827c0 .663-.144.82-1.3.923v.52h4.082v-.52c-1.162-.103-1.306-.26-1.306-.923V3.602l.43.013c1.935.062 2.434.301 2.694 1.846h.479L12.258 3z"],stroke:"none",fill:"currentColor"},aA={width:20,height:20,viewBox:"0 0 15.011423110961914 21.098501205444336",path:["M15.006 10.57c0-1.948-.618-3.397-2.066-4.844a1 1 0 0 0-1.414 1.415c1.079 1.078 1.48 2.007 1.48 3.43a5.46 5.46 0 0 1-1.611 3.887c-1.004 1.003-2.078 1.502-3.428 1.593l1.246-1.247a1 1 0 1 0-1.414-1.414l-3.707 3.707 3.707 3.707a.997.997 0 0 0 1.414 0 .999.999 0 0 0 0-1.414l-1.337-1.336c1.923-.082 3.542-.792 4.933-2.18a7.447 7.447 0 0 0 2.197-5.304zm-13 .027c0-1.469.572-2.85 1.61-3.889C4.627 5.7 5.71 5.2 7.075 5.114L5.799 6.39a.999.999 0 0 0 .707 1.708.997.997 0 0 0 .707-.293l3.707-3.707L7.213.39a1 1 0 1 0-1.414 1.414l1.31 1.311c-1.913.086-3.524.796-4.906 2.18a7.447 7.447 0 0 0-2.197 5.302c0 1.948.618 3.397 2.066 4.844a.997.997 0 0 0 1.414 0 1 1 0 0 0 0-1.416c-1.08-1.077-1.48-2.006-1.48-3.428z"],stroke:"none",fill:"currentColor"},sA={width:20,height:20,viewBox:"0 0 16 16",path:["M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm15 2h-4v3h4V4zm0 4h-4v3h4V8zm0 4h-4v3h3a1 1 0 0 0 1-1v-2zm-5 3v-3H6v3h4zm-5 0v-3H1v2a1 1 0 0 0 1 1h3zm-4-4h4V8H1v3zm0-4h4V4H1v3zm5-3v3h4V4H6zm4 4H6v3h4V8z"],stroke:"none",fill:"currentColor"},tA={width:20,height:20,viewBox:"0 0 16 16",path:["M8.646 5.646a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1 0 .708l-2 2a.5.5 0 0 1-.708-.708L10.293 8 8.646 6.354a.5.5 0 0 1 0-.708zm-1.292 0a.5.5 0 0 0-.708 0l-2 2a.5.5 0 0 0 0 .708l2 2a.5.5 0 0 0 .708-.708L5.707 8l1.647-1.646a.5.5 0 0 0 0-.708z","M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z","M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z"],stroke:"none",fill:"currentColor"},nA={width:20,height:20,viewBox:"0 0 16 16",path:["M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"],stroke:"none",fill:"currentColor"},VA={width:20,height:20,viewBox:"0 0 16 16",path:["M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"],stroke:"none",fill:"currentColor"},yA={width:20,height:20,viewBox:"0 0 16 16",path:["M0 3a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3zm5-1v12h9a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H5zM4 2H2a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h2V2z"],stroke:"none",fill:"currentColor"},XA={width:22,height:22,viewBox:"0 0 2048 1792",path:["M0 896q0-130 51-248.5t136.5-204 204-136.5 248.5-51h768q130 0 248.5 51t204 136.5 136.5 204 51 248.5-51 248.5-136.5 204-204 136.5-248.5 51h-768q-130 0-248.5-51t-204-136.5-136.5-204-51-248.5zm1408 512q104 0 198.5-40.5t163.5-109.5 109.5-163.5 40.5-198.5-40.5-198.5-109.5-163.5-163.5-109.5-198.5-40.5-198.5 40.5-163.5 109.5-109.5 163.5-40.5 198.5 40.5 198.5 109.5 163.5 163.5 109.5 198.5 40.5z"],stroke:"none",fill:"currentColor"},GA={width:22,height:22,viewBox:"0 0 2048 1792",path:["M1152 896q0-104-40.5-198.5t-109.5-163.5-163.5-109.5-198.5-40.5-198.5 40.5-163.5 109.5-109.5 163.5-40.5 198.5 40.5 198.5 109.5 163.5 163.5 109.5 198.5 40.5 198.5-40.5 163.5-109.5 109.5-163.5 40.5-198.5zm768 0q0-104-40.5-198.5t-109.5-163.5-163.5-109.5-198.5-40.5h-386q119 90 188.5 224t69.5 288-69.5 288-188.5 224h386q104 0 198.5-40.5t163.5-109.5 109.5-163.5 40.5-198.5zm128 0q0 130-51 248.5t-136.5 204-204 136.5-248.5 51h-768q-130 0-248.5-51t-204-136.5-136.5-204-51-248.5 51-248.5 136.5-204 204-136.5 248.5-51h768q130 0 248.5 51t204 136.5 136.5 204 51 248.5z"],stroke:"none",fill:"currentColor"},BA={width:20,height:20,viewBox:"0 0 16 16",path:["M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z","M4.603 14.087a.81.81 0 0 1-.438-.42c-.195-.388-.13-.776.08-1.102.198-.307.526-.568.897-.787a7.68 7.68 0 0 1 1.482-.645 19.697 19.697 0 0 0 1.062-2.227 7.269 7.269 0 0 1-.43-1.295c-.086-.4-.119-.796-.046-1.136.075-.354.274-.672.65-.823.192-.077.4-.12.602-.077a.7.7 0 0 1 .477.365c.088.164.12.356.127.538.007.188-.012.396-.047.614-.084.51-.27 1.134-.52 1.794a10.954 10.954 0 0 0 .98 1.686 5.753 5.753 0 0 1 1.334.05c.364.066.734.195.96.465.12.144.193.32.2.518.007.192-.047.382-.138.563a1.04 1.04 0 0 1-.354.416.856.856 0 0 1-.51.138c-.331-.014-.654-.196-.933-.417a5.712 5.712 0 0 1-.911-.95 11.651 11.651 0 0 0-1.997.406 11.307 11.307 0 0 1-1.02 1.51c-.292.35-.609.656-.927.787a.793.793 0 0 1-.58.029zm1.379-1.901c-.166.076-.32.156-.459.238-.328.194-.541.383-.647.547-.094.145-.096.25-.04.361.01.022.02.036.026.044a.266.266 0 0 0 .035-.012c.137-.056.355-.235.635-.572a8.18 8.18 0 0 0 .45-.606zm1.64-1.33a12.71 12.71 0 0 1 1.01-.193 11.744 11.744 0 0 1-.51-.858 20.801 20.801 0 0 1-.5 1.05zm2.446.45c.15.163.296.3.435.41.24.19.407.253.498.256a.107.107 0 0 0 .07-.015.307.307 0 0 0 .094-.125.436.436 0 0 0 .059-.2.095.095 0 0 0-.026-.063c-.052-.062-.2-.152-.518-.209a3.876 3.876 0 0 0-.612-.053zM8.078 7.8a6.7 6.7 0 0 0 .2-.828c.031-.188.043-.343.038-.465a.613.613 0 0 0-.032-.198.517.517 0 0 0-.145.04c-.087.035-.158.106-.196.283-.04.192-.03.469.046.822.024.111.054.227.09.346z"],stroke:"none",fill:"currentColor"},WA={width:18,height:18,viewBox:"0 0 24 24",path:["M7 4v16l13 -8z"],stroke:"none",fill:"currentColor"},hA={width:18,height:18,viewBox:"0 0 24 24",path:["M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5","M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5"],stroke:"currentColor",fill:"none"},pA=Object.entries(cA).map((([g,I])=>Z({id:g},I))).filter((g=>!g.hidden)),HA=null!=(g=pA.find((g=>g.forceShow)))?g:pA[0],uA=(g,I)=>_.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 400 400",width:g,height:I},_.createElement("rect",{style:{fill:"none"},width:"400",height:"400"}),_.createElement("circle",{cx:"110.62",cy:"129.64",r:"41.69"}),_.createElement("circle",{style:{fill:"#fff"},cx:"124.14",cy:"114.12",r:"10.76"}),_.createElement("circle",{cx:"288.56",cy:"129.64",r:"41.69"}),_.createElement("circle",{style:{fill:"#fff"},cx:"302.07",cy:"114.12",r:"10.76"}),_.createElement("path",{style:{fill:"#e18241"},d:"M313.1,241.64l8.61-22.09a430.11,430.11,0,0,0-88-15.87L224,225.63A384.54,384.54,0,0,1,313.1,241.64Z"}),_.createElement("path",{style:{fill:"#e18241"},d:"M208.63,260.53a299.77,299.77,0,0,1,90.56,16.79L308,254.79a371.68,371.68,0,0,0-90-15.47Z"}),_.createElement("path",{style:{fill:"#e18241"},d:"M174.4,225.56l-9-22a431.34,431.34,0,0,0-88,15.43l8.9,22A385.08,385.08,0,0,1,174.4,225.56Z"}),_.createElement("path",{style:{fill:"#e18241"},d:"M100.71,276.35a300.51,300.51,0,0,1,87.91-15.82L180,239.29a372.51,372.51,0,0,0-88.3,14.76Z"}),_.createElement("path",{style:{fill:"#e18241"},d:"M106.52,290.71c27.53,13.92,59.05,21.34,92.05,21.34h0c33.68,0,65.83-7.72,93.75-22.2a291.31,291.31,0,0,0-186.33-.4Z"})),YA=(g,I,C,A)=>_.createElement("svg",{key:Zg(g),xmlns:"http://www.w3.org/2000/svg",width:null!=I?I:g.width,height:null!=C?C:g.height,viewBox:g.viewBox,strokeWidth:"2",stroke:g.stroke,fill:null!=A?A:g.fill,strokeLinecap:"round",strokeLinejoin:"round"},g.path.map((g=>_.createElement("path",{key:g,d:g})))),KA=g=>void 0!==g?`{\n\t// ${g}\n}`:"{}",RA=()=>Math.min(500,window.innerWidth);const rA=async g=>{let I=null;try{const C=await yg(`https://gist.github.com/${g}.json`);I=await(C.ok?C.json():null)}catch(d){return Promise.reject(new Error("Gist not found"))}if(!I)return Promise.reject(new Error("Gist not found"));const C=I.files.find((g=>g.toLowerCase().startsWith("gosling.js"))),A=I.files.find((g=>g.toLowerCase().startsWith("readme.md")));if(!C)return Promise.reject(new Error("Gist does not contain a Gosling spec."));const l=new URL(`https://gist.githubusercontent.com/${g}/raw/${C}`),i=fetch(l.href).then((async g=>200===g.status?function(g,I){const C=JSON.parse(g),A=/^[.\/]|^\.[.\/]|^\.\.[^\/]/;return II(C,(g=>{g.data&&"csv"===g.data.type&&A.test(g.data.url)&&(g.data.url=new URL(g.data.url,I).href)})),Zg(C)}(await g.text(),l):null)),c=fetch(`https://gist.githubusercontent.com/${g}/raw/${A}`).then((g=>200===g.status?g.text():null));return Promise.all([i,c]).then((([g,C])=>({code:g,description:C,title:I.description})))};Xg.render(_.createElement(Gg,null,_.createElement(Bg,{component:function(g){var I,C;const A=window.innerWidth<=500,l=cg.parse(g.location.search,{ignoreQueryPrefix:!0}),i=(null==l?void 0:l.spec)?dg.uncrush(l.spec):null,c=null!=(I=null==l?void 0:l.gist)?I:null,d=null!=(C=null==l?void 0:l.example)?C:"",m=c?KA():Zg(null!=i?i:HA.spec),o=q.exports.useRef([]),[b,a]=q.exports.useState(!1),[s,t]=q.exports.useState(cA[d]?Z({id:d},cA[d]):HA),[n,V]=q.exports.useState("light"),[y,X]=q.exports.useState(),[G,B]=q.exports.useState(m),[W,h]=q.exports.useState(),[p,H]=q.exports.useState({message:"",state:"success"}),[u,Y]=q.exports.useState(!0),[K,R]=q.exports.useState(0),[r,J]=q.exports.useState(),[w,S]=q.exports.useState(),[F,k]=q.exports.useState(!1),[v,N]=q.exports.useState(A||!1),[f,z]=q.exports.useState(RA()),[x,U]=q.exports.useState(!1),[M,L]=q.exports.useState(!!c),[T,D]=q.exports.useState(A||"true"===(null==l?void 0:l.full)||!1),[O,j]=q.exports.useState(!1),[E,$]=q.exports.useState(void 0),[gg,Ig]=q.exports.useState(void 0),[Cg,Ag]=q.exports.useState(void 0),[lg,ig]=q.exports.useState(!1),[yg,Xg]=q.exports.useState(!1),Gg=q.exports.useRef(),Bg=q.exports.useRef(),Wg=q.exports.useRef(),hg=q.exports.useRef(eg((g=>{B(g)}),1500));q.exports.useEffect((()=>{}),[Wg.current]),q.exports.useEffect((()=>{var g;o.current=[],R(0),d&&!cA[d]?B(KA(`Example id "${d}" does not exist.`)):B(null!=i?i:c?KA():"string"==typeof(g=s.spec)?g:Zg(g)),X(void 0)}),[s]),q.exports.useEffect((()=>{let g=!0;if(c&&"string"==typeof c)return rA(c).then((({code:I,description:C,title:A})=>{g&&I&&(L(!1),B(I),J(A),S(C))})).catch((I=>{g&&(L(!1),B(KA(I)),S(void 0),J("Error loading gist! See code for details."))})),()=>{L(!1),g=!1}}),[c]);const pg=q.exports.useCallback((g=>{if(Q(KA(),G))return;let I,C;try{I=JSON.parse(mg(G)),C=uI(I),H(C)}catch(A){const g="✘ Cannnot parse the code.";console.warn(g),H({message:g,state:"error"})}I&&"success"===(null==C?void 0:C.state)&&(u||g)&&h(I)}),[G,u,M]);q.exports.useEffect((()=>{const g=P.subscribe("data-preview",((g,I)=>{const C=`${I.dataConfig}`,A=o.current.filter((g=>g.id!==C));o.current=[...A,e(Z({},I),{id:C})]}));return()=>{P.unsubscribe(g)}})),q.exports.useEffect((()=>{o.current=[],R(0),pg()}),[G,u,n]);const Hg=q.exports.useCallback((()=>{v||(Bg.current=og.sourceEvent.clientX,ig(!0))}),[Bg,f]),ug=q.exports.useCallback((()=>{if(Bg.current){const g=og.sourceEvent.clientX-Bg.current;z(f-g)}}),[Bg,f]),Yg=q.exports.useCallback((()=>{Bg.current=null,ig(!1)}),[Bg,f]);return q.exports.useEffect((()=>{const g=Gg.current,I=bg().on("start",Hg).on("drag",ug).on("end",Yg);return ag(g).call(I),()=>{ag(g).on(".drag",null)}}),[Gg,Hg,ug,Yg]),_.createElement(_.Fragment,null,_.createElement("div",{className:"demo-navbar "+("dark"===n?"dark":""),onClick:()=>{Wg.current}},_.createElement("span",{style:{cursor:"pointer",lineHeight:"40px"},onClick:()=>window.open("https://gosling.js.org","_blank")},_.createElement("span",{className:"logo"},uA(20,20)),"Gosling.js Editor"),i&&_.createElement("small",null," Displaying a custom spec contained in URL"),r&&!A&&_.createElement(_.Fragment,null,_.createElement("span",{className:"gist-title"},r),_.createElement("span",{title:"Open GitHub Gist",style:{marginLeft:10},className:"description-github-button",onClick:()=>window.open(`https://gist.github.com/${c}`,"_blank")},YA(ZA,14,14))),_.createElement("span",{className:"demo-dropdown",hidden:null!==i||null!==c||""!==d},_.createElement("select",{style:{maxWidth:A?window.innerWidth-180:"none"},onChange:g=>{t(Z({id:g.target.value},cA[g.target.value]))},value:s.id},pA.map((g=>_.createElement("option",{key:g.id,value:g.id},g.name+(g.underDevelopment?" (under development)":"")))))),F?_.createElement("select",{style:{maxWidth:A?window.innerWidth-180:"none"},onChange:g=>{-1!==Object.keys(sg).indexOf(g.target.value)&&V(g.target.value)},defaultValue:n},Object.keys(sg).map((g=>_.createElement("option",{key:g,value:g},g)))):null,s.underDevelopment?_.createElement("span",{style:{paddingLeft:12,fontStyle:"normal",fontSize:13}},"🚧 This example is under development 🚧"):null,_.createElement("input",{type:"hidden",id:"spec-url-exporter"}),w?_.createElement("span",{title:"Open Textual Description",className:"description-button",onClick:function(){z(RA()),N(!1)}},YA(oA,23,23)):null),_.createElement("div",{className:"editor "+("dark"===n?"dark":"")},_.createElement(tg,{className:"side-panel-spliter",split:"vertical",defaultSize:"50px",allowResize:!1},_.createElement("div",{className:"side-panel "+("dark"===n?"dark":"")},_.createElement("span",{title:"Automatically update visualization upon editing code",className:"side-panel-button",onClick:()=>Y(!u)},u?YA(XA,23,23,"#E18343"):YA(GA),_.createElement("br",null),"AUTO",_.createElement("br",null),"RUN"),_.createElement("span",{title:"Run Code",className:"side-panel-button",onClick:()=>pg(!0)},YA(WA,23,23),_.createElement("br",null),"RUN"),_.createElement("span",{title:"Find",className:"side-panel-button",onClick:()=>{$(!E)}},YA(VA,23,23),_.createElement("br",null),"FIND"),_.createElement("span",{title:"Use Larger Font",className:"side-panel-button",onClick:()=>{Ig(!gg)}},YA(bA,23,23),"+",_.createElement("br",null),"LARGER"),_.createElement("span",{title:"Use Larger Font",className:"side-panel-button",onClick:()=>{Ag(!Cg)}},YA(bA,15,15),"-",_.createElement("br",null),"SMALLER"),_.createElement("span",{title:"Show or hide a code panel",className:"side-panel-button",onClick:()=>D(!T)},YA(yA,23,23),_.createElement("br",null),"LAYOUT"),_.createElement("span",{title:"Show or hide a data preview",className:"side-panel-button",onClick:()=>j(!O)},YA(sA,23,23),_.createElement("br",null),"DATA",_.createElement("br",null),"PREVIEW"),_.createElement("span",{title:"Save PNG file",className:"side-panel-button",onClick:()=>{Wg.current.api.exportPng()}},YA(eA,23,23),_.createElement("br",null),"PNG"),_.createElement("span",{title:"Save PDF file",className:"side-panel-button",onClick:()=>{Wg.current.api.exportPdf()}},YA(BA,23,23),_.createElement("br",null),"PDF"),_.createElement("span",{title:G.length<=4096?"Copy unique URL of current view to clipboard (limit: 4096 characters)":"The current code contains characters more than 4096",className:G.length<=4096?"side-panel-button":"side-panel-button side-panel-button-not-active",onClick:()=>{if(G.length<=4096){const g=encodeURIComponent(dg.crush(G)),I=`https://gosling-lang.github.io/gosling.js/?full=${T}&spec=${g}`,C=document.getElementById("spec-url-exporter");C.type="text",C.value=I,C.select(),document.execCommand("copy"),C.type="hidden"}}},YA(hA,23,23),_.createElement("br",null),"SAVE",_.createElement("br",null),"URL"),_.createElement("span",{title:"Expert mode that turns on additional features, such as theme selection",className:"side-panel-button",onClick:()=>k(!F)},F?YA(XA,23,23,"#E18343"):YA(GA),_.createElement("br",null),"EXPERT",_.createElement("br",null),"MODE"),_.createElement("span",{title:"Open GitHub repository",className:"side-panel-button",onClick:()=>window.open("https://github.com/gosling-lang/gosling.js","_blank")},YA(nA,23,23),_.createElement("br",null),"GITHUB"),_.createElement("span",{title:"Open Docs",className:"side-panel-button",onClick:()=>window.open("http://gosling-lang.org/docs/","_blank")},YA(tA,23,23),_.createElement("br",null),"DOCS"),_.createElement("span",{title:"About",className:"side-panel-button",onClick:()=>Xg(!yg)},YA(mA,23,23),_.createElement("br",null),"ABOUT")),_.createElement(tg,{split:"vertical",defaultSize:"calc(40%)",size:T?"0px":"calc(40%)",minSize:"0px"},_.createElement(tg,{split:"horizontal",defaultSize:"calc(100% - 30px)",maxSize:window.innerHeight-40-30,onChange:g=>{const I=window.innerHeight-40-g;I>30&&!x?U(!0):I<=30&&x&&U(!1)}},_.createElement(_.Fragment,null,_.createElement(mC,{code:G,readOnly:M,openFindBox:E,fontZoomIn:gg,fontZoomOut:Cg,onChange:hg.current,isDarkTheme:"dark"===n}),_.createElement("div",{className:`compile-message compile-message-${p.state}`},p.message)),_.createElement(tg,{split:"vertical",defaultSize:"100%"},_.createElement(_.Fragment,null,_.createElement("div",{className:"editor-header "+("dark"===n?"dark":"")},"Compiled HiGlass ViewConfig (Read Only)"),_.createElement("div",{style:{height:"100%",visibility:x?"visible":"hidden"}},_.createElement(mC,{code:Zg(y),readOnly:!0,isDarkTheme:"dark"===n}))),_.createElement(_.Fragment,null))),_.createElement(oC,null,_.createElement(tg,{split:"horizontal",defaultSize:"calc(100% - 30px)",size:O?"40%":"calc(100% - 30px)",maxSize:window.innerHeight-40-30},_.createElement("div",{id:"preview-container",className:"preview-container "+("dark"===n?"dark":"")},_.createElement(eC,{ref:Wg,spec:W,theme:n,padding:60,margin:0,border:"none",id:"goslig-component-root",className:"goslig-component",experimental:{reactive:!1},compiled:(g,I)=>{X(I)}})),_.createElement(tg,{split:"vertical",defaultSize:"100%"},_.createElement(_.Fragment,null,_.createElement("div",{className:"editor-header "+("dark"===n?"dark":""),style:{cursor:"pointer"},onClick:()=>j(!O)},"Data Preview (~100 Rows, Data Before Transformation)"),_.createElement("div",{className:"editor-data-preview-panel"},_.createElement("div",{title:"Refresh preview data",className:"data-preview-refresh-button",onClick:()=>a(!b)},YA(aA,23,23),_.createElement("br",null),"REFRESH DATA"),o.current.length>K&&o.current[K]&&o.current[K].data.length>0?_.createElement(_.Fragment,null,_.createElement("div",{className:"editor-data-preview-tab"},o.current.map(((g,I)=>_.createElement("button",{className:I===K?"selected-tab":"unselected-tab",key:JSON.stringify(g),onClick:()=>R(I)},`${JSON.parse(g.dataConfig).data.type.toLocaleLowerCase()} `,_.createElement("small",null,I))))),_.createElement("div",{className:"editor-data-preview-tab-info"},function(g){var I;const C=JSON.parse(g);if(!(null==(I=C.data)?void 0:I.type))return"";let A="";return C.data&&Object.keys(C.data).forEach((g=>{"object"==typeof C.data[g]?A+=`${JSON.stringify(C.data[g])} | `:A+=`${C.data[g]} | `})),A.slice(0,A.length-2)}(o.current[K].dataConfig)),_.createElement("div",{className:"editor-data-preview-table"},_.createElement("table",null,_.createElement("tbody",null,_.createElement("tr",null,Object.keys(o.current[K].data[0]).map(((g,I)=>_.createElement("th",{key:I},g)))),o.current[K].data.map(((g,I)=>_.createElement("tr",{key:I},Object.keys(g).map(((I,C)=>{var A;return _.createElement("td",{key:C},null==(A=g[I])?void 0:A.toString())}))))))))):null)),_.createElement(_.Fragment,null)))))),_.createElement("div",{className:`description ${v?"":"description-shadow "}${lg?"":"description-transition"} ${"dark"===n?"dark":""}`,style:{width:!w||v?0:f}},_.createElement("div",{className:v?"description-resizer-disabled":"description-resizer",ref:Gg}),_.createElement("div",{className:"description-wrapper"},_.createElement("header",null,_.createElement("button",{className:"hide-description-button",onClick:function(){N(!0)}},"Close"),_.createElement("br",null),_.createElement("br",null),_.createElement("span",{title:"Open GitHub Gist",className:"description-github-button",onClick:()=>window.open(`https://gist.github.com/${c}`,"_blank")},YA(ZA,14,14)," Open GitHub Gist to see raw files.")),w&&_.createElement(ng,{plugins:[Vg],source:w}))),_.createElement("div",{className:yg?"about-modal-container":"about-modal-container-hidden",onClick:()=>Xg(!1)}),_.createElement("div",{className:yg?"about-modal":"about-modal-container-hidden"},_.createElement("span",{className:"about-model-close-button",onClick:()=>{Xg(!1)}},YA(dA,30,30)),_.createElement("div",null,_.createElement("span",{className:"logo"},uA(80,80))),_.createElement("h3",null,"Gosling.js Editor"),"Gosling.js v0.9.9",_.createElement("br",null),_.createElement("br",null),_.createElement("a",{href:"https://github.com/gosling-lang/gosling.js/blob/master/CHANGELOG.md",target:"_blank",rel:"noopener noreferrer"},"Change Log"),_.createElement("br",null),_.createElement("br",null),_.createElement("a",{href:"https://github.com/gosling-lang/gosling.js/blob/master/LICENSE.md",target:"_blank",rel:"noopener noreferrer"},"MIT License"),_.createElement("br",null),_.createElement("br",null),_.createElement("h4",null,"Team"),_.createElement("span",null,"Sehi L'Yi (",_.createElement("a",{href:"https://twitter.com/sehi_lyi",target:"_blank",rel:"noopener noreferrer"},"@sehi_lyi"),")",_.createElement("br",null),"Qianwen Wang (",_.createElement("a",{href:"https://twitter.com/WangQianwenToo",target:"_blank",rel:"noopener noreferrer"},"@WangQianwenToo"),")",_.createElement("br",null),"Fritz Lekschas (",_.createElement("a",{href:"https://twitter.com/flekschas",target:"_blank",rel:"noopener noreferrer"},"@flekschas"),")",_.createElement("br",null),"Nils Gehlenborg (",_.createElement("a",{href:"https://twitter.com/gehlenborg",target:"_blank",rel:"noopener noreferrer"},"@gehlenborg"),")"),_.createElement("br",null),_.createElement("br",null),_.createElement("a",{href:"http://gehlenborglab.org/",target:"_blank",rel:"noopener noreferrer"},"Gehlenborg Lab"),", Harvard Medical School")))}})),document.getElementById("root"));
